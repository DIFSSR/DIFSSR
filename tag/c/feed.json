{
    "version": "https://jsonfeed.org/version/1",
    "title": "千里稻花应秀色 • All posts by \"c\" tag",
    "description": "blogs by SSR",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2021/07/22/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/C/",
            "url": "http://example.com/2021/07/22/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/C/",
            "title": "C语言学习",
            "date_published": "2021-07-22T00:37:44.000Z",
            "content_html": "<h1 id=\"c语言学习一\"><a class=\"markdownIt-Anchor\" href=\"#c语言学习一\"></a> C语言学习(一)</h1>\n<h3 id=\"起源\"><a class=\"markdownIt-Anchor\" href=\"#起源\"></a> 起源</h3>\n<p>1972年， 贝尔实验室的丹尼斯·里奇（Dennis Ritch） 和肯·汤普逊（Ken<br />\nThompson） 在开发UNIX操作系统时设计了C语言。 然而， C语言不完全是里<br />\n奇突发奇想而来， 他是在B语言（汤普逊发明） 的基础上进行设计。 至于 B<br />\n语言的起源， 那是另一个故事。 C 语言设计的初衷是将其作为程序员使用的<br />\n一种编程工具， 因此， 其主要目标是成为有用的语言。</p>\n<h2 id=\"基础规则\"><a class=\"markdownIt-Anchor\" href=\"#基础规则\"></a> 基础规则</h2>\n<h3 id=\"示例\"><a class=\"markdownIt-Anchor\" href=\"#示例\"></a> 示例</h3>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> <span class=\"comment\">/* 一个简单的C程序 */</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; <span class=\"keyword\">int</span></span><br><span class=\"line\">num; <span class=\"comment\">/* 定义一个名为num的变量 */</span></span><br><span class=\"line\">num = <span class=\"number\">1</span>; <span class=\"comment\">/* 为num赋一个值 */</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;I am a simple &quot;</span>); <span class=\"comment\">/* 使用printf()函数 */</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;computer.\\n&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;My favorite number is %d because it is first.\\n&quot;</span>,num);</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"变量命名\"><a class=\"markdownIt-Anchor\" href=\"#变量命名\"></a> 变量命名</h3>\n<p>可以用小写字母、 大写字母、 数字和下划线（_） 来命名。 而且， 名称<br />\n的第1个字符必须是字符或下划线， 不能是数字。</p>\n<table>\n<thead>\n<tr>\n<th>有效</th>\n<th>无效</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>wiggles</td>\n<td>$Z]**</td>\n</tr>\n<tr>\n<td>cat2</td>\n<td>2cat</td>\n</tr>\n<tr>\n<td>Hot_Tub</td>\n<td>Hot-Tub</td>\n</tr>\n<tr>\n<td>taxRate</td>\n<td>tax rate</td>\n</tr>\n<tr>\n<td>_kcab</td>\n<td>don’t</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"保留字\"><a class=\"markdownIt-Anchor\" href=\"#保留字\"></a> 保留字</h3>\n<p><img src=\"/assets/C%E5%85%B3%E9%94%AE%E5%AD%97.png\" class=\"lazyload placeholder\" data-srcset=\"/assets/C%E5%85%B3%E9%94%AE%E5%AD%97.png\" srcset=\"https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg\" alt=\"关键字\" /></p>\n<h3 id=\"基本数据类型\"><a class=\"markdownIt-Anchor\" href=\"#基本数据类型\"></a> 基本数据类型</h3>\n<ol>\n<li>\n<h4 id=\"整数类型int\"><a class=\"markdownIt-Anchor\" href=\"#整数类型int\"></a> 整数类型int</h4>\n<p>C语言提供3个附属关键字修饰基本整数类型： short、 long和unsigned。<br />\n应记住以下几点。<br />\nshort int类型（或者简写为short） 占用的存储空间可能比int类型少， 常<br />\n用于较小数值的场合以节省空间。 与int类似， short是有符号类型。<br />\nlong int或long占用的存储空间可能比int多， 适用于较大数值的场合。 与<br />\nint类似， long是有符号类型。<br />\nlong long int或long long（C99标准加入） 占用的储存空间可能比long多，<br />\n适用于更大数值的场合。 该类型至少占64位。 与int类似， long long是有符号类型。<br />\nunsigned int或unsigned只用于非负值的场合。 这种类型与有符号类型表<br />\n示的范围不同。 例如， 16位unsigned int允许的取值范围是0～65535， 而不是-32768～32767。 用于表示正负号的位现在用于表示另一个二进制位， 所以无符号整型可以表示更大的数</p>\n</li>\n<li>\n<h4 id=\"字符型char\"><a class=\"markdownIt-Anchor\" href=\"#字符型char\"></a> 字符型char</h4>\n<p>char类型用于储存字符（如， 字母或标点符号） ， 但是从技术层面看，<br />\nchar是整数类型。 因为char类型实际上储存的是整数而不是字符。 计算机使<br />\n用数字编码来处理字符， 即用特定的整数表示特定的字符。 美国最常用的编<br />\n码是ASCII编码， 本书也使用此编码。 例如， 在ASCII码中， 整数65代表大写字母A。 因此， 储存字母A实际上储存的是整数65（许多IBM的大型主机使<br />\n用另一种编码——EBCDIC， 其原理相同。 另外， 其他国家的计算机系统可<br />\n能使用完全不同的编码） 。<br />\n标准ASCII码的范围是0～127， 只需7位二进制数即可表示。 通常， char<br />\n类型被定义为8位的存储单元， 因此容纳标准ASCII码绰绰有余。 许多其他系<br />\n统（如IMB PC和苹果Macs） 还提供扩展ASCII码， 也在8位的表示范围之<br />\n内。 一般而言， C语言会保证char类型足够大， 以储存系统（实现C语言的系统） 的基本字符集。<br />\n许多字符集都超过了127， 甚至多于255。 例如， 日本汉字（kanji） 字符<br />\n集。 商用的统一码（Unicode） 创建了一个能表示世界范围内多种字符集的<br />\n系统， 目前包含的字符已超过110000个。 国际标准化组织（ISO） 和国际电<br />\n工技术委员会（IEC） 为字符集开发了ISO/IEC 10646标准。 统一码标准也与<br />\nISO/IEC 10646标准兼容。<br />\nC语言把1字节定义为char类型占用的位（bit） 数， 因此无论是16位还是<br />\n32位系统， 都可以使用char类型。</p>\n<p>转义支付</p>\n<p><img src=\"/assets/C%E8%BD%AC%E4%B9%89%E5%AD%97%E7%AC%A6.png\" class=\"lazyload placeholder\" data-srcset=\"/assets/C%E8%BD%AC%E4%B9%89%E5%AD%97%E7%AC%A6.png\" srcset=\"https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg\" alt=\"image-20210723114546983\" /></p>\n</li>\n<li>\n<h4 id=\"布尔类型\"><a class=\"markdownIt-Anchor\" href=\"#布尔类型\"></a> 布尔类型</h4>\n<p>C99标准添加了_Bool类型， 用于表示布尔值， 即逻辑值true和false。 因<br />\n为C语言用值1表示true， 值0表示false， 所以_Bool类型实际上也是一种整数<br />\n类型。 但原则上它仅占用1位存储空间， 因为对0和1而言， 1位的存储空间足<br />\n够了。</p>\n</li>\n<li>\n<h4 id=\"浮点数float-double和long-double\"><a class=\"markdownIt-Anchor\" href=\"#浮点数float-double和long-double\"></a> 浮点数（float、 double和long double  ）</h4>\n<p>​\t1.声明浮点型变量<br />\n浮点型变量的声明和初始化方式与整型变量相同， 下面是一些例子：<br />\nfloat noah, jonah;<br />\ndouble trouble;<br />\nfloat planck = 6.63e-34;<br />\nlong double gnp;<br />\n​\t2.浮点型常量<br />\n在代码中， 可以用多种形式书写浮点型常量。 浮点型常量的基本形式是： 有符号的数字（包括小数点） ， 后面紧跟e或E， 最后是一个有符号数表示10的指数。 下面是两个有效的浮点型常量：<br />\n-1.56E+12<br />\n2.87e-3<br />\n正号可以省略。 可以没有小数点（如， 2E5） 或指数部分（如，19.28） ， 但是不能同时省略两者。 可以省略小数部分（如， 3.E16） 或整数部分（如， .45E-6） ， 但是不能同时省略两者。 下面是更多的有效浮点型常量示例：<br />\n3.14159<br />\n.2<br />\n4e16<br />\n.8E-5<br />\n100.<br />\n145<br />\n不要在浮点型常量中间加空格： 1.56 E+12（错误！ ）默认情况下， 编译器假定浮点型常量是double类型的精度。 例如， 假设some是float类型的变量， 编写下面的语句：<br />\nsome = 4.0 * 2.0;<br />\n通常， 4.0和2.0被储存为64位的double类型， 使用双精度进行乘法运算， 然后将乘积截断成float类型的宽度。 这样做虽然计算精度更高， 但是会减慢程序的运行速度。<br />\n在浮点数后面加上f或F后缀可覆盖默认设置， 编译器会将浮点型常量看作float类型， 如2.3f和9.11E9F。 使用l或L后缀使得数字成为long double类型， 如54.3l和4.32L。 注意， 建议使用L后缀， 因为字母l和数字1很容易混<br />\n淆。 没有后缀的浮点型常量是double类型 。</p>\n</li>\n<li>\n<h4 id=\"使用数据类型\"><a class=\"markdownIt-Anchor\" href=\"#使用数据类型\"></a> 使用数据类型</h4>\n<p>编写程序时， 应注意合理选择所需的变量及其类型。 通常， 用int或float<br />\n类型表示数字， char类型表示字符。 在使用变量之前必须先声明， 并选择有<br />\n意义的变量名。 初始化变量应使用与变量类型匹配的常数类型。 例如 ：</p>\n</li>\n</ol>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> apples = <span class=\"number\">3</span>;  <span class=\"comment\">/* 正确 */</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> oranges = <span class=\"number\">3.0</span>; <span class=\"comment\">/* 不好的形式 */</span> </span><br></pre></td></tr></table></figure>\n<p>把一个类型的数值初始化给不同类型的变量时， 编译器会把值转换成与<br />\n变量匹配的类型， 这将导致部分数据丢失。 例如， 下面的初始化：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> cost = <span class=\"number\">12.99</span>; <span class=\"comment\">/* 用double类型的值初始化int类型的变量 */</span></span><br><span class=\"line\"><span class=\"keyword\">float</span> pi = <span class=\"number\">3.1415926536</span>; <span class=\"comment\">/* 用double类型的值初始化float类型的变量 *</span></span><br></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>\n<h4 id=\"\"><a class=\"markdownIt-Anchor\" href=\"#\"></a> </h4>\n</li>\n</ol>\n",
            "tags": [
                "C"
            ]
        }
    ]
}