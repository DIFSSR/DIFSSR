<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://example.com</id>
    <title>千里稻花应秀色 • Posts by &#34;深度学习&#34; tag</title>
    <link href="http://example.com" />
    <updated>2022-04-01T03:40:59.000Z</updated>
    <category term="机器学习" />
    <category term="C" />
    <category term="大数据" />
    <category term="Shell" />
    <category term="Python" />
    <category term="MapReduce" />
    <category term="Hexo" />
    <category term="安全" />
    <category term="鸿蒙" />
    <category term="单片机" />
    <category term="平台" />
    <category term="深度学习" />
    <entry>
        <id>http://example.com/2022/04/01/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/</id>
        <title>PyTorch深度学习实践</title>
        <link rel="alternate" href="http://example.com/2022/04/01/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/"/>
        <content type="html">&lt;h1 id=&#34;pytorch深度学习实践&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#pytorch深度学习实践&#34;&gt;&lt;/a&gt; PyTorch深度学习实践&lt;/h1&gt;
&lt;h2 id=&#34;第1章-深度学习基础&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第1章-深度学习基础&#34;&gt;&lt;/a&gt; 第1章 深度学习基础&lt;/h2&gt;
&lt;h3 id=&#34;11-人工智能-机器学习与深度学习&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#11-人工智能-机器学习与深度学习&#34;&gt;&lt;/a&gt; 1.1 人工智能、机器学习与深度学习&lt;/h3&gt;
&lt;h4 id=&#34;111-人工智能简介&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#111-人工智能简介&#34;&gt;&lt;/a&gt; 1.1.1 人工智能简介&lt;/h4&gt;
&lt;p&gt;人工智能：是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。&lt;br /&gt;
人工智能的目的：就是让计算机能够像人一样思考。&lt;br /&gt;
&lt;strong&gt;人工智能、机器学习与深度学习的关系如下图：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220403154446384.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220403154446384.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220403154446384&#34; /&gt;&lt;br /&gt;
&lt;strong&gt;人工智能三种形态：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;弱人工智能：单个方面的人工智能。目前，主流科研集中在弱人工智能上。并且一般认为这一研究领域已经取得可观的成就。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;强人工智能：使机器学习人的理解、学习和执行任务的能力，不仅能真正推理和解决问题的智能机器，还具有知觉的或自我意识。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;超人工智能：超越人类智慧并且将人类智慧延展的智能体系，各方面都可以比人类强。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220403154713334.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220403154713334.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220403154713334&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;112-机器学习简介&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#112-机器学习简介&#34;&gt;&lt;/a&gt; 1.1.2 机器学习简介&lt;/h4&gt;
&lt;p&gt;机器学习的广义概念：是指从已知数据中获得规律，并利用规律对未知数据进行预测的方法。&lt;br /&gt;
机器学习可用于：自然语言处理、图像识别、生物信息学以及风险预测等，已在工程学、经济学以及心理学等多个领域。&lt;br /&gt;
机器学习是一种统计学习方法，机器人和计算机等机器需要使用大量数据进行学习，从而提取出所需的信息。&lt;br /&gt;
机器学习的任务，就是要在基于大数据量的基础上，发掘其中蕴含并且有用的信息。&lt;br /&gt;
** 机器学习的分类**&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220403155001955.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220403155001955.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220403155001955&#34; /&gt;&lt;br /&gt;
机器学习主要分为有监督学习（也称监督学习）和无监督学习两种。&lt;br /&gt;
监督学习需要为机器提供一组标记数据。有监督学习通过训练，从标记数据中提取通用信息或特征信息， 以此得到预测模型。&lt;br /&gt;
监督学习的两种主要类型是分类和回归。&lt;br /&gt;
无监督学习两种主要类型是聚类和降维。&lt;/p&gt;
&lt;h4 id=&#34;113-深度学习简介&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#113-深度学习简介&#34;&gt;&lt;/a&gt; 1.1.3 深度学习简介&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;深度学习定义：&lt;/strong&gt;&lt;br /&gt;
就是一种利用深度人工神经网络来进行自动分类、预测和学习的技术。&lt;br /&gt;
深度学习的本质就是一个深层神经网络。深度学习的基本思想就是对堆叠多个层，将上一层的输出作为下一层的输入，逐步实现对输入信息的分级表达，让程序从中自动学习深入、抽象的特征。尤其值得注意的是“深度学习减少了人为干预，而这恰恰保留了数据客观性，因此可以提取出更加准确的特征”。深度学习的训练过程：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220403155216197.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220403155216197.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220403155216197&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220403155316397.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220403155316397.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220403155316397&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;机器学习与深度学习流程对比&lt;/strong&gt;&lt;br /&gt;
深度学习和传统机器学习在流程上的差异：深度学习算法可以从数据中学习更加复杂的特征表达，使得最后一步权重学习变得更加简单且有效。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220403155625784.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220403155625784.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220403155625784&#34; /&gt;&lt;br /&gt;
&lt;strong&gt;深度学习发展历史&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220403160006153.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220403160006153.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220403160006153&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;12-深度学习的三大核心要素&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#12-深度学习的三大核心要素&#34;&gt;&lt;/a&gt; 1.2 深度学习的三大核心要素&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220403155909130.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220403155909130.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220403155909130&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大数据&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220403160223573.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220403160223573.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220403160223573&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;深度网络架构&lt;/strong&gt;&lt;br /&gt;
所谓的深度网络架构，就是整个网络体系的构建方式和拓扑连接结构.&lt;br /&gt;
目前最常用的有4种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;全连接网络FC、&lt;/li&gt;
&lt;li&gt;卷积神经网络CNN、&lt;/li&gt;
&lt;li&gt;循环神经网络RNN&lt;/li&gt;
&lt;li&gt;生成对抗网络GAN。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220403160247799.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220403160247799.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220403160247799&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;高性能的计算力&lt;/strong&gt;&lt;br /&gt;
GPU&lt;/p&gt;
&lt;h3 id=&#34;13-神经元与深度神经网络&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#13-神经元与深度神经网络&#34;&gt;&lt;/a&gt; 1.3 神经元与深度神经网络&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;神经元模型&lt;/strong&gt;&lt;br /&gt;
人体的神经元包含树突、细胞核和轴突。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220403160529805.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220403160529805.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220403160529805&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;14-神经网络中常用的激励函数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#14-神经网络中常用的激励函数&#34;&gt;&lt;/a&gt; 1.4 神经网络中常用的激励函数&lt;/h3&gt;
&lt;p&gt;如果每一层输出都是上层输入的线性函数，无论神经网络有多少层，输出都是输入的线性组合。&lt;br /&gt;
&lt;strong&gt;激活函数&lt;/strong&gt;&lt;br /&gt;
激活函数给神经元引入了非线性因素，使得神经网络可以任意逼近任何非线性函数，这样神经网络就可以应用到众多的非线性模型中。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Sigmoid 函数&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220403160821953.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220403160821953.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220403160821953&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;tanh 函数&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220403160903804.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220403160903804.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220403160903804&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;ReLU函数&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220403160951910.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220403160951910.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220403160951910&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;指数线性单元 ELU函数&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220403161029538.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220403161029538.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220403161029538&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;Leaky ReLU 渗漏型整流线性单元激活函数&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220403161144933.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220403161144933.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220403161144933&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;6&#34;&gt;
&lt;li&gt;Maxout 函数&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220403161216101.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220403161216101.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220403161216101&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;15-深度学习的优势&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#15-深度学习的优势&#34;&gt;&lt;/a&gt; 1.5 深度学习的优势&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;不用再提取特征&lt;/li&gt;
&lt;li&gt;处理线性不可分的能力强。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;16-常见的深度学习框架&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#16-常见的深度学习框架&#34;&gt;&lt;/a&gt; 1.6 常见的深度学习框架&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220403161359277.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220403161359277.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220403161359277&#34; /&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;PyTorch&lt;br /&gt;
2017年1月Facebook开源Torch库的Python版本（由Lua语言编写）。&lt;a href=&#34;https://pytorch.org/&#34;&gt;https://pytorch.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;TensorFlow&lt;br /&gt;
2015年9月谷歌大脑开源的深度学习框架&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;练习&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#练习&#34;&gt;&lt;/a&gt; 练习&lt;/h3&gt;
&lt;h2 id=&#34;第2章-深度学习框架pytorch的安装&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第2章-深度学习框架pytorch的安装&#34;&gt;&lt;/a&gt; 第2章 深度学习框架PyTorch的安装&lt;/h2&gt;
&lt;h3 id=&#34;21-pytorch-介绍&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#21-pytorch-介绍&#34;&gt;&lt;/a&gt; 2.1 PyTorch 介绍&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220403162522814.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220403162522814.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220403162522814&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;22-windows下pytorch-深度学习环境的配置&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#22-windows下pytorch-深度学习环境的配置&#34;&gt;&lt;/a&gt; 2.2 Windows下PyTorch 深度学习环境的配置&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;安装Python&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;pip安装torch&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;登录PyTorch官网安装&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220403162709713.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220403162709713.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220403162709713&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;点击Get Started&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220403162730246.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220403162730246.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220403162730246&#34; /&gt;&lt;/p&gt;
&lt;p&gt;3．复制命令到终端执行&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;pip install torch==1.8.0+cpu torchvision==0.9.0+cpu torchaudio===0.8.0 -f https://download.pytorch.org/whl/torch_stable.html &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;4．安装torchvision&lt;br /&gt;
pip3 install torchvision&lt;/p&gt;
&lt;h3 id=&#34;23-linux下pytorch-深度学习环境的配置&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#23-linux下pytorch-深度学习环境的配置&#34;&gt;&lt;/a&gt; 2.3 Linux下PyTorch 深度学习环境的配置&lt;/h3&gt;
&lt;p&gt;同上&lt;/p&gt;
&lt;h3 id=&#34;24-pytorch开发工具&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#24-pytorch开发工具&#34;&gt;&lt;/a&gt; 2.4 PyTorch开发工具&lt;/h3&gt;
&lt;p&gt;PyCharm不多说，或者Notebook&lt;/p&gt;
&lt;h2 id=&#34;第3章-pytorch基础&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第3章-pytorch基础&#34;&gt;&lt;/a&gt; 第3章 PyTorch基础&lt;/h2&gt;
&lt;h3 id=&#34;31张量是什么&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#31张量是什么&#34;&gt;&lt;/a&gt; 3.1张量是什么&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220403163251961.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220403163251961.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220403163251961&#34; /&gt;&lt;/p&gt;
&lt;p&gt;PyTorch处理的最基本操作对象就是张量，张量的英文是Tensor，表示的是一个多维的矩阵。&lt;/p&gt;
&lt;p&gt;零阶张量就是一个数，一阶张量就是向量，二阶张量就是一般的矩阵，多阶张量就相当于一个多维的数组。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;张量的3个属性：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;阶（rank）：维数。&lt;/li&gt;
&lt;li&gt;形状（shape）： 行和列的数目。&lt;/li&gt;
&lt;li&gt;类型（type）： 元素的数据类型。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220403163432216.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220403163432216.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220403163432216&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220403163524553.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220403163524553.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220403163524553&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220403163540349.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220403163540349.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220403163540349&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220403163553803.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220403163553803.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220403163553803&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;32-tensor的创建&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#32-tensor的创建&#34;&gt;&lt;/a&gt; 3.2 Tensor的创建&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;创建给定元素值的Tensor&lt;/strong&gt;&lt;br /&gt;
【例3.1】假设要创建一个32位浮点数的Tensor,其值是矩阵[[-1,-2],[3,4],[5,6]]，&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; torch&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;a = torch.FloatTensor([[-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, -&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;], [&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;], [&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;6&lt;/span&gt;]])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;a:&amp;#x27;&lt;/span&gt;, a)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;b = torch.Tensor([[-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, -&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;], [&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;], [&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;6&lt;/span&gt;]])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;b:&amp;#x27;&lt;/span&gt;, b)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220403163813264.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220403163813264.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220403163813264&#34; /&gt;&lt;/p&gt;
&lt;p&gt;【例3.2】查看的Tensor的尺寸,属性类型和元素数量，&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; torch &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; t&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;b = t.Tensor([[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;], [&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;], [&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;6&lt;/span&gt;]])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(b)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;b.size(): &amp;quot;&lt;/span&gt;, b.size())&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;b.shape:  &amp;quot;&lt;/span&gt;, b.shape)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;b.type(): &amp;quot;&lt;/span&gt;, b.&lt;span class=&#34;built_in&#34;&gt;type&lt;/span&gt;())&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;b.dtype:  &amp;quot;&lt;/span&gt;, b.dtype)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;b.numel():&amp;quot;&lt;/span&gt;, b.numel())&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220403163921660.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220403163921660.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220403163921660&#34; /&gt;&lt;/p&gt;
&lt;p&gt;【例3.3】可以在创建时给Tensor直接赋值，也可以先创建一个未赋值的Tensor。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; torch &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; t&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;c = t.FloatTensor(&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;d = t.Tensor(&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(c)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(d)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220403164104717.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220403164104717.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220403164104717&#34; /&gt;&lt;/p&gt;
&lt;p&gt;【例3.4】创建一个和给定的Tensor形状一样的新Tensor&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; torch &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; t&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;d = t.Tensor(&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;e = t.Tensor(d.size())&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(e)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220403164156560.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220403164156560.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220403164156560&#34; /&gt;&lt;/p&gt;
&lt;p&gt;其他创建方法&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;a = torch.zeros(&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;)  &lt;span class=&#34;comment&#34;&gt;#返回全零Tensor&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;a:&amp;quot;&lt;/span&gt;,a)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;b = torch.ones_like(a)   &lt;span class=&#34;comment&#34;&gt;#返回shape和参数一样的全1Tensor, zeros_like类似&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;b:&amp;quot;&lt;/span&gt;,b)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;c = torch.arange(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)  &lt;span class=&#34;comment&#34;&gt;#torch.arange(start=0, end, step=1)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;c:&amp;quot;&lt;/span&gt;,c)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;e = torch.full((&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;), &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;)  &lt;span class=&#34;comment&#34;&gt;#初始化指定值的Tensor&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;e:&amp;quot;&lt;/span&gt;,e)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220403164303006.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220403164303006.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220403164303006&#34; /&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#************随机初始化***********&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;a = torch.rand((&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;))   &lt;span class=&#34;comment&#34;&gt;#初始化为[0,1)内的均匀分布随机数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;a:&amp;quot;&lt;/span&gt;,a)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;b = torch.rand_like(a)  &lt;span class=&#34;comment&#34;&gt;#初始化为[0,1)内的均匀分布随机数，不过shape与参数相同&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;b:&amp;quot;&lt;/span&gt;,b)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;torch.randn(&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;)  &lt;span class=&#34;comment&#34;&gt;#返回标准正态分布(0,1)的随机数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;c = torch.normal(torch.randn(&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;), torch.randn(&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;))  &lt;span class=&#34;comment&#34;&gt;#torch.normal(mean, std, out=None)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;c:&amp;quot;&lt;/span&gt;,c)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220403164422605.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220403164422605.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220403164422605&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;33-tensor的调整形状操作&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#33-tensor的调整形状操作&#34;&gt;&lt;/a&gt; 3.3 Tensor的调整形状操作&lt;/h3&gt;
&lt;p&gt;【例3.5】创建一个一阶张量，长度为6，元素为[0,1,2,3,4,5],使用torch.view()函数将其调整为二阶张量2*3的Tensor。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; torch &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; t&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;a = t.arange(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;6&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;原&amp;quot;&lt;/span&gt;,a)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;b = a.view(&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;新&amp;quot;&lt;/span&gt;,b)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(b.shape)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;b = a.view(&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;b[&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;][&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;] =&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;b = &amp;quot;&lt;/span&gt;,b)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;a = &amp;quot;&lt;/span&gt;,a)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;## 注：通过tensor.view()方法可以调整tensor的形状,但必须保证调整前后元素总数一致。view不会修改自身的数据,不会修改原形状，返回的新tensor与源tensor共享内存。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220403164752807.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220403164752807.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220403164752807&#34; /&gt;&lt;/p&gt;
&lt;p&gt;【例3.6】改变形状的其他方法torch.resize_(), torch.reshape()。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; torch &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; t&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;a = t.arange(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;6&lt;/span&gt;); &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;a = &amp;quot;&lt;/span&gt;,a)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;b = a.view(&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;) ;  &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;b = &amp;quot;&lt;/span&gt;,b,&lt;span class=&#34;string&#34;&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;f = a.reshape(&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;); b[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;][&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;] =&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;f = &amp;quot;&lt;/span&gt;,f); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;a = &amp;quot;&lt;/span&gt;,a,&lt;span class=&#34;string&#34;&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;f = t.reshape(a,(&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;c = a.resize_(&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;); &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;c = &amp;quot;&lt;/span&gt;,c)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;d = a.resize_(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;d = &amp;quot;&lt;/span&gt;,d); &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;a = &amp;quot;&lt;/span&gt;,a)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;e = a.resize_(&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;); &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;e = &amp;quot;&lt;/span&gt;,e)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;## resize_()会修改a的shape，reshape()返回修改后的tensor，但不会更改a的shape&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220403164956841.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220403164956841.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220403164956841&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;34-tensor的运算&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#34-tensor的运算&#34;&gt;&lt;/a&gt; 3.4 Tensor的运算&lt;/h3&gt;
&lt;p&gt;【例3.7】 对 Tensor的加、减、乘、除、取绝对值操作。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220403165048053.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220403165048053.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220403165048053&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;35-tensor的比较操作&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#35-tensor的比较操作&#34;&gt;&lt;/a&gt; 3.5 Tensor的比较操作&lt;/h3&gt;
&lt;p&gt;Tensor常用的比较函数有很多，比如&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;torch.equal( )、&lt;/li&gt;
&lt;li&gt;torch.eq( )、&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://torch.gt&#34;&gt;torch.gt&lt;/a&gt;( )、&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://torch.lt&#34;&gt;torch.lt&lt;/a&gt;( )、&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://torch.ge&#34;&gt;torch.ge&lt;/a&gt;( )、&lt;/li&gt;
&lt;li&gt;torch.le( )、&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://torch.ne&#34;&gt;torch.ne&lt;/a&gt;( )、&lt;/li&gt;
&lt;li&gt;torch.topk( )、&lt;/li&gt;
&lt;li&gt;torch.sort( )&lt;br /&gt;
等等，这里简单介绍几个。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;torch.equal( )&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;若两个Tensor具有相同的形状和元素，则返回True,否则返回False。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220403165258051.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220403165258051.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220403165258051&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;http://torch.gt&#34;&gt;torch.gt&lt;/a&gt;( )&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;逐元素比较input和other， 若input元素严格大于other元素，则返回True,否则返回False。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220403165425079.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220403165425079.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220403165425079&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;36-tensor的数理统计操作&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#36-tensor的数理统计操作&#34;&gt;&lt;/a&gt; 3.6 Tensor的数理统计操作&lt;/h3&gt;
&lt;p&gt;Tensor中的求最小值、最大值、均值、累加、累积等的操作比如：torch.min( )、torch.max( )、torch.mean( )等。&lt;br /&gt;
&lt;strong&gt;torch.max( )、torch.mean( )&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220403165541364.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220403165541364.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220403165541364&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;37-tensor与numpy的互相转换操作&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#37-tensor与numpy的互相转换操作&#34;&gt;&lt;/a&gt; 3.7 Tensor与Numpy的互相转换操作&lt;/h3&gt;
&lt;p&gt;NumPy(Numerical Python) 是 Python 语言的一个扩展程序库，支持大量的维度数组与矩阵运算，此外也针对数组运算提供大量的数学函数库。它提供了一个多维数组（ndarray）数据类型，以及关于多维数组的操作，NumPy 已经成为其他大数据和机器学习模块的基础。&lt;/p&gt;
&lt;p&gt;Tensor类似于Numpy的ndarray，但ndarray 不支持GPU运算，而Tensor支持。&lt;/p&gt;
&lt;p&gt;Tensor与Numpy可以方便的互相转换。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220403165654101.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220403165654101.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220403165654101&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;38-tensor-的降维和增维操作&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#38-tensor-的降维和增维操作&#34;&gt;&lt;/a&gt; 3.8 Tensor 的降维和增维操作&lt;/h3&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#关于Tensor维度的操作有很多，&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#比如张量降维 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;torch.squeeze( )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#张量增维   &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;torch.unsqueeze( )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#张量拼接   &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;torch.cat( )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#张量扩大   &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;torch.Tensor.expand( )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#张量缩小   &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;torch.Tensor.narrow( )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220403165848913.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220403165848913.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220403165848913&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220403165905983.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220403165905983.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220403165905983&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220403165930249.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220403165930249.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220403165930249&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;39-tensor-的裁剪操作&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#39-tensor-的裁剪操作&#34;&gt;&lt;/a&gt; 3.9 Tensor 的裁剪操作&lt;/h3&gt;
&lt;p&gt;torch.clamp()对Tensor中的元素进行范围过滤，不符合条件的可以把它变换到范围内部（边界）上，常用于梯度裁剪（gradient clipping），即在发生梯度离散或者梯度爆炸时对梯度的处理。&lt;br /&gt;
torch.clamp(input,min,max ,out=None) &lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220403170024050.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220403170024050.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220403170024050&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;310-tensor-的索引操作&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#310-tensor-的索引操作&#34;&gt;&lt;/a&gt; 3.10 Tensor 的索引操作&lt;/h3&gt;
&lt;p&gt;Tensor支持与numpy.ndarray类似的索引操作，下面通过一些例子讲解常用的索引操作。如无特殊说明，索引出来的结果与原Tensor共享内存，即修改一个，另一个也会跟着改。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220403170150497.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220403170150497.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220403170150497&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220403170213848.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220403170213848.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220403170213848&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220403170246190.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220403170246190.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220403170246190&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;311-把tensor-移到gpu上去&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#311-把tensor-移到gpu上去&#34;&gt;&lt;/a&gt; 3.11 把Tensor 移到GPU上去&lt;/h3&gt;
&lt;p&gt;PyTorch提供了一个名为cuda( )的简单函数，将张量从CPU复制到GPU上。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220403170314792.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220403170314792.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220403170314792&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220404101826313.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220404101826313.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220404101826313&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;自动求导&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#自动求导&#34;&gt;&lt;/a&gt; 自动求导&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220404101901457.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220404101901457.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220404101901457&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220404101923121.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220404101923121.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220404101923121&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220404102331503.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220404102331503.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220404102331503&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;autograd.grad()函数&lt;/li&gt;
&lt;li&gt;backward()函数&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;功能模块-数据集&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#功能模块-数据集&#34;&gt;&lt;/a&gt; 功能模块  数据集&lt;/h3&gt;
&lt;p&gt;在处理任何机器学习问题之前都需要数据读取，并进行预处理。&lt;br /&gt;
PyTorch 提供了很多工具使得数据的读取和预处理变得很容易。&lt;br /&gt;
想让PyTorch能读取我们自己的数据，首先要了解pytroch读取图片的机制和流程。&lt;br /&gt;
主要使用以下两个类：&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;torch.utils.data.Dataset&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;torch.utils.data.DataLoader &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;第一步：定义一个子类，继承Dataset类， 重写__len()__, __getitem()__ 方法。&lt;/p&gt;
&lt;p&gt;第二步： 实例化一个对象，对数据集进行变换&lt;/p&gt;
&lt;p&gt;第三步： 使用DataLoader进行包装，可视化等&lt;/p&gt;
&lt;h3 id=&#34;功能模块-神经网络工具箱-nnmodel&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#功能模块-神经网络工具箱-nnmodel&#34;&gt;&lt;/a&gt; 功能模块   神经网络工具箱 nn.model&lt;/h3&gt;
&lt;p&gt;使用torch.nn包中的工具来构建神经网络，构建一个神经网络需要以下几步：&lt;br /&gt;
定义神经网络的权重,搭建网络结构&lt;br /&gt;
遍历整个数据集进行训练&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将数据输入神经网络&lt;/li&gt;
&lt;li&gt;计算loss      正向传播&lt;/li&gt;
&lt;li&gt;计算网络权重的梯度       反向传播&lt;/li&gt;
&lt;li&gt;更新网络权重weight = weight - learning_rate * gradient&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在PyTorch里面编写神经网络，所有的层结构和损失函数都来自于torch.nn, 所有的模型构建都是从基类nn.Module 继承的，于是有了搭建结构的模板。&lt;/p&gt;
&lt;p&gt;全连接示例：&lt;br /&gt;
&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220404103227411.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220404103227411.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220404103227411&#34; /&gt;&lt;br /&gt;
卷积神经网络结构：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220404103405123.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220404103405123.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220404103405123&#34; /&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; torch.nn &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; nn&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;net_name&lt;/span&gt; (&lt;span class=&#34;params&#34;&gt;nn.Module&lt;/span&gt;) :&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;__init__&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self,in_ch=&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, out_ch=&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, features=&lt;span class=&#34;number&#34;&gt;6&lt;/span&gt;&lt;/span&gt;):&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;super&lt;/span&gt;(net_name, self).__init_()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;self.cnn=nn.Sequential(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		nn.Conv2d(in_channels=in_ch,out_channels=&lt;span class=&#34;number&#34;&gt;6&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		nn.Conv2d(in_channels=&lt;span class=&#34;number&#34;&gt;6&lt;/span&gt;, out_channels=&lt;span class=&#34;number&#34;&gt;6&lt;/span&gt;, kernel_size=&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		nn.Conv2d(in_channels=&lt;span class=&#34;number&#34;&gt;6&lt;/span&gt;, out_channels=out_ch, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;)  ) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;forward&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self, x&lt;/span&gt;) :&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	x = self.cnn(x)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; x&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;criterion = nn. CrossEntropyLoss()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;criterion = nn. MSELoss()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;loss = criterion(output, target)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;功能模块-优化器torchoptim&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#功能模块-优化器torchoptim&#34;&gt;&lt;/a&gt; 功能模块   优化器torch.optim&lt;/h3&gt;
&lt;p&gt;在机器学习或者深度学习中，我们需要通过修改参数使得损失函数最小化(或最大化)，优化算法就是一种调整模型参数更新的策略。&lt;br /&gt;
优化算法分为两大类:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220404103644221.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220404103644221.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220404103644221&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SGD&lt;/li&gt;
&lt;li&gt;ASGD&lt;/li&gt;
&lt;li&gt;Adadelta&lt;/li&gt;
&lt;li&gt;Adagrad&lt;/li&gt;
&lt;li&gt;Adam&lt;/li&gt;
&lt;li&gt;AdamW&lt;/li&gt;
&lt;li&gt;Adamax&lt;/li&gt;
&lt;li&gt;SparseAdam&lt;/li&gt;
&lt;li&gt;RMSprop&lt;/li&gt;
&lt;li&gt;Rprop&lt;/li&gt;
&lt;li&gt;LBFGS&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220404103957915.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220404103957915.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220404103957915&#34; /&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;optimizer. zeros() #需要先将梯度归零&lt;/li&gt;
&lt;li&gt;loss . backward()#反向传播，自动求导得到每个参数的梯度，&lt;/li&gt;
&lt;li&gt;optimizer . step()#最后就可以通过梯度做-一步参数更新。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;计算机视觉工具包torchvision&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#计算机视觉工具包torchvision&#34;&gt;&lt;/a&gt; 计算机视觉工具包：torchvision&lt;/h3&gt;
&lt;p&gt;主要包含以下三部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;models：提供深度学习中各种经典网络结构及预训练好的模型，包括AlexNet、VGG系列、ResNet系列、Inception系列等。&lt;/li&gt;
&lt;li&gt;datasets：提供常用的数据集下载，设计上都是继承torch.utils.data.Dataset，主要包括MNIST、CIFAR10/100、ImageNet、COCO等。&lt;/li&gt;
&lt;li&gt;transform：提供常用的数据预处理操作，主要包括对Tensor及PIL Image对象的操作。transforms中涵盖了大部分对Tensor和PIL Image的常用处理。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;对PIL Image的操作包括：&lt;/strong&gt;&lt;br /&gt;
（1）Scale：调整图片尺寸，长宽比保持不变。&lt;br /&gt;
（2）CenterCrop、RandomCrop： 裁剪图片。&lt;br /&gt;
（3）Pad：填充。&lt;br /&gt;
（4）ToTensor：将PIL Image对象转成Tensor，会自动将[0, 255] 归一化至[0, 1]。&lt;br /&gt;
&lt;strong&gt;对Tensor的操作包括：&lt;/strong&gt;&lt;br /&gt;
（1）Normalize：标准化（减均值，除以标准差）。&lt;br /&gt;
（2）ToPILImage：将Tensor转为PIL Image对象。&lt;/p&gt;
&lt;h2 id=&#34;第4章-线性回归和逻辑回归&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第4章-线性回归和逻辑回归&#34;&gt;&lt;/a&gt; 第4章 线性回归和逻辑回归&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220404104637284.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220404104637284.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220404104637284&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;41-正向学习过程&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#41-正向学习过程&#34;&gt;&lt;/a&gt; 4.1　正向学习过程&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;样本由输入层传入第一层layer，经第一层每个节点计算，每个节点得到一个输出，其输出继续作为下一层的输入，向前传播，直到输出层输出预测的结果。&lt;/li&gt;
&lt;li&gt;初次正向传播会先初始化网络的权值，得到的输出值并不一定正确值。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220404104800893.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220404104800893.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220404104800893&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;42-反向调整过程&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#42-反向调整过程&#34;&gt;&lt;/a&gt; 4.2　反向调整过程&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220404105059576.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220404105059576.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220404105059576&#34; /&gt;&lt;/p&gt;
&lt;p&gt;梯度&lt;br /&gt;
&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220404105139227.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220404105139227.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220404105139227&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;梯度下降法：&lt;/strong&gt;&lt;br /&gt;
梯度下降法是最常用的神经网络优化算法。&lt;br /&gt;
若将代价函数简单可视化，代价函数相当于一个崎岖不平的盆地，有高峰也有低谷（最小值）。梯度下降的目标是取得最小值，每次沿着最陡峭的方向（梯度反方向），下降一定的距离（步长）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220404105210801.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220404105210801.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220404105210801&#34; /&gt;&lt;/p&gt;
&lt;p&gt;梯度下降的步长不是一直不变的，当下降接近底部的时候，需要调整步子的大小，小心试探。当步子太大时，容易跨过最低点，在底部来回震荡。步子过小，下降速度会较慢。&lt;br /&gt;
在梯度下降过程中，节点i和j之间连接的权重$$W_{ji}$$的更新如下：其中η为学习速率，用于控制步长的变化。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220404105431331.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220404105431331.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220404105431331&#34; /&gt;&lt;/p&gt;
&lt;p&gt;在梯度下降法调优中，影响较大的三个因素为步长、初始值和归一化。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;步长：又称学习率，决定了梯度下降迭代过程中每一步沿梯度负方向前进的长度。也就是上述所说的沿最陡峭的位置走的那一步的长度。&lt;/li&gt;
&lt;li&gt;初始值：随机选取的值，当损失函数是非凸函数时，找到的可能是局部最优解，此时需要多测试几次，从局部最优解中找出最优解。当损失函数是凸函数时，得到的解就是最优解。&lt;/li&gt;
&lt;li&gt;归一化：若不进行归一化，会导致收敛速度很慢，从而形成“之”字形的路线。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;反向传播的问题&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;梯度消失：由于sigmod函数在趋于无限大时，梯度会逐渐消失，随着传播深度的增加（如7层以上），残差传播到底层时已经变得太小，梯度的幅度也会急剧减小，导致浅层神经元的权重更新非常缓慢，无法有效进行学习。深层模型也就变成了前几层几乎固定，只能调节后几层的浅层模型，形成梯度弥散（vanishing gradient）。&lt;/li&gt;
&lt;li&gt;局部最优：深层模型的每个神经元都是非线性变换，代价函数是高度非凸函数，与浅层模型的目标函数不同。所以采用梯度下降的方法容易陷入局部最优。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;优化算法的改进&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;激活函数选择&lt;/li&gt;
&lt;li&gt;梯度剪切、正则&lt;/li&gt;
&lt;li&gt;Batch Normalization&lt;/li&gt;
&lt;li&gt;残差结构&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;43-线性回归实现&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#43-线性回归实现&#34;&gt;&lt;/a&gt; 4.3  线性回归实现&lt;/h3&gt;
&lt;h4 id=&#34;一元线性回归&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一元线性回归&#34;&gt;&lt;/a&gt; 一元线性回归&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220404111102699.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220404111102699.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220404111102699&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220404111132863.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220404111132863.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220404111132863&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220404111223055.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220404111223055.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220404111223055&#34; /&gt;&lt;/p&gt;
&lt;p&gt;本节主要实现基于pytorch的线性回归实现：torch.nn.Linear( )&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;__init__&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self, in_features: &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt;, out_features: &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt;, bias: &lt;span class=&#34;built_in&#34;&gt;bool&lt;/span&gt; = &lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;&lt;/span&gt;) -&amp;gt; &lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;built_in&#34;&gt;super&lt;/span&gt;(Linear, self).__init__()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	self.in_features = in_features&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	self.out_features = out_features&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	self.weight = Parameter(torch.Tensor(out_features, in_features))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; bias:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		self.bias = Parameter(torch.Tensor(out_features))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	self.register_parameter(&lt;span class=&#34;string&#34;&gt;&amp;#x27;bias&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	self.reset_parameters()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;reset_parameters&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;) -&amp;gt; &lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	init.kaiming_uniform_(self.weight, a=math.sqrt(&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; self.bias &lt;span class=&#34;keyword&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		fan_in, _ = init._calculate_fan_in_and_fan_out(self.weight)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		bound = &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; / math.sqrt(fan_in)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		init.uniform_(self.bias, -bound, bound)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;forward&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self, &lt;span class=&#34;built_in&#34;&gt;input&lt;/span&gt;: Tensor&lt;/span&gt;) -&amp;gt; Tensor:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; F.linear(&lt;span class=&#34;built_in&#34;&gt;input&lt;/span&gt;, self.weight, self.bias)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220404111512891.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220404111512891.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220404111512891&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220404111603174.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220404111603174.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220404111603174&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220404111629157.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220404111629157.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220404111629157&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220404111639109.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220404111639109.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220404111639109&#34; /&gt;&lt;/p&gt;
&lt;p&gt;迭代的次数为200次。模型训练最终Loss到0.27（200）&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220404111659851.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220404111659851.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220404111659851&#34; /&gt;&lt;/p&gt;
&lt;p&gt;model.eval()表示，只进行预测，不进行参数更新&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220404111735145.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220404111735145.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220404111735145&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220404111902334.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220404111902334.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220404111902334&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;多元线性回归&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#多元线性回归&#34;&gt;&lt;/a&gt; 多元线性回归&lt;/h4&gt;
&lt;p&gt;原始函数：$$𝑦=4𝑥&lt;sup&gt;3+3𝑥&lt;/sup&gt;2+2𝑥+1$$&lt;/p&gt;
&lt;p&gt;假设拟合函数：$$𝑦=𝑤_3 𝑥^3+𝑤_2 𝑥^2+𝑤_1 𝑥+𝑏$$&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220404114003109.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220404114003109.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220404114003109&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220404114313746.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220404114313746.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220404114313746&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220404114320946.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220404114320946.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220404114320946&#34; /&gt;&lt;/p&gt;
&lt;p&gt;迭代的终止条件los&amp;lt;1e-3。模型训练大约100batch。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220404114347966.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220404114347966.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220404114347966&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;44-逻辑回归实现&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#44-逻辑回归实现&#34;&gt;&lt;/a&gt; 4.4  逻辑回归实现&lt;/h3&gt;
&lt;p&gt;逻辑回归是一种广义的回归模型，其与线性回归有着很多相似之处，模型的形式基本相同，都是 y = xw + b。&lt;br /&gt;
&lt;strong&gt;逻辑回归的损失函数-Cross Entropy Loss&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220404114552517.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220404114552517.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220404114552517&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220404114617142.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220404114617142.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220404114617142&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220404114647082.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220404114647082.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220404114647082&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220404114700130.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220404114700130.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220404114700130&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;第5章-全连接神经网络&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第5章-全连接神经网络&#34;&gt;&lt;/a&gt; 第5章 全连接神经网络&lt;/h2&gt;
&lt;h3 id=&#34;理论和定理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#理论和定理&#34;&gt;&lt;/a&gt; 理论和定理&lt;/h3&gt;
&lt;p&gt;在机器学习中，有一些非常有名的理论或定理，对理解深度学习的内在特性非常有帮助．&lt;br /&gt;
PAC 学习理论：可能近似正确（ Probably Approximately Correct ， PAC ）学习理论&lt;br /&gt;
没有免费午餐定理：“具体问题具体分析”&lt;br /&gt;
奥卡姆剃刀原理:： “如无必要，勿增实体”&lt;br /&gt;
丑小鸭定理：特征筛选标准的重要性&lt;br /&gt;
归纳偏置（贝叶斯称为先验prior）:对问题的假设&lt;/p&gt;
&lt;h3 id=&#34;51-全连接神经网络fc&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#51-全连接神经网络fc&#34;&gt;&lt;/a&gt; 5.1 全连接神经网络（FC）&lt;/h3&gt;
&lt;p&gt;全连接神经网络的准则很简单：神经网络中除输入层之外的每个节点都和上一层的所有节点有连接。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220404193841852.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220404193841852.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220404193841852&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;52多分类问题&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#52多分类问题&#34;&gt;&lt;/a&gt; 5.2多分类问题&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220404193858760.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220404193858760.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220404193858760&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220404194556867.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220404194556867.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220404194556867&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;53-softmax与交叉熵&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#53-softmax与交叉熵&#34;&gt;&lt;/a&gt; 5.3 softmax与交叉熵&lt;/h3&gt;
&lt;p&gt;softmax函数，又称归一化指数函数。&lt;br /&gt;
它是二分类函数Sigmoid在多分类上的推广，目的是将多分类的结果以概率的形式展现出来。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220404194658395.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220404194658395.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220404194658395&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220404194712158.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220404194712158.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220404194712158&#34; /&gt;&lt;/p&gt;
&lt;p&gt;交叉熵是用来衡量两个概率分布的距离（也可以叫差别)。&lt;/p&gt;
&lt;p&gt;交叉熵数值越小说明两个概率分布越接近。&lt;br /&gt;
概率分布：即[0.1，0.5，0.2，0.1，0.1]，每个类别的概率都在0-1，且加起来为1。&lt;br /&gt;
若有两个概率分布p(x)和q(x)，它们的交叉熵为：&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220404194819323.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220404194819323.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220404194819323&#34; /&gt;&lt;/p&gt;
&lt;p&gt;假设有一个三分类的问题，某样本的真实分类标签是p=(1,0,0),&lt;br /&gt;
某个模型经过Softmax函数之后预测结果，若&lt;br /&gt;
q=(0.5,0.4, 0.1)，那么它们的交叉熵为&lt;br /&gt;
H(p,q) =-(1*log0.5+0*log0.4+0*log0.1)~0.3&lt;/p&gt;
&lt;p&gt;q=(0.8,0.1, 0.1)，那么它们的交叉熵为&lt;br /&gt;
H(p,q) =-(1*log0.8+0*log0.1+0*log0.1)~0.1&lt;/p&gt;
&lt;p&gt;由于后者更小，所以第二个模型参数性能更好&lt;/p&gt;
&lt;h3 id=&#34;54-计算机视觉工具包torchvision&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#54-计算机视觉工具包torchvision&#34;&gt;&lt;/a&gt; 5.4 计算机视觉工具包：torchvision&lt;/h3&gt;
&lt;p&gt;torchvision主要包含以下三部分：&lt;br /&gt;
&lt;strong&gt;models&lt;/strong&gt;：提供深度学习中各种经典网络结构及预训练好的模型，包括AlexNet、VGG系列、ResNet系列、Inception系列等。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220404195042091.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220404195042091.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220404195042091&#34; /&gt;&lt;/p&gt;
&lt;p&gt;**datasets：**提供常用的数据集下载，设计上都是继承torch.utils.data.Dataset，主要包括MNIST、CIFAR10/100、ImageNet、COCO等。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220404195205464.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220404195205464.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220404195205464&#34; /&gt;&lt;/p&gt;
&lt;p&gt;**transform：**提供常用的数据预处理操作，主要包括对Tensor及PIL Image对象的操作。&lt;br /&gt;
transforms中涵盖了大部分对Tensor和PIL Image的常用处理。&lt;/p&gt;
&lt;p&gt;对PIL Image的操作包括：&lt;br /&gt;
（1）Scale：调整图片尺寸，长宽比保持不变。&lt;br /&gt;
（2）CenterCrop、RandomCrop、RandomResizedCrop： 裁剪图片。&lt;br /&gt;
（3）Pad：填充。&lt;br /&gt;
（4）ToTensor：将PIL Image对象转成Tensor，会自动将[0, 255]归一化至[0, 1]。&lt;/p&gt;
&lt;p&gt;对Tensor的操作包括：&lt;br /&gt;
（1）Normalize：标准化（减均值，除以标准差）。&lt;br /&gt;
（2）ToPILImage：将Tensor转为PIL Image对象。&lt;/p&gt;
&lt;p&gt;torchvision还提供了两个常用的函数。&lt;br /&gt;
make_gri()，它能将多张图片拼接成一个网格中。&lt;br /&gt;
save_img()，它能将Tensor保存成图片。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220404195456263.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220404195456263.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220404195456263&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;55-用全连接神经网络实现多分类&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#55-用全连接神经网络实现多分类&#34;&gt;&lt;/a&gt; 5.5 用全连接神经网络实现多分类&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;简易神经网络搭建&lt;/strong&gt;&lt;br /&gt;
我们从最简单的网络建起，&lt;br /&gt;
然后建立一个加入激励函数的网络，&lt;br /&gt;
最后建立一个加入批标准化函数的网络。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220404195818463.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220404195818463.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220404195818463&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220404195834465.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220404195834465.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220404195834465&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220404195841479.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220404195841479.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220404195841479&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;批标准化函数&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;BN的作用：&lt;br /&gt;
（1）加快训练速度，减少了对学习率的要求，可以使用很大的学习率或者较小的学习率，算法也能够快速训练。&lt;br /&gt;
（2）增加模型的稳定性，有效减少梯度消失/爆炸，提高训练精度。&lt;br /&gt;
（3）BN具有轻微的正则化效果，在某些情况下可以取消 dropout 和 L2 正则项参数,或者采取更小的 L2 正则项约束参数。&lt;br /&gt;
（4）减少了人为选择参数的过程（权重的初始化方式，正则化方式的超参数的选择，学习率等）。&lt;/p&gt;
&lt;p&gt;BN的缺陷：&lt;br /&gt;
（1）无法使用小batch进行训练，小batch的均值和方差可能与整体训练样本偏差很大。&lt;br /&gt;
（2）无法在RNN等网络中使用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;全连接识别MNIST手写数字&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;MNIST数据集是一个非常出名的数据集，基本上很多网络都将其作为一个测试的标准，其来自美国国家标准与技术研究所，National Institute of Standards and Technology (NIST)。训练集（training set） 由来自250个不同人手写的数字构成，其中50% 是高中学生，50% 来自人口普查局 （the Census Bureau）的工作人员，一共有 60000 张图片。 测试集（testing set）也是同样比例的手写数字数据，一共有10000张图片。图5.11就是数据集中的一些数字图片。&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220404200526211.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220404200526211.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220404200526211&#34; /&gt;&lt;/p&gt;
&lt;p&gt;第一步：导入要用的包、定义超参数，比如训练中每批多少图片（batch_size），学习率（learning_rate），迭代次数num epoches。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220404201041749.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220404201041749.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220404201041749&#34; /&gt;&lt;/p&gt;
&lt;p&gt;第二步：下载MNIST数据集，同时对数据进行标准化预处理。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220404201122823.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220404201122823.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220404201122823&#34; /&gt;&lt;/p&gt;
&lt;p&gt;第三步：定义带有激活函数和批标准化的网络。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220404201128112.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220404201128112.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220404201128112&#34; /&gt;&lt;/p&gt;
&lt;p&gt;第四步：导入网络、定义损失函数和优化方法。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220404201137337.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220404201137337.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220404201137337&#34; /&gt;&lt;/p&gt;
&lt;p&gt;第五步：训练网络模型，&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220404201143166.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220404201143166.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220404201143166&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220404201200527.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220404201200527.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220404201200527&#34; /&gt;&lt;/p&gt;
&lt;p&gt;第六步：测试网络&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220404201210092.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220404201210092.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220404201210092&#34; /&gt;&lt;/p&gt;
&lt;p&gt;训练误差和泛化误差：模型应关注降低泛化误差&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;模型在训练数据集上表现出的误差叫做训练误差&lt;/li&gt;
&lt;li&gt;在任意一个测试数据样本上表现出的误差的期望值叫做泛化误差&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;欠拟合：模型⽆法得到较低的训练误差。&lt;/li&gt;
&lt;li&gt;过拟合：模型的训练误差远小于它在测试数据集上的误差。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220404202232978.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220404202232978.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220404202232978&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220404202248190.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220404202248190.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220404202248190&#34; /&gt;&lt;/p&gt;
&lt;p&gt;防止过拟合的方法:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;更多数据more data&lt;/li&gt;
&lt;li&gt;数据扩充 data argumentation&lt;/li&gt;
&lt;li&gt;降低模型复杂度：正则化regularization，浅层shallow&lt;/li&gt;
&lt;li&gt;Dropout&lt;/li&gt;
&lt;li&gt;早停技术early stopping&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Dropout&lt;/strong&gt;&lt;br /&gt;
如何使用Dropout？在训练DNN网络的过程中，对于每一个神经元，以p的概率被随机的drop out，也就是将其值置零。这样，在该轮前传和反传的过程中，该神经元将失去作用，相当于不存在，如下图所示。&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220404202453198.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220404202453198.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220404202453198&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220404202505450.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220404202505450.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220404202505450&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;early stop&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220404202557446.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220404202557446.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220404202557446&#34; /&gt;&lt;/p&gt;
&lt;p&gt;原理&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将数据分为训练集和验证集&lt;/li&gt;
&lt;li&gt;每个epoch结束后（或每N个epoch后)： 在验证集上获取测试结果，随着epoch的增加，如果在验证集上发现测试误差上升，则停止训练；&lt;/li&gt;
&lt;li&gt;将停止之后的权重作为网络的最终参数。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;第6章-卷积神经网络&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第6章-卷积神经网络&#34;&gt;&lt;/a&gt; 第6章 卷积神经网络&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220404205153425.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220404205153425.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220404205153425&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;61深度前馈网络&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#61深度前馈网络&#34;&gt;&lt;/a&gt; 6.1深度前馈网络&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220404205239026.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220404205239026.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220404205239026&#34; /&gt;&lt;/p&gt;
&lt;p&gt;在前馈神经网络中，各神经元分别属于不同的层。每一层的神经元可以接受到前一层的神经元信号，并产生信号输出到下一层。&lt;/p&gt;
&lt;p&gt;对于具有线性输出层和至少一个使用“挤压”性质的激活函数的隐藏层组成的前馈神经网络，只要其隐藏层神经元的数量足够，它可以以任意精度来近似任何从一个定义在实数空间中的有界闭集函数。&lt;/p&gt;
&lt;h3 id=&#34;62-全连接网络和卷积神经网络&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#62-全连接网络和卷积神经网络&#34;&gt;&lt;/a&gt; 6.2 全连接网络和卷积神经网络&lt;/h3&gt;
&lt;p&gt;整个网络中无反馈，信号从输入层向输出层单向传播，可用一个有向无环图表示。&lt;/p&gt;
&lt;p&gt;[3,4,4,1]&lt;br /&gt;
参数量=3x4+4x4+4x1=32&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220404205737989.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220404205737989.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220404205737989&#34; /&gt;&lt;/p&gt;
&lt;p&gt;用全连接前馈网络来处理图像时，会存在两个问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;权重矩阵的参数非常多&lt;/li&gt;
&lt;li&gt;局部不变性特征不易提取&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;63卷积神经网络原理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#63卷积神经网络原理&#34;&gt;&lt;/a&gt; 6.3卷积神经网络原理&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;卷积神经网络（ Convolutional Neural Network ， CNN 或 ConvNet ）&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;卷积神经网络最早主要用来处理图像信息．&lt;/li&gt;
&lt;li&gt;包含卷积计算且具有深度结构的前馈神经网络&lt;/li&gt;
&lt;li&gt;具有特征学习能力，能够按其阶层结构对输入信息进行平移不变分类。&lt;/li&gt;
&lt;li&gt;一种具有&lt;strong&gt;局部连接、权重共享&lt;/strong&gt;等特性的深层前馈神经网络．&lt;br /&gt;
CNN主要应用：计算机视觉，图像和视频分析的各种任务上。近年来，卷积神经网络也应用到自然语言处理和推荐系统等领域。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;生物学上感受野 Receptive Field&lt;/strong&gt;&lt;br /&gt;
在神经网络中，感受野的定义是：&lt;br /&gt;
卷积神经网络的每一层输出的特征图（Feature map）上的像素点在原图像上映射的区域大小。&lt;/p&gt;
&lt;p&gt;卷积神经网络的三个思想根源如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;局部性&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220405105331848.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220405105331848.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220405105331848&#34; /&gt;&lt;/li&gt;
&lt;li&gt;相同性 &lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220405105342750.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220405105342750.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220405105342750&#34; /&gt;&lt;/li&gt;
&lt;li&gt;不变性&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220405105353372.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220405105353372.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220405105353372&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220405105411483.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220405105411483.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220405105411483&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一维卷积&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220405110442299.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220405110442299.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220405110442299&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;二维卷积&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220405110512919.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220405110512919.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220405110512919&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220405110540328.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220405110540328.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220405110540328&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220405110835904.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220405110835904.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220405110835904&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;互相关运算&lt;/strong&gt;&lt;br /&gt;
虽然卷积层得名于卷积（convolution）运算，但我们通常在卷积层中使用更加直观的互相关（cross-correlation）运算。在二维卷积层中，一个二维输⼊数组和⼀个二维核（kernel）数组通过互相关运算输出⼀个二维数组。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220405111008943.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220405111008943.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220405111008943&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220405111110855.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220405111110855.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220405111110855&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220405111204796.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220405111204796.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220405111204796&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;卷积种类&lt;/strong&gt;&lt;br /&gt;
在卷积的标准定义基础上，还可以引入卷积核的&lt;strong&gt;滑动步长S和零填充P&lt;/strong&gt;来增加卷积的多样性，可以更灵活地进行特征抽取。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220405111258416.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220405111258416.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220405111258416&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220405111331494.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220405111331494.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220405111331494&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;小结&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220405111425744.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220405111425744.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220405111425744&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;64-典型的卷积神经网络&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#64-典型的卷积神经网络&#34;&gt;&lt;/a&gt; 6.4 典型的卷积神经网络&lt;/h3&gt;
&lt;p&gt;卷积神经网络一般由&lt;strong&gt;卷积层、汇聚层和全连接层&lt;/strong&gt;构成。&lt;br /&gt;
用卷积来代替全连接&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220405112138900.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220405112138900.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220405112138900&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;卷积层&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;卷积层的每个神经元只与输入数据的一个局部区域连接，因此过滤器（卷积核）提取到的是图像的局部特征。&lt;/li&gt;
&lt;li&gt;卷积层的作用是提取局部区域的特征，不同的卷积核相当于不同的特征提取器．&lt;/li&gt;
&lt;li&gt;通常将神经元组织为三维结构的神经层，其大小为高度 M× 宽度 N× 深度 D ，由 D 个 M × N 大小的特征映射构成.&lt;/li&gt;
&lt;li&gt;特征映射（ Feature Map ）为一幅图像（一组特征映射）在经过卷积提取到的特征,每个特征映射可以作为一类抽取的图像特征．&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220405112344984.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220405112344984.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220405112344984&#34; /&gt;&lt;br /&gt;
如果是灰度图像，就是有一个特征映射，输入层的深度 D = 1 ；&lt;br /&gt;
如果是彩色图像，分别有 RGB 三个颜色通道的特征映D=3.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220405112510903.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220405112510903.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220405112510903&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;感受野计算&lt;/strong&gt;&lt;br /&gt;
&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220405112603153.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220405112603153.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220405112603153&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220405112614518.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220405112614518.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220405112614518&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220405113100510.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220405113100510.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220405113100510&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;卷积层实现&lt;/strong&gt;&lt;br /&gt;
在卷积层中要设定的参数：&lt;br /&gt;
1.滤波器（卷积核）的长，宽，深度&lt;br /&gt;
2.步长&lt;br /&gt;
3.边界填充&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;torch.nn.Conv2d()函数&lt;/strong&gt;&lt;br /&gt;
&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220405113201652.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220405113201652.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220405113201652&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220405113347988.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220405113347988.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220405113347988&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;池化层&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;最大池化（max-pooling）&lt;/li&gt;
&lt;li&gt;平均池化（mean-pooling）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220405113503684.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220405113503684.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220405113503684&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220405113543768.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220405113543768.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220405113543768&#34; /&gt;&lt;/p&gt;
&lt;p&gt;池化层的作用有：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;特征降维，避免过拟合&lt;/li&gt;
&lt;li&gt;空间不变性&lt;/li&gt;
&lt;li&gt;减少参数，降低训练难度。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;第二部分-经典的卷积神经网络&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第二部分-经典的卷积神经网络&#34;&gt;&lt;/a&gt; 第二部分  经典的卷积神经网络&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220405114153967.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220405114153967.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220405114153967&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220405114209637.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220405114209637.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220405114209637&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220405114221325.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220405114221325.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220405114221325&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220405114245941.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220405114245941.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220405114245941&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220405114310902.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220405114310902.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220405114310902&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220405114325056.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220405114325056.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220405114325056&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;65-经典cnn-lenet5&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#65-经典cnn-lenet5&#34;&gt;&lt;/a&gt; 6.5 经典CNN-LeNet5&lt;/h3&gt;
&lt;p&gt;LeNet神经网络由深度学习三巨头之一的Yan LeCun在1998年提出，他同时也是卷积神经网络 (CNN，Convolutional Neural Networks)之父。LeNet的实现确立了CNN的结构，自那时起，CNN的最基本的架构就定下来了：卷积层、池化层、全连接层。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220405114403469.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220405114403469.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220405114403469&#34; /&gt;&lt;br /&gt;
LenNet-5共有7层（不包括输入层），每层都包含不同数量的训练参数。&lt;br /&gt;
主要有2个卷积层、2个下抽样层（池化层）、3个全连接层3种连接方式。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220405114514425.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220405114514425.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220405114514425&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220405114531231.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220405114531231.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220405114531231&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;66-经典cnn-vggnet&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#66-经典cnn-vggnet&#34;&gt;&lt;/a&gt; 6.6 经典CNN- VGGNet&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220405114607371.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220405114607371.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220405114607371&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220405114634206.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220405114634206.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220405114634206&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220405114646310.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220405114646310.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220405114646310&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;VGGNet特点&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;小卷积核。卷积核全部替换为3x3（极少用了1x1）；&lt;/li&gt;
&lt;li&gt;小池化核。相比AlexNet的3x3的池化核，VGG全部为2x2的池化核；&lt;/li&gt;
&lt;li&gt;层数更深特征图更宽。基于前两点外，由于卷积核专注于扩大通道数、池化专注于缩小宽和高，使得模型架构上更深更宽的同时，计算量的增加放缓；&lt;/li&gt;
&lt;li&gt;全连接转卷积。网络测试阶段将训练阶段的三个全连接替换为三个卷积，测试重用训练时的参数，使得测试得到的全卷积网络因为没有全连接的限制，因而可以接收任意宽或高度的输入&lt;/li&gt;
&lt;li&gt;VGG耗费更多计算资源&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220405115020964.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220405115020964.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220405115020964&#34; /&gt;&lt;/p&gt;
&lt;p&gt;实验表明 当层数达到一定数量比如20层左右以上，性能反而下降，小于这个层数会呈增长趋势&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220405115045479.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220405115045479.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220405115045479&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;67-经典cnn-resnet&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#67-经典cnn-resnet&#34;&gt;&lt;/a&gt; 6.7 经典CNN-ResNet&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220405115059897.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220405115059897.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220405115059897&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220405115113194.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220405115113194.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220405115113194&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220405115123374.png&#34; class=&#34;lazyload placeholder&#34; data-srcset=&#34;PyTorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5/image-20220405115123374.png&#34; srcset=&#34;https://img2.baidu.com/it/u=2037979560,2772131037&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&#34; alt=&#34;image-20220405115123374&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;小结&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#小结&#34;&gt;&lt;/a&gt; 小结&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;卷积的原理：卷积运算和互相关运算&lt;/li&gt;
&lt;li&gt;典型卷积神经网络：卷积层，池化层，全连接层&lt;/li&gt;
&lt;li&gt;经典卷积神经网络：LeNet,VGG,ResNet&lt;/li&gt;
&lt;li&gt;常用数据集：MNIST  CIFAR10/100 ImageNet&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;第7章-循环神经网络&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第7章-循环神经网络&#34;&gt;&lt;/a&gt; 第7章 循环神经网络&lt;/h2&gt;
&lt;h2 id=&#34;第8章-生成式对抗网络&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第8章-生成式对抗网络&#34;&gt;&lt;/a&gt; 第8章 生成式对抗网络&lt;/h2&gt;
</content>
        <category term="深度学习" />
        <updated>2022-04-01T03:40:59.000Z</updated>
    </entry>
</feed>
