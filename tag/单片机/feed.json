{
    "version": "https://jsonfeed.org/version/1",
    "title": "千里稻花应秀色 • All posts by \"单片机\" tag",
    "description": "blogs by SSR",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2021/07/28/%E9%B8%BF%E8%92%99%E5%BC%80%E5%8F%91/(1)Hi3861%E5%BC%80%E5%8F%91%E6%9D%BF%E4%BB%8B%E7%BB%8D/",
            "url": "http://example.com/2021/07/28/%E9%B8%BF%E8%92%99%E5%BC%80%E5%8F%91/(1)Hi3861%E5%BC%80%E5%8F%91%E6%9D%BF%E4%BB%8B%E7%BB%8D/",
            "title": "(1)Hi3861开发板介绍",
            "date_published": "2021-07-28T00:37:44.000Z",
            "content_html": "<h1 id=\"hi3861开发板介绍\"><a class=\"markdownIt-Anchor\" href=\"#hi3861开发板介绍\">#</a> Hi3861 开发板介绍</h1>\n<p>更新时间: 2021-07-21 09:12</p>\n<h2 id=\"简介\"><a class=\"markdownIt-Anchor\" href=\"#简介\">#</a> 简介</h2>\n<p>Hi3861 WLAN 模组是一片大约 2cm*5cm 大小的开发板，是一款高度集成的 2.4GHz WLAN SoC 芯片，集成 IEEE 802.11b/g/n 基带和 RF（Radio Frequency）电路。支持 HarmonyOS，并配套提供开放、易用的开发和调试运行环境。</p>\n<p><strong>图 1</strong> Hi3861 WLAN 模组外观图</p>\n<p><img \"\" class=\"lazyload placeholder\" data-original=\"(1)Hi3861%E5%BC%80%E5%8F%91%E6%9D%BF%E4%BB%8B%E7%BB%8D/0000000000011111111.20210720210835.65790374497367151790022312337433505207200112592800C0CA3FF463F35CAB7D86B2DE0C2F4173E797E1B4FB16EA6096074D46DDF0FFA3.png\" src=\"https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif\" alt=\"点击放大\"></p>\n<p>另外，Hi3861 WLAN 模组还可以通过与 Hi3861 底板连接，扩充自身的外设能力，底板如下图所示。</p>\n<p><strong>图 2</strong> Hi3861 底板外观图</p>\n<p><img \"\" class=\"lazyload placeholder\" data-original=\"https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20210720210835.93870309435698895266524018593532:50520720011259:2800:54E179425F0DF0FD559E460B8A9DCCD1D0A9B9AED898F7E84F35EBE440E393AE.png?needInitFileName=true?needInitFileName=true\" src=\"https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif\" alt=\"img\"></p>\n<ul>\n<li>\n<p>RF 电路包括功率放大器 PA（Power Amplifier）、低噪声放大器 LNA（Low Noise Amplifier）、RF Balun、天线开关以及电源管理等模块；支持 20MHz 标准带宽和 5MHz/10MHz 窄带宽，提供最大 72.2Mbit/s 物理层速率。</p>\n</li>\n<li>\n<p>Hi3861 WLAN 基带支持正交频分复用（OFDM）技术，并向下兼容直接序列扩频（DSSS）和补码键控（CCK）技术，支持 IEEE 802.11 b/g/n 协议的各种数据速率。</p>\n</li>\n<li>\n<p>Hi3861 芯片集成高性能 32bit 微处理器、硬件安全引擎以及丰富的外设接口，外设接口包括 SPI（Synchronous Peripheral Interface）、UART（Universal Asynchronous Receiver &amp; Transmitter）、I2C（The Inter Integrated Circuit）、PWM（Pulse Width Modulation）、GPIO（General Purpose Input/Output）和多路 ADC（Analog to Digital Converter），同时支持高速 SDIO2.0（Secure Digital Input/Output）接口，最高时钟可达 50MHz；芯片内置 SRAM（Static Random Access Memory）和 Flash，可独立运行，并支持在 Flash 上运行程序。</p>\n</li>\n<li>\n<p>Hi3861 芯片适用于智能家电等物联网智能终端领域。</p>\n<p><strong>图 3</strong> Hi3861 功能框图</p>\n<p><img \"\" class=\"lazyload placeholder\" data-original=\"https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20210720210835.93395099655744724731010133328842:50520720011259:2800:2F9519DC070F9FEAFCFD032F27E2357DA32A9D97F894750BBF98655C47CB6446.png?needInitFileName=true?needInitFileName=true\" src=\"https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif\" alt=\"点击放大\"></p>\n</li>\n</ul>\n<h2 id=\"资源和约束\"><a class=\"markdownIt-Anchor\" href=\"#资源和约束\">#</a> 资源和约束</h2>\n<p>Hi3861 WLAN 模组资源十分有限，整板共 2MB FLASH，352KB RAM。在编写业务代码时，需注意资源使用效率。</p>\n<h2 id=\"开发板规格\"><a class=\"markdownIt-Anchor\" href=\"#开发板规格\">#</a> 开发板规格</h2>\n<table>\n<thead>\n<tr>\n<th>规格类型</th>\n<th>规格清单</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>通用规格</td>\n<td>1×1 2.4GHz 频段（ch1～ch14）PHY 支持 IEEE 802.11b/g/nMAC 支持 IEEE802.11 d/e/h/i/k/v/w 内置 PA 和 LNA，集成 TX/RX Switch、Balun 等支持 STA 和 AP 形态，作为 AP 时最大支持 6 个 STA 接入支持 WFA WPA/WPA2 personal、WPS2.0 支持与 BT/BLE 芯片共存的 2/3/4 线 PTA 方案电源电压输入范围：2.3V～3.6VIO 电源电压支持 1.8V 和 3.3V 支持 RF 自校准方案低功耗：Ultra Deep Sleep 模式：5μA@3.3VDTIM1：1.5mA@3.3VDTIM3：0.8mA@3.3V</td>\n</tr>\n<tr>\n<td>PHY 特性</td>\n<td>支持 IEEE802.11b/g/n 单天线所有的数据速率支持最大速率：72.2Mbps@HT20 MCS7 支持标准 20MHz 带宽和 5M/10M 窄带宽支持 STBC 支持 Short-GI</td>\n</tr>\n<tr>\n<td>MAC 特性</td>\n<td>支持 A-MPDU，A-MSDU 支持 Blk-ACK 支持 QoS，满足不同业务服务质量需求</td>\n</tr>\n<tr>\n<td>CPU 子系统</td>\n<td>高性能 32bit 微处理器，最大工作频率 160MHz 内嵌 SRAM 352KB、ROM 288KB 内嵌 2MB Flash</td>\n</tr>\n<tr>\n<td>外围接口</td>\n<td>1 个 SDIO 接口、2 个 SPI 接口、2 个 I2C 接口、3 个 UART 接口、15 个 GPIO 接口、7 路 ADC 输入、6 路 PWM、1 个 I2S 接口（注：上述接口通过复用实现）外部主晶体频率 40M 或 24M</td>\n</tr>\n<tr>\n<td>其他信息</td>\n<td>封装：QFN-32，5mm×5mm 工作温度：-40℃ ～ +85℃</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"harmonyos关键特性\"><a class=\"markdownIt-Anchor\" href=\"#harmonyos关键特性\">#</a> HarmonyOS 关键特性</h2>\n<p>HarmonyOS 基于 Hi3861 平台提供了多种开放能力，提供的关键组件如下表所示。</p>\n<table>\n<thead>\n<tr>\n<th>组件名</th>\n<th>能力介绍</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>WLAN 服务</td>\n<td>提供 WLAN 服务能力。包括：station 和 hotspot 模式的连接、断开、状态查询等。</td>\n</tr>\n<tr>\n<td>模组外设控制</td>\n<td>提供操作外设的能力。包括：I2C、I2S、ADC、UART、SPI、SDIO、GPIO、PWM、FLASH 等。</td>\n</tr>\n<tr>\n<td>分布式软总线</td>\n<td>在 HarmonyOS 分布式网络中，提供设备被发现、数据传输的能力。</td>\n</tr>\n<tr>\n<td>设备安全绑定</td>\n<td>提供在设备互联场景中，数据在设备之间的安全流转的能力。</td>\n</tr>\n<tr>\n<td>基础加解密</td>\n<td>提供密钥管理、加解密等能力。</td>\n</tr>\n<tr>\n<td>系统服务管理</td>\n<td>系统服务管理基于面向服务的架构，提供了 HarmonyOS 统一化的系统服务开发框架。</td>\n</tr>\n<tr>\n<td>启动引导</td>\n<td>提供系统服务的启动入口标识。在系统服务管理启动时，调用 boostrap 标识的入口函数，并启动系统服务。</td>\n</tr>\n<tr>\n<td>系统属性</td>\n<td>提供获取与设置系统属性的能力。</td>\n</tr>\n<tr>\n<td>基础库</td>\n<td>提供公共基础库能力。包括：文件操作、KV 存储管理等。</td>\n</tr>\n<tr>\n<td>DFX</td>\n<td>提供 DFX 能力。包括：流水日志、时间打点等。</td>\n</tr>\n<tr>\n<td>XTS</td>\n<td>提供 HarmonyOS 生态认证测试套件的集合能力。</td>\n</tr>\n</tbody>\n</table>\n",
            "tags": [
                "鸿蒙",
                "单片机"
            ]
        },
        {
            "id": "http://example.com/2021/07/28/%E9%B8%BF%E8%92%99%E5%BC%80%E5%8F%91/(2)Windows%E9%B8%BF%E8%92%99%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87/",
            "url": "http://example.com/2021/07/28/%E9%B8%BF%E8%92%99%E5%BC%80%E5%8F%91/(2)Windows%E9%B8%BF%E8%92%99%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87/",
            "title": "(2)Windows开发环境准备",
            "date_published": "2021-07-28T00:37:44.000Z",
            "content_html": "<h1 id=\"windows开发环境准备\"><a class=\"markdownIt-Anchor\" href=\"#windows开发环境准备\">#</a> Windows 开发环境准备</h1>\n<p>更新时间: 2021-07-21 09:12</p>\n<p>系统要求：Windows 10 64 位系统。</p>\n<p>DevEco Device Tool 以插件方式提供，基于 Visual Studio Code 进行扩展，安装分为如下几步：</p>\n<ol>\n<li>安装 Visual Studio Code</li>\n<li>安装 Python</li>\n<li>安装 Node.js</li>\n<li>安装 hpm</li>\n<li>安装 DevEco Device Tool 插件</li>\n</ol>\n<h2 id=\"获取软件\"><a class=\"markdownIt-Anchor\" href=\"#获取软件\">#</a> 获取软件</h2>\n<table>\n<thead>\n<tr>\n<th>工具名称</th>\n<th>用途说明</th>\n<th>版本要求</th>\n<th>获取渠道</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Visual Studio Code</td>\n<td>代码编辑工具</td>\n<td>V1.53 及以上 64 位版本。</td>\n<td><a href=\"https://code.visualstudio.com/Download\">https://code.visualstudio.com/Download</a></td>\n</tr>\n<tr>\n<td>Python</td>\n<td>编译构建工具</td>\n<td>V3.7.4~V3.8.x 64 位版本</td>\n<td>推荐下载：<a href=\"https://www.python.org/downloads/release/python-388/\">https://www.python.org/downloads/release/python-388/</a></td>\n</tr>\n<tr>\n<td>Node.js</td>\n<td>提供 npm 环境</td>\n<td>v12.0.0 及以上 64 位版本</td>\n<td><a href=\"https://nodejs.org/zh-cn/download/\">https://nodejs.org/zh-cn/download/</a></td>\n</tr>\n<tr>\n<td>hpm</td>\n<td>包管理工具</td>\n<td>最新版</td>\n<td>请参考<a href=\"https://device.harmonyos.com/cn/docs/start/introduce/quickstart-lite-env-setup-win-0000001105567362#section173054793610\">安装 hpm</a>。</td>\n</tr>\n<tr>\n<td>DevEco Device Tool</td>\n<td>HarmonyOS 源码的编译、烧录、调试插件工具</td>\n<td>v2.2 Beta1</td>\n<td><a href=\"https://device.harmonyos.com/cn/ide#download%E4%B8%8B%E8%BD%BD%E5%89%8D%EF%BC%8C%E8%AF%B7%E4%BD%BF%E7%94%A8%E5%8D%8E%E4%B8%BA%E5%BC%80%E5%8F%91%E8%80%85%E5%B8%90%E5%8F%B7%E7%99%BB%E5%BD%95%EF%BC%8C%E5%A6%82%E6%9C%AA%E6%B3%A8%E5%86%8C%EF%BC%8C%E8%AF%B7%E5%85%88\">https://device.harmonyos.com/cn/ide#download 下载前，请使用华为开发者帐号登录，如未注册，请先</a><a href=\"https://developer.huawei.com/consumer/cn/doc/start/registration-and-verification-0000001053628148\">注册华为开发者帐号</a>。</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"安装visual-studio-code\"><a class=\"markdownIt-Anchor\" href=\"#安装visual-studio-code\">#</a> 安装 Visual Studio Code</h2>\n<p>说明</p>\n<p>如果已安装 Visual Studio Code，打开命令行工具，输入<strong> code --version</strong> 命令，检查版本号是否为 1.53 及以上版本；可以正常返回版本号，说明环境变量设置也正确。</p>\n<ol>\n<li>\n<p>双击 Visual Studio Code 软件包进行安装。安装过程中，请勾选 “添加到 PATH（重启后生效）”。</p>\n<p><img \"\" class=\"lazyload placeholder\" data-original=\"https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20210720210835.18512664503469265160641472664229:50520720011259:2800:AF78793A3F46D46F6A5BEC000068B99202B3D69C7C91898D7E88D4CE10C590D1.png?needInitFileName=true?needInitFileName=true\" src=\"https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif\" alt=\"点击放大\"></p>\n</li>\n<li>\n<p>安装完成后，重启计算机，使 Visual Studio Code 的环境变量生效。</p>\n</li>\n<li>\n<p>打开命令行工具，输入<strong> code --version</strong> 命令，可以正常显示版本号说明安装成功。</p>\n</li>\n</ol>\n<h2 id=\"安装python\"><a class=\"markdownIt-Anchor\" href=\"#安装python\">#</a> 安装 Python</h2>\n<ol>\n<li>\n<p>双击 Python 安装包进行安装，勾选 “<strong>Add Python 3.8 to PATH</strong>”，然后点击<strong> Install Now</strong> 开始安装。</p>\n<p><img \"\" class=\"lazyload placeholder\" data-original=\"https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20210720210835.68236634967698989280426882876057:50520720011259:2800:555A136AC6427598978B4FEC4D474179D6021148162C91E295A883DC39DFE8B7.png?needInitFileName=true?needInitFileName=true\" src=\"https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif\" alt=\"img\"></p>\n</li>\n<li>\n<p>等待安装完成后，点击<strong> Close</strong>。</p>\n<p><img \"\" class=\"lazyload placeholder\" data-original=\"https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20210720210835.40443588200814218790208181727229:50520720011259:2800:B59C18547B6D75F29CC3CA9CCCA7C5E8B625040FA33ED644D381443643B20BC8.png?needInitFileName=true?needInitFileName=true\" src=\"https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif\" alt=\"img\"></p>\n</li>\n<li>\n<p>打开命令行工具，输入 python --version，检查安装结果。</p>\n<p><img \"\" class=\"lazyload placeholder\" data-original=\"https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20210720210835.55187266828086165550009510386782:50520720011259:2800:2682BCA6236A7FDBDB501A78A710951BDC76177B025D4708F1ECB162419BE123.png?needInitFileName=true?needInitFileName=true\" src=\"https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif\" alt=\"img\"></p>\n</li>\n<li>\n<p>在命令行工具中，分别执行如下命令设置 pip 源，用于后续安装 DevEco Device Tool 过程中下载依赖的组件包。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip config set global.trusted-host repo.huaweicloud.compip config set global.index-url https://repo.huaweicloud.com/repository/pypi/simplepip config set global.timeout 120</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"安装nodejs\"><a class=\"markdownIt-Anchor\" href=\"#安装nodejs\">#</a> 安装 Node.js</h2>\n<p>说明</p>\n<p>如果已安装 Node.js，打开命令行工具，输入<strong> node -v</strong> 命令，检查版本号是否为 12.0.0 及以上版本。</p>\n<ol>\n<li>\n<p>点击下载后的软件包进行安装，全部按照默认设置点击<strong> Next</strong>，直至<strong> Finish</strong>。安装过程中，Node.js 会自动在系统的 path 环境变量中配置 node.exe 的目录路径。</p>\n</li>\n<li>\n<p>重新打开命令行工具，输入 “node -v” 命令，能正常查询 Node.js 的版本号，说明 Node.js 安装成功。</p>\n<p><img \"\" class=\"lazyload placeholder\" data-original=\"https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20210720210836.62539158827713818108212284791780:50520720011259:2800:5ABC4B73BD2D770166BB7675F013AEEC0670D6092D7A205CC87C862CEA0BAB7F.png?needInitFileName=true?needInitFileName=true\" src=\"https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif\" alt=\"img\"></p>\n</li>\n</ol>\n<h2 id=\"安装hpm\"><a class=\"markdownIt-Anchor\" href=\"#安装hpm\">#</a> 安装 hpm</h2>\n<p>该方式需先确保<strong> Node.js</strong> 安装成功。</p>\n<p>在安装 hpm 前，请检查网络连接状态，如果网络不能直接访问 Internet，则需要通过代理服务器才可以访问。这种情况下，需要先<a href=\"https://device.harmonyos.com/cn/docs/ide/user-guides/npm_proxy-0000001054491032\">设置 npm 代理</a>，才能安装 hpm。</p>\n<p>说明</p>\n<p>如果已安装 hpm，可以执行<strong> npm update -g @ohos/hpm-cli</strong> 命令升级 hpm 至最新版本。</p>\n<ol>\n<li>\n<p>建议将 npm 源配置为国内镜像，例如设置为华为云镜像源。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config set registry https://repo.huaweicloud.com/repository/npm/</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>打开命令行工具，执行如下命令安装最新版本 hpm。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g @ohos/hpm-cli</span><br></pre></td></tr></table></figure>\n<p><img \"\" class=\"lazyload placeholder\" data-original=\"https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20210720210836.90553156380138182569465396373876:50520720011259:2800:BA75EB2D31FF2C2F3331645652878BEB0F9B6CB577049C4AAC0C047FD664A334.png?needInitFileName=true?needInitFileName=true\" src=\"https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif\" alt=\"img\"></p>\n</li>\n<li>\n<p>安装完成后，执行如下命令（V 为大写字母）检查 hpm 安装结果。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hpm -V</span><br></pre></td></tr></table></figure>\n<p><img \"\" class=\"lazyload placeholder\" data-original=\"https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20210720210836.10048763675015873863276075913893:50520720011259:2800:7A7CA700AAC1FBF8778EBD971C4C3A7044D6542DACA7C129ECC2BB7F8CDED52C.png?needInitFileName=true?needInitFileName=true\" src=\"https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif\" alt=\"img\"></p>\n</li>\n</ol>\n<h2 id=\"安装deveco-device-tool插件\"><a class=\"markdownIt-Anchor\" href=\"#安装deveco-device-tool插件\">#</a> 安装 DevEco Device Tool 插件</h2>\n<p>安装 DevEco Device Tool 插件，<strong>主机的用户名不能包含中文字符</strong>，否则可能导致运行出现错误。</p>\n<p>DevEco Device Tool 正常运行需要依赖于 C/C<ins> 和 CodeLLDB 插件，在安装完 DevEco Device Tool 后，会自动从 Visual Studio Code 的插件市场安装 C/C</ins> 和 CodeLLDB 插件。因此，在安装 DevEco Device Tool 前，请检查 Visual Studio Code 的网络连接状态，如果网络不能直接访问 Internet，则需要通过代理服务器才可以访问，请先<a href=\"https://device.harmonyos.com/cn/docs/ide/user-guides/vscode_proxy-0000001074231144\"> Visual Studio Code 代理设置</a>。</p>\n<p>说明</p>\n<p>安装 DevEco Device Tool 时，请先关闭 Visual Studio Code。</p>\n<ol>\n<li>\n<p>解压 DevEco Device Tool 插件压缩包，双击安装包程序进行安装。</p>\n</li>\n<li>\n<p>安装过程中，会自动安装 DevEco Device Tool 所需的依赖文件（如 C/C++ 和 CodeLLDB 插件）和执行程序。</p>\n<p><img \"\" class=\"lazyload placeholder\" data-original=\"https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20210720210836.31800168642290558649828696932171:50520720011259:2800:EABAA958E2D53F692068615BA4B3203811102E3BAE8B2D9259BA3EA99CAA8CAE.png?needInitFileName=true?needInitFileName=true\" src=\"https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif\" alt=\"img\"></p>\n</li>\n<li>\n<p>安装完成后，会自动关闭命令行工具窗口。</p>\n</li>\n<li>\n<p>启动 Visual Studio Code，点击左侧的<img \"\" class=\"lazyload placeholder\" data-original=\"https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20210720210836.37798261809799456293951828879216:50520720011259:2800:28C802BF1F065C9925349BDFCD56F9FDF6646D9ED5509A0925420A5BF65A0523.png?needInitFileName=true?needInitFileName=true\" src=\"https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif\" alt=\"img\"> 按钮，检查 INSTALLED 中，是否已成功安装 C/C++、CodeLLDB 和 DevEco Device Tool。</p>\n<p>说明</p>\n<p>如果 C/C++ 和 CodeLLDB 插件安装不成功，则 DevEco Device Tool 不能正常运行，解决方法，详细请参考：<a href=\"https://device.harmonyos.com/cn/docs/ide/user-guides/offline_plugin_install-0000001074376846\">离线安装 C/C++ 和 CodeLLDB 插件</a>。</p>\n<p><img \"\" class=\"lazyload placeholder\" data-original=\"https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20210720210836.99646568113737003039809236695544:50520720011259:2800:E24828A9E71543A0B8DF4A0B97CB5D04CD21107DFC1BFBF69718C79E9E5558DB.png?needInitFileName=true?needInitFileName=true\" src=\"https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif\" alt=\"img\"></p>\n</li>\n</ol>\n",
            "tags": [
                "平台",
                "鸿蒙",
                "单片机"
            ]
        },
        {
            "id": "http://example.com/2021/07/27/%E9%B8%BF%E8%92%99%E5%BC%80%E5%8F%91/(3)CentOS7%E9%B8%BF%E8%92%99%E7%BC%96%E8%AF%91%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87/",
            "url": "http://example.com/2021/07/27/%E9%B8%BF%E8%92%99%E5%BC%80%E5%8F%91/(3)CentOS7%E9%B8%BF%E8%92%99%E7%BC%96%E8%AF%91%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87/",
            "title": "(3)CentOS7中安装鸿蒙编译环境",
            "date_published": "2021-07-27T11:46:54.000Z",
            "content_html": "<h3 id=\"安装centos7\"><a class=\"markdownIt-Anchor\" href=\"#安装centos7\">#</a> 安装 CentOS7</h3>\n<p>在 VirtualBox 中最小化安装 CentOS（略）</p>\n<h3 id=\"配置网络\"><a class=\"markdownIt-Anchor\" href=\"#配置网络\">#</a> 配置网络</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ip addr</span><br><span class=\"line\">vi /etc/sysconfig/network-scripts/ifcfg-enp0s3 </span><br><span class=\"line\">systemctl restart network</span><br><span class=\"line\">ip addr</span><br><span class=\"line\">ping www.baidu.com</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">设置dhcp动态分配网络</span></span><br><span class=\"line\">yum install net-tools</span><br><span class=\"line\">yum install wget</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">安装常用软件</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"安装专用编译器\"><a class=\"markdownIt-Anchor\" href=\"#安装专用编译器\">#</a> 安装专用编译器</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf gcc_riscv32-linux-7.3.0.tar.gz -C /usr/local/</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">解压到/usr/<span class=\"built_in\">local</span></span></span><br><span class=\"line\">vi /etc/profile</span><br><span class=\"line\">source /etc/profile</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">添加bin目录到环境变量中</span></span><br><span class=\"line\">riscv32-unknown-elf-gcc --version</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">查看结果</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"安装python37\"><a class=\"markdownIt-Anchor\" href=\"#安装python37\">#</a> 安装 Python3.7+</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://www.python.org/ftp/python/3.9.0/Python-3.9.0.tgz</span><br><span class=\"line\">ls</span><br><span class=\"line\">tar -zxvf Python-3.9.0.tgz -C /usr/local/</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">解压安装包</span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">安装之前下载以下需要的依赖软件</span></span><br><span class=\"line\">yum groupinstall -y &quot;Development tools&quot;</span><br><span class=\"line\">yum install -y &quot;Development tools&quot;</span><br><span class=\"line\">yum install -y openssl-devel</span><br><span class=\"line\">yum install -y libffi libffi-devel</span><br><span class=\"line\">yum install -y bzip2-devel</span><br><span class=\"line\">yum install -y sqlite-devel</span><br><span class=\"line\">yum install -y readline-devel</span><br><span class=\"line\">yum install -y libuuid-devel</span><br><span class=\"line\">yum install -y uuid-devel</span><br><span class=\"line\">yum install -y xz-devel</span><br><span class=\"line\">yum install -y gdbm-devel</span><br><span class=\"line\">yum install -y tk-devel</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">安装Python</span></span><br><span class=\"line\">cd /usr/local/Python-3.9.0/</span><br><span class=\"line\">ls</span><br><span class=\"line\">./configure --prefix=/usr/local/python3</span><br><span class=\"line\">make &amp;&amp; make install</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">建立软链接，不影响系统自带的python</span></span><br><span class=\"line\">ln -s /usr/local/python3/bin/python3 /usr/bin/python3</span><br><span class=\"line\">ln -s /usr/local/python3/bin/pip3 /usr/bin/pip3</span><br><span class=\"line\">pip3 --version</span><br><span class=\"line\">python3 --version</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">安装python包</span></span><br><span class=\"line\">pip3 installsetuptools</span><br><span class=\"line\">pip3 install setuptools</span><br><span class=\"line\">pip3 install kconfiglib</span><br><span class=\"line\">pip3 install pycryptodome</span><br><span class=\"line\">pip3 install six --upgrade --ignore-installed six</span><br><span class=\"line\">pip3 install ecdsa</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装scons\"><a class=\"markdownIt-Anchor\" href=\"#安装scons\">#</a> 安装 SCONS</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf scons-4.0.1.tar.gz </span><br><span class=\"line\">cd SCons-4.0.1/</span><br><span class=\"line\">python3 setup.py install</span><br><span class=\"line\">ln -s /usr/local/python3/bin/scons /usr/bin/scons</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装gn\"><a class=\"markdownIt-Anchor\" href=\"#安装gn\">#</a> 安装 gn</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -xvf gn-linux-x86-1717.tar.gz -C /usr/local/</span><br><span class=\"line\">ln -s /usr/local/gn /usr/bin/gn</span><br><span class=\"line\">gn --version</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装ninja\"><a class=\"markdownIt-Anchor\" href=\"#安装ninja\">#</a> 安装 ninja</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -xvf ninja.1.9.0.tar -C /usr/local/</span><br><span class=\"line\">ln -s /usr/local/ninja/ninja /usr/bin/ninja</span><br><span class=\"line\">ninja --version</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装llvm\"><a class=\"markdownIt-Anchor\" href=\"#安装llvm\">#</a> 安装 llvm</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -xvf llvm-linux-9.0.0-36191.tar -C /usr/local/</span><br><span class=\"line\">vi /etc/profile</span><br><span class=\"line\">source /etc/profile</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装hb\"><a class=\"markdownIt-Anchor\" href=\"#安装hb\">#</a> 安装 hb</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 -m pip install --user ohos-build</span><br><span class=\"line\">vi ~/.bashrc </span><br><span class=\"line\">source ./.bashrc</span><br></pre></td></tr></table></figure>\n<h3 id=\"解压源码并编译\"><a class=\"markdownIt-Anchor\" href=\"#解压源码并编译\">#</a> 解压源码并编译</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir code-1.0</span><br><span class=\"line\">tar -zxvf code-1.0.tar.gz -C ./code-1.0</span><br><span class=\"line\">cd code-1.0</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">使用python3编译源码</span></span><br><span class=\"line\">python3 build.py wifiiot</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">编译成功</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"安装samba服务\"><a class=\"markdownIt-Anchor\" href=\"#安装samba服务\">#</a> 安装 Samba 服务</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install samba</span><br><span class=\"line\">systemctl enable smb</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">编辑配置文件</span></span><br><span class=\"line\">vi /etc/samba/smb.conf</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">创建用户</span></span><br><span class=\"line\">smbpasswd -a root</span><br><span class=\"line\">systemctl start smb</span><br><span class=\"line\">netstat -antp</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">配置selinux及防火墙</span></span><br><span class=\"line\">sestatus -b |grep samba</span><br><span class=\"line\">setsebool -P samba_export_all_rw 1</span><br></pre></td></tr></table></figure>\n<h3 id=\"参考文献\"><a class=\"markdownIt-Anchor\" href=\"#参考文献\">#</a> 参考文献</h3>\n<p>[1] Centos 下安装鸿蒙 LiteOS 编译环境<br>\n<a href=\"https://www.sohu.com/a/425806016_463994\"> https://www.sohu.com/a/425806016_463994</a><br>\n [2] 华为设备开发快速入门官方文档<br>\n<a href=\"https://device.harmonyos.com/cn/docs/start/introduce/quickstart-lite-env-setup-lin-0000001105407498\"> https://device.harmonyos.com/cn/docs/start/introduce/quickstart-lite-env-setup-lin-0000001105407498</a></p>\n",
            "tags": [
                "平台",
                "鸿蒙",
                "单片机"
            ]
        },
        {
            "id": "http://example.com/2021/07/27/%E9%B8%BF%E8%92%99%E5%BC%80%E5%8F%91/(4)%E8%BF%90%E8%A1%8CHello%20World/",
            "url": "http://example.com/2021/07/27/%E9%B8%BF%E8%92%99%E5%BC%80%E5%8F%91/(4)%E8%BF%90%E8%A1%8CHello%20World/",
            "title": "(4)运行Hello World",
            "date_published": "2021-07-27T11:46:54.000Z",
            "content_html": "<h1 id=\"运行hello-world\"><a class=\"markdownIt-Anchor\" href=\"#运行hello-world\">#</a> 运行 Hello World</h1>\n<p>更新时间: 2021-07-21 09:12</p>\n<p>本示例将演示如何编写简单业务，输出 “Hello World”，初步了解 HarmonyOS 如何运行在开发板上。</p>\n<h2 id=\"修改源码\"><a class=\"markdownIt-Anchor\" href=\"#修改源码\">#</a> 修改源码</h2>\n<p>bugfix 和新增业务两种情况，涉及源码修改。下面以新增业务（my_first_app）为例，向开发者介绍如何进行源码修改。</p>\n<ol>\n<li>\n<p>确定目录结构。</p>\n<p>开发者编写业务时，务必先在./applications/sample/wifi-iot/app 路径下新建一个目录（或一套目录结构），用于存放业务源码文件。</p>\n<p>例如：在 app 下新增业务 my_first_app，其中 hello_world.c 为业务代码，BUILD.gn 为编译脚本，具体规划目录结构如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">   └── applications</span><br><span class=\"line\">\t└── sample        </span><br><span class=\"line\">   \t\t└── wifi-iot            </span><br><span class=\"line\">   \t\t\t└── app                </span><br><span class=\"line\">   \t\t\t\t│── my_first_app                </span><br><span class=\"line\">   \t\t\t\t│  │── hello_world.c                </span><br><span class=\"line\">   \t\t\t\t│  └── BUILD.gn                </span><br><span class=\"line\">   \t\t\t\t└── BUILD.gn</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>编写业务代码。</p>\n<p>新建./applications/sample/wifi-iot/app/my_first_app 下的 hello_world.c 文件，在 hello_world.c 中新建业务入口函数 HelloWorld，并实现业务逻辑。并在代码最下方，使用 HarmonyOS 启动恢复模块接口 SYS_RUN () 启动业务。（SYS_RUN 定义在 ohos_init.h 文件中）</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&quot;ohos_init.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&quot;ohos_types.h&quot;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">HelloWorld</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;[DEMO] Hello world.\\n&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">SYS_RUN(HelloWorld);</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>编写用于将业务构建成静态库的 BUILD.gn 文件。</p>\n<p>新建./applications/sample/wifi-iot/app/my_first_app 下的 BUILD.gn 文件，并完成如下配置。</p>\n<p>如<a href=\"https://device.harmonyos.com/cn/docs/start/introduce/quickstart-lite-steps-board3861-running-0000001105048942#ZH-CN_TOPIC_0000001128311062__li5479332115116\">步骤 1</a> 所述，BUILD.gn 文件由三部分内容（目标、源文件、头文件路径）构成，需由开发者完成填写。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static_library(&quot;myapp&quot;) &#123;</span><br><span class=\"line\">\tsources = [ </span><br><span class=\"line\">\t\t&quot;hello_world.c&quot;   </span><br><span class=\"line\">\t]    </span><br><span class=\"line\">\tinclude_dirs = [ </span><br><span class=\"line\">\t\t&quot;//utils/native/lite/include&quot;    </span><br><span class=\"line\">\t]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>static_library 中指定业务模块的编译结果，为静态库文件 libmyapp.a，开发者根据实际情况完成填写。</li>\n<li>sources 中指定静态库.a 所依赖的.c 文件及其路径，若路径中包含 &quot;//“则表示绝对路径（此处为代码根路径），若不包含”//&quot; 则表示相对路径。</li>\n<li>include_dirs 中指定 source 所需要依赖的.h 文件路径。</li>\n</ul>\n</li>\n<li>\n<p>编写模块 BUILD.gn 文件，指定需参与构建的特性模块。</p>\n<p>配置./applications/sample/wifi-iot/app/BUILD.gn 文件，在 features 字段中增加索引，使目标模块参与编译。features 字段指定业务模块的路径和目标，以 my_first_app 举例，features 字段配置如下。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import(&quot;//build/lite/config/component/lite_component.gni&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">lite_component(&quot;app&quot;) &#123; </span><br><span class=\"line\">\tfeatures = [   </span><br><span class=\"line\">    \t&quot;my_first_app:myapp&quot;,  </span><br><span class=\"line\">        ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>my_first_app 是相对路径，指向./applications/sample/wifi-iot/app/my_first_app/BUILD.gn。</li>\n<li>myapp 是目标，指向./applications/sample/wifi-iot/app/my_first_app/BUILD.gn 中的 static_library (“myapp”)。</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"调测验证\"><a class=\"markdownIt-Anchor\" href=\"#调测验证\">#</a> 调测验证</h2>\n<p>目前调试验证的方法有两种，分别为通过 printf 打印日志、通过 asm 文件定位 panic 问题，开发者可以根据具体业务情况选择。</p>\n<p>由于本示例业务简单，采用 printf 打印日志的调试方式即可。下面开始介绍这两种调试手段的使用方法。</p>\n<h3 id=\"printf打印\"><a class=\"markdownIt-Anchor\" href=\"#printf打印\">#</a> printf 打印</h3>\n<p>代码中增加 printf 维测，信息会直接打印到串口上。开发者可在业务关键路径或业务异常位置增加日志打印，如下所示。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">HelloWorld</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;[DEMO] Hello world.\\n&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"根据asm文件进行问题定位\"><a class=\"markdownIt-Anchor\" href=\"#根据asm文件进行问题定位\">#</a> 根据 asm 文件进行问题定位</h3>\n<p>系统异常退出时，会在串口上打印异常退出原因调用栈信息，如下文所示。通过解析异常栈信息可以定位异常位置。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">=======KERNEL PANIC=======</span><br><span class=\"line\">**********************Call Stack*********************</span><br><span class=\"line\">Call Stack 0 -- 4860d8 addr:f784c</span><br><span class=\"line\">Call Stack 1 -- 47b2b2 addr:f788c</span><br><span class=\"line\">Call Stack 2 -- 3e562c addr:f789c</span><br><span class=\"line\">Call Stack 3 -- 4101de addr:f78ac</span><br><span class=\"line\">Call Stack 4 -- 3e5f32 addr:f78cc</span><br><span class=\"line\">Call Stack 5 -- 3f78c0 addr:f78ec</span><br><span class=\"line\">Call Stack 6 -- 3f5e24 addr:f78fc</span><br><span class=\"line\">********************Call Stack end*******************</span><br></pre></td></tr></table></figure>\n<p>为解析上述调用栈信息，需要使用到 Hi3861_wifiiot_app.asm 文件，该文件记录了代码中函数在 Flash 上的符号地址以及反汇编信息。asm 文件会随版本大包一同构建输出，存放在./out/wifiiot/ 路径下。</p>\n<ol>\n<li>\n<p>将调用栈 CallStack 信息保存到 txt 文档中，以便于编辑。（可选）</p>\n</li>\n<li>\n<p>打开 asm 文件，并搜索 CallStack 中的地址，列出对应的函数名 信息。通常只需找出前几个栈信息对应的函数，就可明确异常代码方向。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Call Stack 0 -- 4860d8 addr:f784c -- WadRecvCB</span><br><span class=\"line\">Call Stack 1 -- 47b2b2 addr:f788c -- wal_sdp_process_rx_data</span><br><span class=\"line\">Call Stack 2 -- 3e562c addr:f789c</span><br><span class=\"line\">Call Stack 3 -- 4101de addr:f78ac</span><br><span class=\"line\">Call Stack 4 -- 3e5f32 addr:f78cc</span><br><span class=\"line\">Call Stack 5 -- 3f78c0 addr:f78ec</span><br><span class=\"line\">Call Stack 6 -- 3f5e24 addr:f78fc</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>根据以上调用栈信息，可以定位 WadRecvCB 函数中出现了异常。</p>\n<p><img \"\" class=\"lazyload placeholder\" data-original=\"https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20210720210837.22448825207289523611021740783323:50520720011259:2800:735A2361AAE8E1229219B5AF3740DCFADC23F587CC83A074B586A05640ADD9BB.png?needInitFileName=true?needInitFileName=true\" src=\"https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif\" alt=\"img\"></p>\n</li>\n<li>\n<p>完成代码排查及修改。</p>\n</li>\n</ol>\n<h2 id=\"运行结果\"><a class=\"markdownIt-Anchor\" href=\"#运行结果\">#</a> 运行结果</h2>\n<p>示例代码编译、烧录、运行、调测后，在串口界面会显示如下结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ready to OS start</span><br><span class=\"line\">FileSystem mount ok.</span><br><span class=\"line\">wifi init success!</span><br><span class=\"line\">[DEMO] Hello world.</span><br></pre></td></tr></table></figure>\n<p><img \"\" class=\"lazyload placeholder\" data-original=\"/assets/hello_world.png\" src=\"https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif\" alt=\"\"></p>\n<h2 id=\"下一步学习\"><a class=\"markdownIt-Anchor\" href=\"#下一步学习\">#</a> 下一步学习</h2>\n<p>恭喜，您已完成 Hi3861 WLAN 模组快速上手！建议您下一步进入<a href=\"https://device.harmonyos.com/cn/docs/develop/demo/device-wifi-led-outcontrol-0000001050059068\"> WLAN 产品开发</a>的学习 。</p>\n",
            "tags": [
                "鸿蒙",
                "单片机"
            ]
        },
        {
            "id": "http://example.com/2021/07/27/%E9%B8%BF%E8%92%99%E5%BC%80%E5%8F%91/(5)LED%E5%A4%96%E8%AE%BE%E6%8E%A7%E5%88%B6/",
            "url": "http://example.com/2021/07/27/%E9%B8%BF%E8%92%99%E5%BC%80%E5%8F%91/(5)LED%E5%A4%96%E8%AE%BE%E6%8E%A7%E5%88%B6/",
            "title": "(5)LED外设控制",
            "date_published": "2021-07-27T11:46:54.000Z",
            "content_html": "<h1 id=\"led外设控制\"><a class=\"markdownIt-Anchor\" href=\"#led外设控制\">#</a> LED 外设控制</h1>\n<p>更新时间: 2021-07-21 09:12</p>\n<h2 id=\"概述\"><a class=\"markdownIt-Anchor\" href=\"#概述\">#</a> 概述</h2>\n<p>HarmonyOS WLAN 模组基于 Hi3861 平台提供了丰富的外设操作能力，包含 I2C、I2S、ADC、UART、SPI、SDIO、GPIO、PWM、FLASH 等。本文介绍如何通过调用 HarmonyOS 的 NDK 接口，实现对 GPIO 控制，达到 LED 闪烁的效果。其他的 IOT 外设控制，开发者可根据 API 指导文档完成，此处不逐一介绍。</p>\n<h2 id=\"开发\"><a class=\"markdownIt-Anchor\" href=\"#开发\">#</a> 开发</h2>\n<ol>\n<li>\n<p>请先完成<a href=\"https://device.harmonyos.com/cn/docs/start/introduce/quickstart-lite-introduction-hi3861-0000001105041324#section19352114194115\">《Hi3861 快速入门》</a>。</p>\n<p>LED 控制参考示例存放于 applications/sample/wifi-iot/app/iothardware/led_example.c 文件中。</p>\n</li>\n<li>\n<p>实现 IOT 外设控制，首先需要通过查阅原理图明确接线关系。经过查阅，hispark pegasus 的 LED 与芯片的 9 号管脚相连。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#define LED_TEST_GPIO 9</span><br></pre></td></tr></table></figure>\n<p>说明</p>\n<p>开发板原理图，请开发者联系 Hi3861 购买渠道客服获取。</p>\n</li>\n<li>\n<p>使用 GPIO 前，需要完成 GPIO 管脚初始化，明确管脚用途，并创建任务，使 LED 周期性亮灭，达到闪烁的效果。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">LedExampleEntry</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    osThreadAttr_t attr;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* 管脚初始化 */</span></span><br><span class=\"line\">    IoTGpioInit(LED_TEST_GPIO);</span><br><span class=\"line\">    <span class=\"comment\">/* 配置9号管脚为输出方向 */</span></span><br><span class=\"line\">    IoTGpioSetDir(LED_TEST_GPIO, IOT_GPIO_DIR_OUT);</span><br><span class=\"line\"></span><br><span class=\"line\">    attr.name = <span class=\"string\">&quot;LedTask&quot;</span>;</span><br><span class=\"line\">    attr.attr_bits = <span class=\"number\">0U</span>;</span><br><span class=\"line\">    attr.cb_mem = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    attr.cb_size = <span class=\"number\">0U</span>;</span><br><span class=\"line\">    attr.stack_mem = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    attr.stack_size = LED_TASK_STACK_SIZE;</span><br><span class=\"line\">    attr.priority = LED_TASK_PRIO;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* 启动任务 */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (osThreadNew((osThreadFunc_t)LedTask, <span class=\"literal\">NULL</span>, &amp;attr) == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;[LedExample] Failed to create LedTask!\\n&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>在循环任务中通过周期性亮灭形式实现 LED 闪烁。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> *<span class=\"title\">LedTask</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *arg)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    (<span class=\"keyword\">void</span>)arg;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (g_ledState) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> LED_ON:</span><br><span class=\"line\">                IoTGpioSetOutputVal(LED_TEST_GPIO, <span class=\"number\">1</span>);</span><br><span class=\"line\">                usleep(LED_INTERVAL_TIME_US);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> LED_OFF:</span><br><span class=\"line\">                IoTGpioSetOutputVal(LED_TEST_GPIO, <span class=\"number\">0</span>);</span><br><span class=\"line\">                usleep(LED_INTERVAL_TIME_US);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> LED_SPARK:</span><br><span class=\"line\">                IoTGpioSetOutputVal(LED_TEST_GPIO, <span class=\"number\">0</span>);</span><br><span class=\"line\">                usleep(LED_INTERVAL_TIME_US);</span><br><span class=\"line\">                IoTGpioSetOutputVal(LED_TEST_GPIO, <span class=\"number\">1</span>);</span><br><span class=\"line\">                usleep(LED_INTERVAL_TIME_US);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                usleep(LED_INTERVAL_TIME_US);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>在代码最下方，使用 HarmonyOS 启动恢复模块接口 SYS_RUN () 启动业务。（SYS_RUN 定义在 ohos_init.h 文件中）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SYS_RUN(LedExampleEntry);</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>修改 applications/sample/wifi-iot/app/BUILD.gn 文件，使 led_example.c 参与编译。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span>(<span class=\"string\">&quot;//build/lite/config/component/lite_component.gni&quot;</span>)</span><br><span class=\"line\">lite_component(<span class=\"string\">&quot;app&quot;</span>) &#123;</span><br><span class=\"line\">    features = [</span><br><span class=\"line\">        <span class=\"string\">&quot;iothardware:led_example&quot;</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"验证\"><a class=\"markdownIt-Anchor\" href=\"#验证\">#</a> 验证</h2>\n<p>编译过程请参考《<a href=\"https://device.harmonyos.com/cn/docs/start/introduce/quickstart-lite-steps-board3861-connection-0000001152048651#section191121332125319\">Hi3861 快速入门 - 源码编译</a>》，烧录过程请参考《<a href=\"https://device.harmonyos.com/cn/docs/start/introduce/quickstart-lite-steps-board3861-connection-0000001152048651#section19458165166\">Hi3861 快速入门 - 镜像烧录</a>》。</p>\n<p>完成以上两步后，按下 RST 键复位模组，可发现 LED 在周期性闪烁，与预期相符，验证完毕。</p>\n<p><strong>图 1</strong> LED 闪烁图<br>\n<img \"\" class=\"lazyload placeholder\" data-original=\"https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20210720210842.85858839787437486037865254162699:50520720011258:2800:213E67DE9E53810002D1E1621B9BAA11FA675F287FAF2DB732B3679380E38C92.gif?needInitFileName=true?needInitFileName=true\" src=\"https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif\" alt=\"img\"></p>\n",
            "tags": [
                "鸿蒙",
                "单片机"
            ]
        }
    ]
}