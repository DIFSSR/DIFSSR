{
    "version": "https://jsonfeed.org/version/1",
    "title": "千里稻花应秀色 • All posts by \"平台\" category",
    "description": "blogs by SSR",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2021/09/14/Linux%20Shell/Linux%20Shell%E5%9F%BA%E7%A1%80/",
            "url": "http://example.com/2021/09/14/Linux%20Shell/Linux%20Shell%E5%9F%BA%E7%A1%80/",
            "title": "Linux Shell基础",
            "date_published": "2021-09-14T00:19:12.000Z",
            "content_html": "<h2 id=\"1-shell基础\"><a class=\"markdownIt-Anchor\" href=\"#1-shell基础\">#</a> 1 Shell 基础</h2>\n<p>什么是 shell？目前常用的操作系统（Windows、U/L、Android、iOS 等）都带有图形界面，然 而，早期的计算机并没有图形界面，人们只能使用命令来控制计算机。其实，真 正能够控制计算机硬件（CPU、内存、显示器）的只有操作系统内核（Kernel）， 图形界面和命令行都是架设在用户和内核之间的桥梁，是为了方便用户控制计算 机而存在的。Shell 也是一种编程语言，主要用来开发一些实用的、自动化的小工具，例如，检测计算机的硬件参数、搭建 Web 运行环境、日志分析等。对 Linux 运维工程师来说，Shell 更是必须掌握的技能。Shell 使自动化管理服务器集群成为可能，否则用户只能一个一个地登录所有的服务器，对每一台服务器进行相同的设置，而这些服务器可能有成百上千之多，用户会在重复性的工作上浪费大量时间。</p>\n<h3 id=\"11查看shell版本\"><a class=\"markdownIt-Anchor\" href=\"#11查看shell版本\">#</a> 1.1 查看 Shell 版本</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat /ect/shells</span><br><span class=\"line\">/bin/sh</span><br><span class=\"line\">/bin/bash</span><br><span class=\"line\">/sbin/nologin</span><br><span class=\"line\">/usr/bin/sh</span><br><span class=\"line\">/usr/bin/bash</span><br><span class=\"line\">/usr/sbin/nologin</span><br></pre></td></tr></table></figure>\n<h3 id=\"12-shell变量类型\"><a class=\"markdownIt-Anchor\" href=\"#12-shell变量类型\">#</a> 1.2 Shell 变量类型</h3>\n<p>Shell 变量分为四类，分别为自定义变量、环境变量、位置变量和预定义变量。</p>\n<ul>\n<li>根据工作要求临时定义的变量称为自定义变量</li>\n<li>环境变量一般是指用 export 内置命令导出的变量，用于定义 Shell 的运行环境，保证 Shell 命令的正确执行 只使用 不定义</li>\n<li>从命令行、函数或脚本执行等处传递参数时，$0、$1 称为特殊位置变量</li>\n<li>预定义变量是在 bash 中已有的变量，可以直接使用，如<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">@</mi><mtext>、</mtext></mrow><annotation encoding=\"application/x-tex\">@、</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\">@</span><span class=\"mord cjk_fallback\">、</span></span></span></span>* 等。</li>\n</ul>\n<h4 id=\"121-自定义变量\"><a class=\"markdownIt-Anchor\" href=\"#121-自定义变量\">#</a> 1.2.1 自定义变量</h4>\n<p>自定义变量可以理解为局部变量或普通变量，只能在创建它们的 Shell 函数或 Shell 脚本中使用，自定义变量的说明如表所示。</p>\n<table>\n<thead>\n<tr>\n<th>定义自定义变量</th>\n<th>变量名 = 变量值，字母下划线开头，区分大小写</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>使用自定义变量</td>\n<td>$ 变量名</td>\n</tr>\n<tr>\n<td>查看自定义变量</td>\n<td>echo$ 变量名 set (所有变量)</td>\n</tr>\n<tr>\n<td>取消自定义变量</td>\n<td>unset 变量名</td>\n</tr>\n<tr>\n<td>自定义变量使用范围</td>\n<td>仅在当前 Shell 中有效</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">!/bin/bash</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">分支结构</span></span><br><span class=\"line\">host=www.baidu.com</span><br><span class=\"line\">if ping -c1 $host &amp;&gt;/dev/null</span><br><span class=\"line\">then</span><br><span class=\"line\">\techo &quot;network ok&quot;</span><br><span class=\"line\">else</span><br><span class=\"line\">\techo &quot;bad network&quot;</span><br><span class=\"line\">fi</span><br></pre></td></tr></table></figure>\n<h4 id=\"122环境变量\"><a class=\"markdownIt-Anchor\" href=\"#122环境变量\">#</a> 1.2.2 环境变量</h4>\n<p>环境变量也可称为全局变量，可以在创建它们的 Shell 及其派生出来的任意子进程 Shell 中使用。环境变量的说明如表所示。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">查看</span></span><br><span class=\"line\">echo $PATH</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">修改</span></span><br><span class=\"line\">PATH=$PATH:/bin/new</span><br><span class=\"line\">export PATH</span><br></pre></td></tr></table></figure>\n<h4 id=\"123位置变量\"><a class=\"markdownIt-Anchor\" href=\"#123位置变量\">#</a> 1.2.3 位置变量</h4>\n<p>在 Shell 中存在一些位置变量。位置变量用于在命令行、函数或脚本中传递参数，其变量名不用自己定义，其作用也是固定的。执行脚本时，通过在脚本后面给出具体的参数（多个参数用空格隔开）对相应的位置变量进行赋值。<br>\n$0 代表命令本身，$1-$9 代表接收的第 1~9 个参数，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>10</mn><mtext>以上需要用</mtext><mrow></mrow><mtext>括起来，如</mtext></mrow><annotation encoding=\"application/x-tex\">10以上需要用{}括起来，如</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord cjk_fallback\">以</span><span class=\"mord cjk_fallback\">上</span><span class=\"mord cjk_fallback\">需</span><span class=\"mord cjk_fallback\">要</span><span class=\"mord cjk_fallback\">用</span><span class=\"mord\"></span><span class=\"mord cjk_fallback\">括</span><span class=\"mord cjk_fallback\">起</span><span class=\"mord cjk_fallback\">来</span><span class=\"mord cjk_fallback\">，</span><span class=\"mord cjk_fallback\">如</span></span></span></span> {10} 代表接收的第 10 个参数。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[hadoop@master shell]$ cat ping06.sh </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">!/bin/bash</span></span><br><span class=\"line\">ping -c1 $1 &amp;&gt;/dev/null</span><br><span class=\"line\"></span><br><span class=\"line\">if [ $? -eq &quot;0&quot; ];then</span><br><span class=\"line\">\techo &quot;network to $1 is ok&quot;</span><br><span class=\"line\">else</span><br><span class=\"line\">\techo &quot;bad network to $1&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\">[hadoop@master shell]$ sh ping06.sh www.baidu.com</span><br><span class=\"line\">network to www.baidu.com is ok</span><br></pre></td></tr></table></figure>\n<h4 id=\"124预定义变量\"><a class=\"markdownIt-Anchor\" href=\"#124预定义变量\">#</a> 1.2.4 预定义变量</h4>\n<table>\n<thead>\n<tr>\n<th>$0</th>\n<th>脚本名</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>$*</td>\n<td>所有参数</td>\n</tr>\n<tr>\n<td>$@</td>\n<td>所有参数</td>\n</tr>\n<tr>\n<td>$#</td>\n<td>参数的个数</td>\n</tr>\n<tr>\n<td>$$</td>\n<td>当前进程 PID</td>\n</tr>\n<tr>\n<td>$!</td>\n<td>上一个进程 PID</td>\n</tr>\n<tr>\n<td>$?</td>\n<td>上一个命令返回值，0 代表成功</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[hadoop@master shell]$ ls &amp;</span><br><span class=\"line\">[1] 6950</span><br><span class=\"line\">[hadoop@master shell]$ ip.txt  ping03.sh  ping04.sh  ping05.sh  ping06.sh  ping07.sh  read</span><br><span class=\"line\"></span><br><span class=\"line\">[1]+  完成                  ls --color=auto</span><br><span class=\"line\">[hadoop@master shell]$ $!</span><br><span class=\"line\">-bash: 6950: 未找到命令</span><br><span class=\"line\"></span><br><span class=\"line\">[hadoop@master shell]$ cat ping07.sh </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\">if [ $# -eq 0 ];then</span><br><span class=\"line\">\techo &quot;usage: `basename $0` filename&quot;</span><br><span class=\"line\">\texit</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">if [ ! -f $1 ];then</span><br><span class=\"line\">\techo &quot;filename error&quot;</span><br><span class=\"line\">\texit</span><br><span class=\"line\">fi</span><br><span class=\"line\">for ip in `cat $1`</span><br><span class=\"line\">do </span><br><span class=\"line\">\tping -c1 $ip</span><br><span class=\"line\">done</span><br><span class=\"line\">[hadoop@master shell]$ sh ping07.sh </span><br><span class=\"line\">usage: ping07.sh filename</span><br><span class=\"line\">[hadoop@master shell]$ sh ping07.sh ip.txt </span><br></pre></td></tr></table></figure>\n<h3 id=\"13变量的赋值\"><a class=\"markdownIt-Anchor\" href=\"#13变量的赋值\">#</a> 1.3 变量的赋值</h3>\n<h4 id=\"131显式赋值\"><a class=\"markdownIt-Anchor\" href=\"#131显式赋值\">#</a> 1.3.1 显式赋值</h4>\n<p>在 Shell 中，当第一次使用某变量名时，实际上就已经给变量赋值了。显式赋值的<br>\n格式为” 变量名 = 变量值”。为了避免歧义，显式赋值时__禁止在等号两边添加空格__，<br>\n这跟常见的编程语言有所不同。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a=3</span><br></pre></td></tr></table></figure>\n<ul>\n<li>变量缺省为字符串类型</li>\n<li>变量值中有空格需要使用引号</li>\n<li>使用变量值进行赋值  name=“welcome to $place”</li>\n</ul>\n<h4 id=\"132从键盘赋值\"><a class=\"markdownIt-Anchor\" href=\"#132从键盘赋值\">#</a> 1.3.2 从键盘赋值</h4>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">read -p &quot;Please enter a ip:&quot; ip</span><br><span class=\"line\">Please enter a ip:1.1.1.1</span><br><span class=\"line\">echo $ip</span><br><span class=\"line\">1.1.1.1</span><br></pre></td></tr></table></figure>\n<h4 id=\"133使用位置变量赋值\"><a class=\"markdownIt-Anchor\" href=\"#133使用位置变量赋值\">#</a> 1.3.3 使用位置变量赋值</h4>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat test.sh</span><br><span class=\"line\">echo $1 $2</span><br><span class=\"line\">sh test.sh hello world</span><br><span class=\"line\">hello world</span><br></pre></td></tr></table></figure>\n<h4 id=\"134利用命令替换进行赋值\"><a class=\"markdownIt-Anchor\" href=\"#134利用命令替换进行赋值\">#</a> 1.3.4 利用命令替换进行赋值</h4>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">today=`date +%F`</span><br><span class=\"line\">echo today</span><br><span class=\"line\">2021-10-2</span><br><span class=\"line\">touch `date +%F`_file.txt</span><br></pre></td></tr></table></figure>\n<p>双引号弱引用，单引号为强引用</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[hadoop@master shell]$ cat ping04.sh </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">!/bin/bash</span></span><br><span class=\"line\">host=www.baidu.com</span><br><span class=\"line\">ping -c1 $host &amp;&gt;/dev/null</span><br><span class=\"line\">if [ $? -eq 0 ] </span><br><span class=\"line\">then</span><br><span class=\"line\">\techo &quot;network to $host is ok&quot;</span><br><span class=\"line\">else</span><br><span class=\"line\">\techo &quot;bad network to $host&quot;</span><br><span class=\"line\">fi</span><br></pre></td></tr></table></figure>\n<h3 id=\"14变量的运算\"><a class=\"markdownIt-Anchor\" href=\"#14变量的运算\">#</a> 1.4 变量的运算</h3>\n<h4 id=\"141expr数值运算命令\"><a class=\"markdownIt-Anchor\" href=\"#141expr数值运算命令\">#</a> 1.4.1.expr 数值运算命令</h4>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo 1 + 3</span><br><span class=\"line\">1 + 3</span><br><span class=\"line\">expr 1 + 3</span><br><span class=\"line\">4</span><br><span class=\"line\">res = `expr $name1 \\* $name2`</span><br><span class=\"line\">echo $res</span><br></pre></td></tr></table></figure>\n<ul>\n<li>在使用 expr 时，需要注意运算符及用于计算的数字两边必须有空格，否则会执行失败。</li>\n<li>expr 支持乘法运算，在使用乘号 * 时必须用反斜杠转义，即 \\*</li>\n</ul>\n<h4 id=\"142或数值运算命令\"><a class=\"markdownIt-Anchor\" href=\"#142或数值运算命令\">#</a> 1.4.2.“$(())” 或 “[]” 数值运算命令</h4>\n<ul>\n<li>双小括号 “$(())” 的作用是进行整数运算和数值比较，格式为 “ ((表达式))”</li>\n<li>操作数、运算符两侧可以有空格</li>\n<li>括号内 $ 符合可省略</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">num1=10</span><br><span class=\"line\">num2=20</span><br><span class=\"line\">sum=$((num1+num2))</span><br><span class=\"line\">echo $sum</span><br><span class=\"line\">30</span><br><span class=\"line\">sum=$[ num1+num2 ]</span><br><span class=\"line\">echo $sum</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">可以使用加减乘除幂</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"143let数值运算命令\"><a class=\"markdownIt-Anchor\" href=\"#143let数值运算命令\">#</a> 1.4.3.let 数值运算命令</h4>\n<ul>\n<li>let 数值符号可以直接进行计算，不需要使用 $ 符号。</li>\n<li>let 运算命令的语法格式为：let 赋值表达式</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let num=1+2</span><br><span class=\"line\">echo $num</span><br><span class=\"line\">3</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">调试模式</span></span><br><span class=\"line\">bash -vx test.sh</span><br></pre></td></tr></table></figure>\n<h4 id=\"144shell小数运算\"><a class=\"markdownIt-Anchor\" href=\"#144shell小数运算\">#</a> 1.4.4Shell 小数运算</h4>\n<ul>\n<li>bc 是 Unix/Linux 下的计算器，它还可以作为命令进行小数运算。</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &quot;2^4&quot;|bc</span><br><span class=\"line\">16</span><br><span class=\"line\">echo &quot;scale=2;6/4&quot;|bc</span><br><span class=\"line\">1.50</span><br></pre></td></tr></table></figure>\n<h3 id=\"15-变量的删除和替换\"><a class=\"markdownIt-Anchor\" href=\"#15-变量的删除和替换\">#</a> 1.5 变量的删除和替换</h3>\n<p>Linux 提供了一些可以直接对变量进行操作的符号。通过这些符号，变量中的部分内容可以被删除、替换和替代。在 Shell 变量中，变量的删除、替换和替代也是非常重要的。通过简单的操作修改变量，可以减少代码的行数并提高可读性。</p>\n<h4 id=\"151-变量的删除\"><a class=\"markdownIt-Anchor\" href=\"#151-变量的删除\">#</a> 1.5.1 变量的删除</h4>\n<ul>\n<li>变量删除的操作方式，如表所示。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>操作</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td 变量名#关键字符=\"\">$</td>\n<td>如果变量内容从头开始的数据符合 “关键字符”，则将符合的最短数据删除</td>\n</tr>\n<tr>\n<td 变量名##关键字符=\"\">$</td>\n<td>如果变量内容从头开始的数据符合 “关键字符”，则将符合的最长数据删除</td>\n</tr>\n<tr>\n<td 变量名%关键字符=\"\">$</td>\n<td>如果变量内容从尾开始的数据符合 “关键字符”，则将符合的最短数据删除</td>\n</tr>\n<tr>\n<td 变量名%%关键字符=\"\">$</td>\n<td>如果变量内容从尾开始的数据符合 “关键字符”，则将符合的最长数据删除</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@hdp-1 ~]# url=www.bing.com</span><br><span class=\"line\">[root@hdp-1 ~]# echo $&#123;url&#125;</span><br><span class=\"line\">www.bing.com</span><br><span class=\"line\">[root@hdp-1 ~]# echo $&#123;#url&#125;</span><br><span class=\"line\">12</span><br><span class=\"line\">[root@hdp-1 ~]# echo $&#123;url&#125;</span><br><span class=\"line\">www.bing.com</span><br><span class=\"line\">[root@hdp-1 ~]# echo $&#123;url#*.&#125;</span><br><span class=\"line\">bing.com</span><br><span class=\"line\">[root@hdp-1 ~]# echo $&#123;url##*.&#125;</span><br><span class=\"line\">com</span><br><span class=\"line\">[root@hdp-1 ~]# echo $&#123;url%.*&#125;</span><br><span class=\"line\">www.bing</span><br><span class=\"line\">[root@hdp-1 ~]# echo $&#123;url%%.*&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>索引和切片</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@hdp-1 ~]# echo $&#123;url:0:5&#125;</span><br><span class=\"line\">www.b</span><br><span class=\"line\">[root@hdp-1 ~]# echo $&#123;url:5:5&#125;</span><br><span class=\"line\">ing.c</span><br><span class=\"line\">[root@hdp-1 ~]# echo $&#123;url:5:&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">[root@hdp-1 ~]# echo $&#123;url:5&#125;</span><br><span class=\"line\">ing.com</span><br></pre></td></tr></table></figure>\n<h4 id=\"152-变量的替换\"><a class=\"markdownIt-Anchor\" href=\"#152-变量的替换\">#</a> 1.5.2 变量的替换</h4>\n<table>\n<thead>\n<tr>\n<th>操作</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td 变量名旧字符串新字符串=\"\">$</td>\n<td>表示若变量内容符和【旧字符串】则第一个【旧字符串】会被【新字符串】替换</td>\n</tr>\n<tr>\n<td 变量名旧字符串新字符串=\"\">$</td>\n<td>表示若变量内容符和【旧字符串】则全部的【旧字符串】会被【新字符串】替换</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@hdp-1 ~]# echo $&#123;url/bing/baidu&#125;</span><br><span class=\"line\">www.baidu.com</span><br><span class=\"line\">[root@hdp-1 ~]# echo $&#123;url/b/B&#125;</span><br><span class=\"line\">www.Bing.com</span><br><span class=\"line\">[root@hdp-1 ~]# echo $&#123;url/w/W&#125;</span><br><span class=\"line\">Www.bing.com</span><br><span class=\"line\">[root@hdp-1 ~]# echo $&#123;url//w/W&#125;</span><br><span class=\"line\">WWW.bing.com</span><br></pre></td></tr></table></figure>\n<h4 id=\"153变量的替代\"><a class=\"markdownIt-Anchor\" href=\"#153变量的替代\">#</a> 1.5.3 变量的替代</h4>\n<ul>\n<li>给 Shell 变量设置默认值的格式为”${变量名 - 新的变量名}”，如果变量名没有被赋值，会使用” 新的变量值” 替代，如果变量已被赋值（包括空值），则该值不会被替代。</li>\n<li>变量替代常用于为变量设置缺省值。例如，在连接数据库时，需要使用端口，这个端口可以是预先设置的具体端口，也可以是用户输入的端口。假如用户没有输入具体的端口号，脚本中就使用预先设置的端口。</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@hdp-1 ~]# unset url</span><br><span class=\"line\">[root@hdp-1 ~]# echo $&#123;url&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">[root@hdp-1 ~]# echo $&#123;url-www.heuet.edu.cn&#125;</span><br><span class=\"line\">www.heuet.edu.cn</span><br><span class=\"line\"></span><br><span class=\"line\">[root@hdp-1 ~]# host=hadoop</span><br><span class=\"line\">[root@hdp-1 ~]# echo $&#123;host-www.heuet.edu.cn&#125;</span><br><span class=\"line\">hadoop</span><br><span class=\"line\">[root@hdp-1 ~]# var=</span><br><span class=\"line\">[root@hdp-1 ~]# echo $&#123;var-www.heuet.edu.cn&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">[root@hdp-1 ~]# unset var1</span><br><span class=\"line\">[root@hdp-1 ~]# var2=</span><br><span class=\"line\">[root@hdp-1 ~]# var3=333</span><br><span class=\"line\">[root@hdp-1 ~]# echo $&#123;var1-111&#125;</span><br><span class=\"line\">111</span><br><span class=\"line\">[root@hdp-1 ~]# echo $&#123;var1:-111&#125;</span><br><span class=\"line\">111</span><br><span class=\"line\">[root@hdp-1 ~]# echo $&#123;var2:-111&#125;</span><br><span class=\"line\">111</span><br><span class=\"line\">[root@hdp-1 ~]# echo $&#123;var3:-111&#125;</span><br><span class=\"line\">333</span><br></pre></td></tr></table></figure>",
            "tags": [
                "Shell"
            ]
        },
        {
            "id": "http://example.com/2021/09/14/Linux%20Shell/Linux%20Shell%E6%9D%A1%E4%BB%B6%E6%B5%8B%E8%AF%95/",
            "url": "http://example.com/2021/09/14/Linux%20Shell/Linux%20Shell%E6%9D%A1%E4%BB%B6%E6%B5%8B%E8%AF%95/",
            "title": "Linux Shell条件测试",
            "date_published": "2021-09-14T00:19:12.000Z",
            "content_html": "<h2 id=\"2-shell条件测试\"><a class=\"markdownIt-Anchor\" href=\"#2-shell条件测试\">#</a> 2 Shell 条件测试</h2>\n<h3 id=\"21-文件测试\"><a class=\"markdownIt-Anchor\" href=\"#21-文件测试\">#</a> 2.1 文件测试</h3>\n<ul>\n<li>在 Shell 编程中，通常使用 test 命令进行条件测试</li>\n<li>语法形式为 “test &lt; 测试表达式&gt;”。</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@hdp-1 ~]# test -d /home</span><br><span class=\"line\">[root@hdp-1 ~]# echo $?</span><br><span class=\"line\">0</span><br><span class=\"line\">[root@hdp-1 ~]# test -d /homo</span><br><span class=\"line\">[root@hdp-1 ~]# echo $?</span><br><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n<ul>\n<li>test 条件测试在脚本中的应用</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@hdp-1 shell]# cat test_mysqlback.sh </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">!/usr/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\">back_dir=~/mysql_back</span><br><span class=\"line\">if ! test -d $back_dir;then</span><br><span class=\"line\">\tmkdir -p $back_dir</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;开始备份...&quot;</span><br><span class=\"line\">[root@hdp-1 shell]# chmod +x test_mysqlback.sh </span><br><span class=\"line\">[root@hdp-1 shell]# bash -vx test_mysqlback.sh </span><br></pre></td></tr></table></figure>\n<ul>\n<li>除 test 外，还可以使用中括号或双中括号进行条件测试</li>\n<li>中括号 [ 是 Shell 的内置命令，不是标点符号</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@hdp-1 shell]# [ -d /home ]</span><br><span class=\"line\">[root@hdp-1 shell]# echo $?</span><br><span class=\"line\">0</span><br><span class=\"line\">[root@hdp-1 shell]# [ -d /homo ]</span><br><span class=\"line\">[root@hdp-1 shell]# echo $?</span><br><span class=\"line\">1</span><br><span class=\"line\">[root@hdp-1 shell]# type -a [</span><br><span class=\"line\">[ 是 shell 内嵌</span><br><span class=\"line\">[ 是 /usr/bin/[</span><br><span class=\"line\">[root@hdp-1 shell]# [[ -d /home ]];echo $?</span><br><span class=\"line\">0</span><br></pre></td></tr></table></figure>\n<ul>\n<li>文件测试操作符</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>操作</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-d</td>\n<td>测试是否为目录 (Directory)</td>\n</tr>\n<tr>\n<td>-a</td>\n<td>测试目录或文件是否存在 (Exist）</td>\n</tr>\n<tr>\n<td>-f</td>\n<td>测试是否为文件 (File)</td>\n</tr>\n<tr>\n<td>-r</td>\n<td>测试当前用户是否可读（read)</td>\n</tr>\n<tr>\n<td>-w</td>\n<td>测试当前用户是否可写 (write）</td>\n</tr>\n<tr>\n<td>-x</td>\n<td>测试当前用户是否可执行（cxcutc）</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@hdp-1 shell]# ll host.txt </span><br><span class=\"line\">-rw-r--r--. 1 root root 102 11月  2 15:41 host.txt</span><br><span class=\"line\">[root@hdp-1 shell]# [ -r host.txt ];echo $?</span><br><span class=\"line\">0</span><br><span class=\"line\">[root@hdp-1 shell]# chmod -r host.txt </span><br><span class=\"line\">[root@hdp-1 shell]# ll host.txt </span><br><span class=\"line\">--w-------. 1 root root 102 11月  2 15:41 host.txt</span><br><span class=\"line\">[root@hdp-1 shell]# [ -r host.txt ];echo $?</span><br><span class=\"line\">0</span><br><span class=\"line\">[root@hdp-1 shell]# [ -w host.txt ];echo $?</span><br><span class=\"line\">0</span><br><span class=\"line\">[root@hdp-1 shell]# [ -x host.txt ];echo $?</span><br><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n<h3 id=\"22-整数测试\"><a class=\"markdownIt-Anchor\" href=\"#22-整数测试\">#</a> 2.2 整数测试</h3>\n<ul>\n<li>整数测试通常用于数值之间的运算，其语法格式为 [整数 1 操作符 整数 2]</li>\n<li>或 test 整数 1 操作符 整数 2。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>操作符</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-eq</td>\n<td>等于（Equal）</td>\n</tr>\n<tr>\n<td>-ne</td>\n<td>不等于 (Not Equal)</td>\n</tr>\n<tr>\n<td>-gt</td>\n<td>大于 (Greater Than)</td>\n</tr>\n<tr>\n<td>-lt</td>\n<td>小于 (Lesser Than)</td>\n</tr>\n<tr>\n<td>-le</td>\n<td>小于或等于 (Lesser or Equal)</td>\n</tr>\n<tr>\n<td>-ge</td>\n<td>大于或等于 (Greater or Equal)</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>整数测试在脚本中的应用：创建新用户</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@hdp-1 shell]# cat create_user01.sh </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">!/bin/bash</span></span><br><span class=\"line\">read -p &quot;Input a username: &quot; user</span><br><span class=\"line\">id $user &amp;&gt;/dev/null</span><br><span class=\"line\">if [ $? -eq 0 ];then</span><br><span class=\"line\">\techo &quot;user $user already exsits.&quot;</span><br><span class=\"line\">else</span><br><span class=\"line\">\tuseradd $user</span><br><span class=\"line\">\tif [ $? -eq 0 ];then</span><br><span class=\"line\">\t\techo &quot;$user created.&quot;</span><br><span class=\"line\">\tfi</span><br><span class=\"line\">fi</span><br></pre></td></tr></table></figure>\n<ul>\n<li>整数测试在脚本中的应用：磁盘可用空间告警</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@hdp-1 shell]# cat disk_use.sh </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">!/bin/bash</span></span><br><span class=\"line\">. /etc/profile</span><br><span class=\"line\">disk_use=`df -Th |grep &#x27;/$&#x27;|awk &#x27;&#123;print $(NF-1)&#125;&#x27;|awk -F&quot;%&quot; &#x27;&#123;print $1&#125;&#x27;`</span><br><span class=\"line\">if [ $disk_use -ge 5 ];then</span><br><span class=\"line\">\techo &quot;`date +%F&quot; &quot;%T` disk used: $&#123;disk_use&#125;%&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\">[root@hdp-1 shell]# ./disk_use.sh </span><br><span class=\"line\">2021-12-06 14:53:46 disk used: 42%</span><br></pre></td></tr></table></figure>\n<ul>\n<li>整数测试在脚本中的应用：内存可用空间告警</li>\n<li>shell 语法检查：bash -n <a href=\"http://xxx.sh\">xxx.sh</a></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@hdp-1 shell]# cat mem_use.sh </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">!/bin/bash</span></span><br><span class=\"line\">mem_used=`free -m |grep &#x27;^M&#x27; |awk &#x27;&#123;print $3&#125;&#x27;`</span><br><span class=\"line\">mem_total=`free -m |grep &#x27;^M&#x27; |awk &#x27;&#123;print $2&#125;&#x27;`</span><br><span class=\"line\">mem_percent=$[mem_used*100/mem_total]</span><br><span class=\"line\">var_file=`date +%F`.log</span><br><span class=\"line\">if [ $mem_percent -ge 10 ];then</span><br><span class=\"line\">\techo &quot;`date +%F&quot; &quot;%T` memory used: $&#123;mem_percent&#125;%&quot; &gt;$var_file</span><br><span class=\"line\">fi</span><br><span class=\"line\">[root@hdp-1 shell]# ./mem_use.sh </span><br><span class=\"line\">[root@hdp-1 shell]# cat 2021-12-06.log </span><br><span class=\"line\">2021-12-06 14:54:44 memory used: 79%</span><br></pre></td></tr></table></figure>\n<h3 id=\"23-字符串测试\"><a class=\"markdownIt-Anchor\" href=\"#23-字符串测试\">#</a> 2.3 字符串测试</h3>\n<ul>\n<li>字符串测试操作符的作用包括比较字符串是否相同、测试字符串的长度是否为 0。书写表达式为 [字符串 1 = 字符串 2]、[ 字符串 1 ！= 字符串 2 ] 或 [ -z 字符串 ]。字符串测试运算符如表所示。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>符号</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-z</td>\n<td>判断字符串长度是否为 0</td>\n</tr>\n<tr>\n<td>-n</td>\n<td>判断字符串长度是否为非 0</td>\n</tr>\n<tr>\n<td>!</td>\n<td>判断两个字符串是否不相等</td>\n</tr>\n<tr>\n<td>=</td>\n<td>判断两个字符串是否相等</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@hdp-1 shell]# [ $USER = root ];echo $?</span><br><span class=\"line\">0</span><br><span class=\"line\">[root@hdp-1 shell]# [ $USER = hadoop ];echo $?</span><br><span class=\"line\">1</span><br><span class=\"line\">[root@hdp-1 shell]# [ $USER != hadoop ];echo $?</span><br><span class=\"line\">0</span><br></pre></td></tr></table></figure>\n<ul>\n<li>双引号的作用</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@hdp-1 shell]# [ &quot;$USER&quot; != hadoop ];echo $?</span><br><span class=\"line\">0</span><br><span class=\"line\">[root@hdp-1 shell]# [ &quot;$USER&quot; = root ];echo $?</span><br><span class=\"line\">0</span><br><span class=\"line\">[root@hdp-1 shell]# echo $username</span><br><span class=\"line\"></span><br><span class=\"line\">[root@hdp-1 shell]# [ $username = root ];echo $?</span><br><span class=\"line\">-bash: [: =: 期待一元表达式</span><br><span class=\"line\">2</span><br><span class=\"line\">[root@hdp-1 shell]# [ &quot;$username&quot; = root ];echo $?</span><br><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n<ul>\n<li>字符串长度测试：空串、未定义变量的长度都是 0</li>\n<li>字符串必须使用双引号</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@hdp-1 shell]# var=&quot;&quot;</span><br><span class=\"line\">[root@hdp-1 shell]# echo $&#123;#var&#125;</span><br><span class=\"line\">0</span><br><span class=\"line\">[root@hdp-1 shell]# [ -z $var ];echo $?</span><br><span class=\"line\">0</span><br><span class=\"line\">[root@hdp-1 shell]# [ -n $var ];echo $?</span><br><span class=\"line\">0</span><br><span class=\"line\">[root@hdp-1 shell]# [ -z &quot;$var&quot; ];echo $?</span><br><span class=\"line\">0</span><br><span class=\"line\">[root@hdp-1 shell]# [ -n &quot;$var&quot; ];echo $?</span><br><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n<ul>\n<li>字符串测试在脚本中的应用</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@hdp-1 shell]# cat install.sh </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">!/bin/bash</span></span><br><span class=\"line\">if [ $user ! = root ];then</span><br><span class=\"line\">\techo &quot;Permission Denied&quot;</span><br><span class=\"line\">\texit</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">yum install httpd</span><br></pre></td></tr></table></figure>\n<ul>\n<li>以上是安装服务的脚本，判断变量 user 的值是否为 root，如果为 root 则安装 httpd，<br>\n如果不是 root，则显示” 你没有权限”。</li>\n</ul>\n<h3 id=\"24-逻辑运算符\"><a class=\"markdownIt-Anchor\" href=\"#24-逻辑运算符\">#</a> 2.4 逻辑运算符</h3>\n<ul>\n<li>在 Shell 条件测试中，使用逻辑运算符实现复杂的条件测试，逻辑运算符用于操作两个变量。逻辑运算符语法格式。</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[ 表达式1 ] 操作符 [ 表达式2 ]</span><br><span class=\"line\">or</span><br><span class=\"line\">命令1 操作符 命令2</span><br></pre></td></tr></table></figure>\n<ul>\n<li>逻辑操作符</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-a 或 &amp;&amp;</td>\n<td>判断操作符两边均为真，结果为真，否则为假，” 逻辑与”</td>\n</tr>\n<tr>\n<td>-o 或 ||</td>\n<td>判断操作符两边一边为真，结果为真，否则为假，” 逻辑或”</td>\n</tr>\n<tr>\n<td>!</td>\n<td>判断操作符两边均为假，结果为真，否则为假，” 逻辑否”</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>-a 和 &amp;&amp; 的运算规则。</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@hdp-1 shell]# [ 1 -lt 2 -a 5 -gt 10 ];echo $?</span><br><span class=\"line\">1</span><br><span class=\"line\">[root@hdp-1 shell]# [ 1 -lt 2 -o 5 -gt 10 ];echo $?</span><br><span class=\"line\">0</span><br><span class=\"line\">[root@hdp-1 shell]# [[ 1 -lt 2 &amp;&amp; 5 -gt 10 ]];echo $?</span><br><span class=\"line\">1</span><br><span class=\"line\">[root@hdp-1 shell]# [[ 1 -lt 2 || 5 -gt 10 ]];echo $?</span><br><span class=\"line\">0</span><br><span class=\"line\">[root@hdp-1 shell]# </span><br></pre></td></tr></table></figure>\n<ul>\n<li>应用：创建批量用户</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@hdp-1 shell]# cat user_add.sh </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">!/bin/bash</span></span><br><span class=\"line\">read -p &quot;Please input a username: &quot; user</span><br><span class=\"line\">id $user &amp;&gt;/dev/null</span><br><span class=\"line\">if [ $? -eq 0 ];then</span><br><span class=\"line\">\techo &quot;user $user already exists.&quot;</span><br><span class=\"line\">else</span><br><span class=\"line\">\tuseradd $user</span><br><span class=\"line\">\tif [ $? -eq 0 ];then</span><br><span class=\"line\">\t\techo &quot;user created.&quot;</span><br><span class=\"line\">\tfi</span><br><span class=\"line\">fi</span><br></pre></td></tr></table></figure>\n<ul>\n<li>应用：创建批量用户</li>\n</ul>\n<h3 id=\"case-条件语句\"><a class=\"markdownIt-Anchor\" href=\"#case-条件语句\">#</a> case 条件语句</h3>\n<ul>\n<li>case 条件语句相当于多分支的 if/elif/else 条件语句</li>\n<li>case 条件语句比 if 语句更加简洁工整，故常应用在实现系统服务启动脚本等应用场景中。</li>\n<li>在 Shell 编程中，case 语句有固定的语法格式。其语法格式为：</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">case 变量值 in</span><br><span class=\"line\">  条件表达式1）</span><br><span class=\"line\">    代码块1</span><br><span class=\"line\">    ；；</span><br><span class=\"line\">  条件表达式2）</span><br><span class=\"line\">    代码块2</span><br><span class=\"line\">    ；；</span><br><span class=\"line\">  条件表达式3）</span><br><span class=\"line\">    代码块3</span><br><span class=\"line\">    ；；</span><br><span class=\"line\">  *）</span><br><span class=\"line\">    默认代码块</span><br><span class=\"line\">esac</span><br></pre></td></tr></table></figure>\n<ul>\n<li>条件表达式匹配如表所示。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>条件表达式</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>*</td>\n<td>任意字符</td>\n</tr>\n<tr>\n<td>?</td>\n<td>任意单个字符</td>\n</tr>\n<tr>\n<td>[abc]</td>\n<td>其中之一</td>\n</tr>\n<tr>\n<td>[a-z]</td>\n<td>区间之一</td>\n</tr>\n<tr>\n<td>|</td>\n<td>多重选择</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>case 条件语句案例实战</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@hdp-1 shell]# cat user_del.sh </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">!/bin/bash</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> delete user</span></span><br><span class=\"line\"></span><br><span class=\"line\">read -p &quot;Input a username: &quot; user</span><br><span class=\"line\">id $user &amp;&gt;/dev/null</span><br><span class=\"line\">if [ $? -ne 0 ];then</span><br><span class=\"line\">\techo &quot;no such user: $user&quot;</span><br><span class=\"line\">\texit 1</span><br><span class=\"line\">fi</span><br><span class=\"line\">read -p &quot;Are you sure?[y/n]: &quot; action</span><br><span class=\"line\">case &quot;$action&quot; in</span><br><span class=\"line\">y|Y|yes|YES)</span><br><span class=\"line\">\tuserdel -r $user</span><br><span class=\"line\">\techo &quot;user $user deleted. &quot;</span><br><span class=\"line\">\t;;</span><br><span class=\"line\">*)</span><br><span class=\"line\">\techo &quot;error! &quot;</span><br><span class=\"line\">\texit 2</span><br><span class=\"line\">esac</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "Shell"
            ]
        },
        {
            "id": "http://example.com/2021/09/14/Linux%20Shell/Linux%20Shell%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84/",
            "url": "http://example.com/2021/09/14/Linux%20Shell/Linux%20Shell%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84/",
            "title": "Linux Shell循环结构",
            "date_published": "2021-09-14T00:19:12.000Z",
            "content_html": "<h2 id=\"3-循环结构\"><a class=\"markdownIt-Anchor\" href=\"#3-循环结构\">#</a> 3 循环结构</h2>\n<ul>\n<li>Shell 语言支持四种循环语句：for、while、until、select</li>\n<li>工作中常用的是 for、while、until</li>\n</ul>\n<h3 id=\"for循环语法结构\"><a class=\"markdownIt-Anchor\" href=\"#for循环语法结构\">#</a> for 循环语法结构</h3>\n<ul>\n<li>for 循环主要用于确定次数的循环</li>\n<li>第一种 for 循环的语法结构如下所示：</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for 变量名 in 取值列表</span><br><span class=\"line\">do</span><br><span class=\"line\">\t循环体</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n<ul>\n<li>for 循环语句实现批量主机 ping 探测</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@hdp-1 shell]# cat for_ping.sh </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">!/bin/bash</span></span><br><span class=\"line\">for name in baidu 163 hao123</span><br><span class=\"line\">do</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\thost=www.$name.com</span><br><span class=\"line\">\tping -c1 -w1 $host &amp;&gt; /dev/null</span><br><span class=\"line\">\tif [ $? -eq 0 ];then</span><br><span class=\"line\">\t\techo &quot;$host&quot; | tee -a host.txt</span><br><span class=\"line\">\tfi</span><br><span class=\"line\">\t&#125;&amp;</span><br><span class=\"line\">done</span><br><span class=\"line\">wait</span><br><span class=\"line\">echo &quot;Mission Completed.&quot;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>for 循环语句实现文件中批量用户创建</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@hdp-1 shell]# cat users_from_file.sh </span><br><span class=\"line\">IFS=$&#x27;\\n&#x27;</span><br><span class=\"line\">for line in `cat $1`</span><br><span class=\"line\">do</span><br><span class=\"line\">if [ $&#123;#line&#125; -eq 0 ];then</span><br><span class=\"line\">continue</span><br><span class=\"line\">fi</span><br><span class=\"line\">user=`echo &quot;$line&quot; | awk &#x27;&#123;print $1&#125;&#x27;`</span><br><span class=\"line\">pass=`echo &quot;$line&quot; | awk &#x27;&#123;print $2&#125;&#x27;`</span><br><span class=\"line\">id $user &amp;&gt;/dev/nuil</span><br><span class=\"line\">if [ $? -eq 0 ] ;then</span><br><span class=\"line\">echo &quot;user $user already exists&quot;</span><br><span class=\"line\">else</span><br><span class=\"line\">useradd $user</span><br><span class=\"line\">echo &quot;$pass&quot; | passwd --stdin $user &amp;&gt; /dev/null</span><br><span class=\"line\">if [ $? -eq 0 ];then</span><br><span class=\"line\">echo &quot;$user created&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\">fi</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n<h3 id=\"while循环语句语法结构\"><a class=\"markdownIt-Anchor\" href=\"#while循环语句语法结构\">#</a> while 循环语句语法结构</h3>\n<ul>\n<li>while 循环语句的基本语法为：</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">while 条件测试</span><br><span class=\"line\">do</span><br><span class=\"line\">    循环体</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n<ul>\n<li>while 循环语句会对条件测试进行判断，如果条件测试成立时，则执行 do 和 done 之间的循环体，直到条件测试不成立才停止循环。</li>\n<li>while 循环语句实现批量用户创建</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@hdp-1 shell]# cat while_user.sh </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\">while read line</span><br><span class=\"line\">do</span><br><span class=\"line\">\tif [ $&#123;#line&#125; -eq 0 ];then</span><br><span class=\"line\">\t\techo &quot;NULL&quot;</span><br><span class=\"line\">\t\tcontinue</span><br><span class=\"line\">\tfi</span><br><span class=\"line\">\tuser=`echo $line | awk &#x27;&#123;print $1&#125;&#x27;`</span><br><span class=\"line\">\tpass=`echo $line | awk &#x27;&#123;print $2&#125;&#x27;`</span><br><span class=\"line\">\tid $user &amp;&gt;/dev/null</span><br><span class=\"line\">\tif [ $? -eq 0 ];then</span><br><span class=\"line\">\t\techo &quot;user $user already exists.&quot;</span><br><span class=\"line\">\telse</span><br><span class=\"line\">\t\tuseradd $user</span><br><span class=\"line\">\t\techo &quot;$pass&quot;| passwd --stdin $user &amp;&gt;/dev/null</span><br><span class=\"line\">\t\tif [ $? -eq 0 ] ;then</span><br><span class=\"line\">\t\t\techo &quot;$user created .&quot;</span><br><span class=\"line\">\t\tfi</span><br><span class=\"line\">\tfi</span><br><span class=\"line\">done &lt; $1</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"until循环语句语法结构\"><a class=\"markdownIt-Anchor\" href=\"#until循环语句语法结构\">#</a> until 循环语句语法结构</h3>\n<ul>\n<li>until 循环语句基本语法为：</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">until 条件测试</span><br><span class=\"line\">do</span><br><span class=\"line\">\t循环体</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n<ul>\n<li>until 循环语句是在条件表达式不成立时，进入循环体执行指令，条件表达式成立时，终止循环。until 的应用场景很罕见。</li>\n<li>until 循环语句测试远程主机可达性</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@hdp-1 shell]# cat until_ping.sh </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\">host=www.baidu.com</span><br><span class=\"line\">until ping -c1 -w1 $host &amp;&gt;/dev/null</span><br><span class=\"line\">do</span><br><span class=\"line\">\tsleep 1</span><br><span class=\"line\">done</span><br><span class=\"line\">echo &quot;$host up. &quot;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "Shell"
            ]
        },
        {
            "id": "http://example.com/2021/09/14/Linux%20Shell/Linux%20Shell%E8%BF%9B%E9%98%B6/",
            "url": "http://example.com/2021/09/14/Linux%20Shell/Linux%20Shell%E8%BF%9B%E9%98%B6/",
            "title": "Linux Shell进阶",
            "date_published": "2021-09-14T00:19:12.000Z",
            "content_html": "<h2 id=\"4-并发控制\"><a class=\"markdownIt-Anchor\" href=\"#4-并发控制\">#</a> 4 并发控制</h2>\n<ul>\n<li>默认情况下，Shell 命令是串行方式自上而下执行的，但如果有大量的命令需要执行，串行就会浪费大量的时间，这就需要采用并发执行。</li>\n</ul>\n<h3 id=\"41-利用后台执行实现并发\"><a class=\"markdownIt-Anchor\" href=\"#41-利用后台执行实现并发\">#</a> 4.1 利用后台执行实现并发</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@hdp-1 shell]# cat back_ping.sh </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">!/bin/bash</span></span><br><span class=\"line\">for i in &#123;1..254&#125;</span><br><span class=\"line\">do </span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\tip=10.10.10.$i</span><br><span class=\"line\">\tping -c1 -w1 $ip &amp;&gt; /dev/null</span><br><span class=\"line\">\tif [ $? -eq 0 ];then</span><br><span class=\"line\">\t\techo &quot;$ip is up.&quot;</span><br><span class=\"line\">\telse</span><br><span class=\"line\">\t\techo &quot;$ip is down.&quot;</span><br><span class=\"line\">\tfi</span><br><span class=\"line\">\t&#125;&amp;</span><br><span class=\"line\">done</span><br><span class=\"line\">wait</span><br><span class=\"line\">echo &quot;Mission Completed&quot;</span><br></pre></td></tr></table></figure>\n<h3 id=\"利用管道实现并发控制\"><a class=\"markdownIt-Anchor\" href=\"#利用管道实现并发控制\">#</a> 利用管道实现并发控制</h3>\n<ul>\n<li>使用 Linux 管道文件特性制作队列，可以控制并发数量。</li>\n<li>管道分为命名管道和匿名管道。</li>\n<li>创建命名管道文件命令是 mkfifo</li>\n<li>命名管道可跨终端实现数据交换</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@hdp-1 shell]# cat 255_ping.sh </span><br><span class=\"line\">thread=5</span><br><span class=\"line\">tmp_fifofile=/tmp/$$.fifo</span><br><span class=\"line\">mkfifo $tmp_fifofile</span><br><span class=\"line\">exec 8&lt;&gt;$tmp_fifofile</span><br><span class=\"line\">rm $tmp_fifofile</span><br><span class=\"line\">for i in `seq $thread`</span><br><span class=\"line\">do</span><br><span class=\"line\">\techo &gt;&amp;8</span><br><span class=\"line\">done</span><br><span class=\"line\"></span><br><span class=\"line\">for i in &#123;1..254&#125;</span><br><span class=\"line\">do</span><br><span class=\"line\">\tread -u 8</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tip=10.0.0.$i</span><br><span class=\"line\">\t\tping -c1 -w1 $ip &amp;&gt;/dev/null</span><br><span class=\"line\">\t\tif [ $? -eq 0 ];then</span><br><span class=\"line\">\t\t\techo &quot;$ip is up.&quot;</span><br><span class=\"line\">\t\telse</span><br><span class=\"line\">\t\t\techo &quot;$ip is down . &quot;</span><br><span class=\"line\">\t\tfi</span><br><span class=\"line\">\t\techo &gt;&amp;8</span><br><span class=\"line\">\t&#125;&amp;</span><br><span class=\"line\">done</span><br><span class=\"line\">wait</span><br><span class=\"line\">exec 8&gt;&amp;-</span><br><span class=\"line\">echo &quot;misson completed.&quot;</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-shell-数组\"><a class=\"markdownIt-Anchor\" href=\"#5-shell-数组\">#</a> 5 Shell 数组</h2>\n<h3 id=\"51-shell数组的基本概念\"><a class=\"markdownIt-Anchor\" href=\"#51-shell数组的基本概念\">#</a> 5.1 Shell 数组的基本概念</h3>\n<ul>\n<li>用于区分不同元素的编号称为数组下标。</li>\n<li>数组的元素有时也称为下标变量。</li>\n<li>数组分为普通数组和关联数组</li>\n<li>普通数组中的索引是整数，关联数组的数组索引可以用文本。</li>\n<li>关联数组使用之前需要声明</li>\n<li>关联数组由键值对组成。</li>\n</ul>\n<h4 id=\"511-普通数组\"><a class=\"markdownIt-Anchor\" href=\"#511-普通数组\">#</a> 5.1.1 普通数组</h4>\n<ul>\n<li>普通数组中：数组元素的索引（下标）从 0 开始编号，获取数组中的元素要利用索引（下标）。索引（下标）可以是算术表达式，其结果必须是一个整数。</li>\n<li>普通数组定义。</li>\n<li>下标从 0 开始</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@hdp-1 shell]# books=(linux shell awk openstack docker)</span><br><span class=\"line\">[root@hdp-1 shell]# echo $&#123;books[3]&#125;</span><br><span class=\"line\">openstack</span><br></pre></td></tr></table></figure>\n<h4 id=\"512-关联数组\"><a class=\"markdownIt-Anchor\" href=\"#512-关联数组\">#</a> 5.1.2 关联数组</h4>\n<ul>\n<li>关联数组和普通数组所不同的是，它的索引下标可以是任意的整数和字符串。</li>\n<li>关联数组定义。eg: info=([name]=tianyun [sex]=male [age]=36 [height]=170 [skill]=cloud)</li>\n</ul>\n<h4 id=\"513-数组声明\"><a class=\"markdownIt-Anchor\" href=\"#513-数组声明\">#</a> 5.1.3 数组声明</h4>\n<ul>\n<li>关联数组需要先声明后使用。</li>\n<li>通常情况下 Shell 解释器隐式声明普通数组。</li>\n<li>声明普通数组的方法为：</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">declare -a array</span><br></pre></td></tr></table></figure>\n<ul>\n<li>声明关联数组的方法为：</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">declare -A array</span><br></pre></td></tr></table></figure>\n<h3 id=\"52-shell数组的定义\"><a class=\"markdownIt-Anchor\" href=\"#52-shell数组的定义\">#</a> 5.2 Shell 数组的定义</h3>\n<ul>\n<li>在 Linux Shell 中，定义一个数组有多种方法，需要先按照命令规则给数组命名，然后再定义数组的值。数组的定义方法有直接定义数组、下标定义数组、间接定义数组和从文件中读入定义数组，接下来详细介绍定义数组的方法。</li>\n</ul>\n<h4 id=\"521-直接定义数组\"><a class=\"markdownIt-Anchor\" href=\"#521-直接定义数组\">#</a> 5.2.1 直接定义数组</h4>\n<ul>\n<li>直接定义数组是用小括号将变量值括起来赋值给数组变量，每个变量值之间要用空隔进行分隔。</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@hdp-1 shell]# books=(linux shell awk openstack docker)</span><br><span class=\"line\">[root@hdp-1 shell]# echo $&#123;books[3]&#125;</span><br><span class=\"line\">openstack</span><br></pre></td></tr></table></figure>\n<h4 id=\"522-下标定义数组\"><a class=\"markdownIt-Anchor\" href=\"#522-下标定义数组\">#</a> 5.2.2 下标定义数组</h4>\n<ul>\n<li>下标定义数组是用小括号将变量值括起来，同时采用键值对的形式赋值。</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">array_name=([1]=value1 [2]=value2 [3]=value3 ...)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>此种方法为 key-value 键值对的形式，小括号里对应的数字为数组下标，等号后面的内容为下标对应的数组变量的值。</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@hdp-1 shell]# declare -A info</span><br><span class=\"line\">[root@hdp-1 shell]# info=([name]=tianyun [sex]=male [age]=36 [height]=170 [skill]=cloud)</span><br><span class=\"line\">[root@hdp-1 shell]# echo $&#123;info[name]&#125;</span><br><span class=\"line\">tianyun</span><br><span class=\"line\">[root@hdp-1 shell]# echo $&#123;info[skill]&#125;</span><br><span class=\"line\">cloud</span><br></pre></td></tr></table></figure>\n<h4 id=\"523-间接定义数组\"><a class=\"markdownIt-Anchor\" href=\"#523-间接定义数组\">#</a> 5.2.3 间接定义数组</h4>\n<ul>\n<li>间接定义数组是分别通过定义数组的方法来定义。其语法格式为：</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">array_name[0]=value1;array_name[1]=value2;array_name[2]=value3 </span><br></pre></td></tr></table></figure>\n<ul>\n<li>此种方法要求一次赋一个值，比较复杂。具体如下所示。</li>\n<li>间接定义数组。</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@hdp-1 shell]# array[0]=pear</span><br><span class=\"line\">[root@hdp-1 shell]# array[1]=apple</span><br><span class=\"line\">[root@hdp-1 shell]# array[2]=orange</span><br><span class=\"line\">[root@hdp-1 shell]# echo $&#123;array[1]&#125;</span><br><span class=\"line\">apple</span><br><span class=\"line\">[root@hdp-1 shell]# echo &quot;You are the $&#123;array[1]&#125; of my eye.&quot;</span><br><span class=\"line\">You are the apple of my eye.</span><br></pre></td></tr></table></figure>\n<h4 id=\"524-从文件中读入定义数组\"><a class=\"markdownIt-Anchor\" href=\"#524-从文件中读入定义数组\">#</a> 5.2.4 从文件中读入定义数组</h4>\n<ul>\n<li>从文件中读入定义数组是使用命令的输出结果作为数组的内容。其语法格式为：</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">array_name=($&#123;命令&#125;)</span><br><span class=\"line\">数组名=($(`变量名`))</span><br><span class=\"line\">或者</span><br><span class=\"line\">array_name=(`命令`)</span><br><span class=\"line\">数组名=(`变量值`)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>这种方法要求一次赋多个值。</li>\n<li>从文件中读入定义数组。</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@hdp-1 shell]# array=(`cat /etc/passwd`)</span><br><span class=\"line\">[root@hdp-1 shell]# echo $&#123;array[*]&#125;</span><br><span class=\"line\">root:x:0:0:root:/root:/bin/bash</span><br></pre></td></tr></table></figure>\n<h3 id=\"53-shell数组的遍历及赋值\"><a class=\"markdownIt-Anchor\" href=\"#53-shell数组的遍历及赋值\">#</a> 5.3 Shell 数组的遍历及赋值</h3>\n<h4 id=\"531-常见的访问shell数组表达式\"><a class=\"markdownIt-Anchor\" href=\"#531-常见的访问shell数组表达式\">#</a> 5.3.1 常见的访问 Shell 数组表达式</h4>\n<ul>\n<li>表列出了常见访问数组的表达式。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>语法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td !array[*]=\"\">echo $</td>\n<td>访问数组所有索引</td>\n</tr>\n<tr>\n<td !array[@]=\"\">echo $</td>\n<td>访问数组所有索引</td>\n</tr>\n<tr>\n<td array[*]=\"\">echo $</td>\n<td>访问数组所有值</td>\n</tr>\n<tr>\n<td array[@]=\"\">echo $</td>\n<td>访问数组所有值</td>\n</tr>\n<tr>\n<td id=\"array[@]\">echo $</td>\n<td>统计数组元素个数</td>\n</tr>\n<tr>\n<td array[0]=\"\">echo $</td>\n<td>访问数组中的第一个元素</td>\n</tr>\n<tr>\n<td array[@]:1=\"\">echo $</td>\n<td>从数组下标 1 开始</td>\n</tr>\n<tr>\n<td array[@]:1:2=\"\">echo $</td>\n<td>从数组下标 1 开始，访问两个元素</td>\n</tr>\n<tr>\n<td id=\"array[#]\">echo $</td>\n<td>第 #个元素的字符个数</td>\n</tr>\n<tr>\n<td id=\"array\">echo $</td>\n<td>第 0 个元素的字符个数</td>\n</tr>\n<tr>\n<td array[#]=\"\">echo $</td>\n<td>显示第 #个元素</td>\n</tr>\n<tr>\n<td array=\"\">echo $</td>\n<td>显示第 0 个与元素</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"532-while循环实现shell数组的遍历\"><a class=\"markdownIt-Anchor\" href=\"#532-while循环实现shell数组的遍历\">#</a> 5.3.2 while 循环实现 Shell 数组的遍历</h4>\n<ul>\n<li>以 host 文件的每一行作为数组的一个元素来赋值，并对该数组进行遍历。具体如下所示。</li>\n<li>while 循环实现 Shell 数组的遍历。</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat array_host_while.sh </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">!/bin/bash</span></span><br><span class=\"line\">while read line</span><br><span class=\"line\">do</span><br><span class=\"line\">\thosts[++i]=$line</span><br><span class=\"line\"></span><br><span class=\"line\">done &lt;/etc/hosts</span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;hosts first : $&#123;hosts[1]&#125;&quot;</span><br><span class=\"line\">echo</span><br><span class=\"line\"></span><br><span class=\"line\">for i in $&#123;!hosts[@]&#125;</span><br><span class=\"line\">do</span><br><span class=\"line\">\techo &quot;$i: $&#123;hosts[i]&#125;&quot;</span><br><span class=\"line\">done</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ul>\n<li>while 读入 /etc/hosts 文件的每一行并把它显示出来，hosts [++i]=<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>l</mi><mi>i</mi><mi>n</mi><mi>e</mi><mtext>这个表达式完成数组的赋值操作，</mtext></mrow><annotation encoding=\"application/x-tex\">line这个表达式完成数组的赋值操作，</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">e</span><span class=\"mord cjk_fallback\">这</span><span class=\"mord cjk_fallback\">个</span><span class=\"mord cjk_fallback\">表</span><span class=\"mord cjk_fallback\">达</span><span class=\"mord cjk_fallback\">式</span><span class=\"mord cjk_fallback\">完</span><span class=\"mord cjk_fallback\">成</span><span class=\"mord cjk_fallback\">数</span><span class=\"mord cjk_fallback\">组</span><span class=\"mord cjk_fallback\">的</span><span class=\"mord cjk_fallback\">赋</span><span class=\"mord cjk_fallback\">值</span><span class=\"mord cjk_fallback\">操</span><span class=\"mord cjk_fallback\">作</span><span class=\"mord cjk_fallback\">，</span></span></span></span>{!hosts [@]} 这个表达式获得数组的索引，${hosts [i]} 这个表达式完成了数组的遍历。</li>\n<li>执行结果如下：</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@hdp-1 shell]# ./array_host_while.sh </span><br><span class=\"line\">hosts first : 127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4</span><br><span class=\"line\"></span><br><span class=\"line\">1: 127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4</span><br><span class=\"line\">2: ::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br><span class=\"line\">3: </span><br><span class=\"line\">4: 172.18.*.* as</span><br><span class=\"line\">5: 172.18.*.* hdp-1</span><br><span class=\"line\">6: 172.18.*.* hdp-2</span><br><span class=\"line\">7: 172.18.*.* hdp-3</span><br></pre></td></tr></table></figure>\n<h4 id=\"533-for循环实现shell数组的遍历\"><a class=\"markdownIt-Anchor\" href=\"#533-for循环实现shell数组的遍历\">#</a> 5.3.3 for 循环实现 Shell 数组的遍历</h4>\n<ul>\n<li>当一个脚本需要传入的参数较多时，可以使用 for 循环进行参数遍历。具体如下例所示。</li>\n<li>for 循环实现 Shell 数组的遍历。</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@hdp-1 shell]# cat array_host_for.sh </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">!/bin/bash</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"keyword\">for</span> array</span></span><br><span class=\"line\">OLD_IFS=$IFS</span><br><span class=\"line\">IFS=$&#x27;\\n&#x27; </span><br><span class=\"line\">for line in `cat /etc/hosts`</span><br><span class=\"line\">do</span><br><span class=\"line\">hosts[++j]=$line</span><br><span class=\"line\">done</span><br><span class=\"line\">for i in $&#123;!hosts[@]&#125;</span><br><span class=\"line\">do</span><br><span class=\"line\">\techo &quot;$i: $&#123;hosts[i]&#125;&quot;</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n<ul>\n<li>定义一个数组 hosts 以 /etc/hosts 每一行内容作为数组的元素进行遍历。</li>\n<li>执行结果如下：</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@hdp-1 shell]# ./array_host_for.sh </span><br><span class=\"line\">1: 127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4</span><br><span class=\"line\">2: ::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br><span class=\"line\">3: </span><br><span class=\"line\">4: 172.18.*.* as</span><br><span class=\"line\">5: 172.18.*.* hdp-1</span><br><span class=\"line\">6: 172.18.*.* hdp-2</span><br><span class=\"line\">7: 172.18.*.* hdp-3</span><br></pre></td></tr></table></figure>\n<h2 id=\"6-shell函数\"><a class=\"markdownIt-Anchor\" href=\"#6-shell函数\">#</a> 6 Shell 函数</h2>\n<h3 id=\"61-shell函数的概念\"><a class=\"markdownIt-Anchor\" href=\"#61-shell函数的概念\">#</a> 6.1 Shell 函数的概念</h3>\n<ul>\n<li>函数是由若干条 Shell 命令组成的语句块，实现代码重用和模块化编程，它不是一个单独的进程，不能独立运行，它只是 Shell 程序的一部分。</li>\n<li>Shell 函数和 Shell 程序比较相似，区别在于：Shell 程序在子 Shell 中运行，而 Shell 函数在当前 Shell 中运行，因此在当前 Shell 中，函数可以对 Shell 变量进行修改。</li>\n<li>函数可以提高程序的可读性和重用性。</li>\n</ul>\n<h3 id=\"62-shell函数的语法\"><a class=\"markdownIt-Anchor\" href=\"#62-shell函数的语法\">#</a> 6.2 Shell 函数的语法</h3>\n<ul>\n<li>Shell 函数的语法格式为：</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">函数名()&#123;</span><br><span class=\"line\">\t代码块</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">or</span><br><span class=\"line\">function 函数名 &#123;</span><br><span class=\"line\">\t代码块</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>关键字 function 表示定义一个函数，可以省略，其后是函数名，两个大括号之间是函数体。创建的函数可以在别的脚本中被调用。</li>\n</ul>\n<h3 id=\"63-shell函数的调用\"><a class=\"markdownIt-Anchor\" href=\"#63-shell函数的调用\">#</a> 6.3 Shell 函数的调用</h3>\n<h4 id=\"631-shell函数的传参介绍\"><a class=\"markdownIt-Anchor\" href=\"#631-shell函数的传参介绍\">#</a> 6.3.1 Shell 函数的传参介绍</h4>\n<ul>\n<li>最基本的语法格式为：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">函数名</span><br></pre></td></tr></table></figure>\n<ul>\n<li>带有参数的语法格式为：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">函数名 参数1 参数2</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Shell 的位置参数（$1、$2、…）可以作为函数的参数来使用。其中，$1 表示第一个参数，$2 表示第二个参数。</li>\n<li>当 n≥10 时，需要使用 ${n} 来获取参数。例如，获取第十个参数不能用<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>10</mn><mtext>，需要用</mtext></mrow><annotation encoding=\"application/x-tex\">10，需要用</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord cjk_fallback\">，</span><span class=\"mord cjk_fallback\">需</span><span class=\"mord cjk_fallback\">要</span><span class=\"mord cjk_fallback\">用</span></span></span></span> {10}。</li>\n</ul>\n<h3 id=\"64-shell函数的应用实战\"><a class=\"markdownIt-Anchor\" href=\"#64-shell函数的应用实战\">#</a> 6.4 Shell 函数的应用实战</h3>\n<h4 id=\"641-脚本中调用shell函数\"><a class=\"markdownIt-Anchor\" href=\"#641-脚本中调用shell函数\">#</a> 6.4.1 脚本中调用 Shell 函数</h4>\n<ul>\n<li>函数必须在使用前需要先被定义。因此，在脚本中使用函数时，必须在脚本开始前定义函数，调用函数仅使用函数名即可</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@hdp-1 shell]# ./function.sh </span><br><span class=\"line\">5的阶乘是: 120</span><br><span class=\"line\">[root@hdp-1 shell]# cat function.sh </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">!/bin/bash</span></span><br><span class=\"line\">factorial()&#123;</span><br><span class=\"line\">\tfactorial=1</span><br><span class=\"line\">\tfor((i=1;i&lt;=5;i++))</span><br><span class=\"line\">\tdo</span><br><span class=\"line\">\t\tfactorial=$[$factorial * $i]</span><br><span class=\"line\">\tdone</span><br><span class=\"line\">\techo &quot;5的阶乘是: $factorial&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">factorial</span><br></pre></td></tr></table></figure>\n<ul>\n<li>接下来使用带有可以传参调用的函数来写一个计算阶乘的脚本</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@hdp-1 shell]# ./function.sh 5</span><br><span class=\"line\">5的阶乘是: 120</span><br><span class=\"line\">[root@hdp-1 shell]# cat function.sh </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">!/bin/bash</span></span><br><span class=\"line\">factorial()&#123;</span><br><span class=\"line\">\tfactorial=1</span><br><span class=\"line\">\tfor((i=1;i&lt;=$1;i++))</span><br><span class=\"line\">\tdo</span><br><span class=\"line\">\t\tfactorial=$[$factorial * $i]</span><br><span class=\"line\">\tdone</span><br><span class=\"line\">\techo &quot;5的阶乘是: $factorial&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">factorial $1 </span><br></pre></td></tr></table></figure>\n<ul>\n<li>函数的位置参数与脚本的位置参数</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@hdp-1 shell]# ./position_func.sh 2 3 4</span><br><span class=\"line\">result is : 24</span><br><span class=\"line\">[root@hdp-1 shell]# cat position_func.sh </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">!/bin/bash</span></span><br><span class=\"line\">if [ $# -ne 3 ];then</span><br><span class=\"line\">\techo &quot;usage: `basename $0` p1 p2 p3&quot;</span><br><span class=\"line\">\texit</span><br><span class=\"line\">fi</span><br><span class=\"line\">fun()&#123;</span><br><span class=\"line\">\techo &quot;$[$1*$2*$3]&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">result</span></span><br><span class=\"line\">result=`fun $1 $2 $3`</span><br><span class=\"line\">echo &quot;result is : $result&quot;</span><br></pre></td></tr></table></figure>\n<h4 id=\"642-shell函数的返回值\"><a class=\"markdownIt-Anchor\" href=\"#642-shell函数的返回值\">#</a> 6.4.2 Shell 函数的返回值</h4>\n<ul>\n<li>函数有两种返回值，分别为执行结果的返回值和退出状态码。</li>\n<li>函数的退出状态码取决于函数中执行的最后一条命令的退出状态码。</li>\n<li>自定义退出状态码的语法格式为：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">return 0 无错误返回</span><br><span class=\"line\">return 1-255 有错误返回</span><br></pre></td></tr></table></figure>\n<ul>\n<li>退出状态码使用 return 保留字返回</li>\n<li>return 的返回值只能是 0~255 的一个整数</li>\n<li>执行结果的返回值不使用 return</li>\n<li>执行结果的返回值将保存到变量 “$?” 中</li>\n<li>函数执行结果的的返回值。</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@hdp-1 shell]# ./return.sh </span><br><span class=\"line\">Enter a Number: 3</span><br><span class=\"line\">fun2 return value: 0</span><br><span class=\"line\">[root@hdp-1 shell]# cat return.sh </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">!/bin/bash</span></span><br><span class=\"line\">fun2()&#123;</span><br><span class=\"line\">\tread -p &quot;Enter a Number: &quot; num</span><br><span class=\"line\">\tlet 2*num</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fun2</span><br><span class=\"line\">echo &quot;fun2 return value: $?&quot;</span><br></pre></td></tr></table></figure>\n<h4 id=\"643-shell函数数组变量的传参\"><a class=\"markdownIt-Anchor\" href=\"#643-shell函数数组变量的传参\">#</a> 6.4.3 Shell 函数数组变量的传参</h4>\n<ul>\n<li>向函数中传递数组</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@hdp-1 shell]# ./array_func.sh </span><br><span class=\"line\">120</span><br><span class=\"line\">[root@hdp-1 shell]# cat array_func.sh </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">!/bin/bash</span></span><br><span class=\"line\">num=(1 2 3 4 5)</span><br><span class=\"line\"></span><br><span class=\"line\">array()&#123;</span><br><span class=\"line\">\tresult=1</span><br><span class=\"line\">\tfor i in &quot;$@&quot;</span><br><span class=\"line\">\tdo</span><br><span class=\"line\">\t\tresult=$[$result*$i]</span><br><span class=\"line\">\tdone</span><br><span class=\"line\">\techo &quot;$result&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">array $&#123;num[@]&#125;</span><br></pre></td></tr></table></figure>",
            "tags": [
                "Shell"
            ]
        }
    ]
}