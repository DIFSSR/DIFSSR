{
    "version": "https://jsonfeed.org/version/1",
    "title": "千里稻花应秀色 • All posts by \"机器学习课程(魏)\" category",
    "description": "blogs by SSR",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2021/11/08/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE%E7%A8%8B(%E9%AD%8F)/KMeans/",
            "url": "http://example.com/2021/11/08/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE%E7%A8%8B(%E9%AD%8F)/KMeans/",
            "title": "KMeans",
            "date_published": "2021-11-08T07:02:54.000Z",
            "content_html": "<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> sklearn.datasets <span class=\"keyword\">import</span> make_blobs</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.cluster <span class=\"keyword\">import</span> KMeans</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#创建数据</span></span><br><span class=\"line\"><span class=\"comment\">#make_blobs 聚类生成器</span></span><br><span class=\"line\">x, y_true = make_blobs(n_samples = <span class=\"number\">1000</span>, <span class=\"comment\">#生成1000条数据</span></span><br><span class=\"line\">                       centers =<span class=\"number\">5</span>, <span class=\"comment\">#5类数据</span></span><br><span class=\"line\">                       cluster_std = <span class=\"number\">0.5</span>, <span class=\"comment\">#方差一致</span></span><br><span class=\"line\">                       random_state = <span class=\"number\">9</span>) <span class=\"comment\">#随机数种子</span></span><br><span class=\"line\"><span class=\"comment\">#x.shape #(300, 2)</span></span><br><span class=\"line\">plt.figure()</span><br><span class=\"line\">plt.scatter(x[:,<span class=\"number\">0</span>], x[:,<span class=\"number\">1</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">model = KMeans(n_clusters=<span class=\"number\">5</span>)<span class=\"comment\">#n_clusters是k</span></span><br><span class=\"line\">model.fit(x)</span><br><span class=\"line\">y_kmeans = model.predict(x)</span><br><span class=\"line\">plt.figure()</span><br><span class=\"line\">plt.scatter(x[:,<span class=\"number\">0</span>], x[:,<span class=\"number\">1</span>], c = y_kmeans, cmap=<span class=\"string\">&#x27;Dark2&#x27;</span>, s=<span class=\"number\">50</span>, alpha=<span class=\"number\">0.5</span>, marker=<span class=\"string\">&#x27;o&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">centroids = model.cluster_centers_</span><br><span class=\"line\">plt.scatter(centroids[:,<span class=\"number\">0</span>], centroids[:,<span class=\"number\">1</span>],c=[<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>],cmap=<span class=\"string\">&#x27;Dark2&#x27;</span>,s=<span class=\"number\">250</span>, marker=<span class=\"string\">&#x27;*&#x27;</span>)</span><br><span class=\"line\">plt.title(<span class=\"string\">&#x27;K-means 1000 points&#x27;</span>)</span><br><span class=\"line\">plt.xlabel(<span class=\"string\">&#x27;Value1&#x27;</span>)</span><br><span class=\"line\">plt.ylabel(<span class=\"string\">&#x27;Value2&#x27;</span>)</span><br><span class=\"line\">plt.show()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>​<br>\n<img \"\" class=\"lazyload placeholder\" data-original=\"output_1_0.png\" src=\"https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif\" alt=\"png\"><br>\n​</p>\n<p><img \"\" class=\"lazyload placeholder\" data-original=\"output_1_1.png\" src=\"https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif\" alt=\"png\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x, y_true = make_blobs(n_samples = <span class=\"number\">1000</span>, <span class=\"comment\">#生成300条数据</span></span><br><span class=\"line\">                       centers = <span class=\"number\">2</span>, <span class=\"comment\">#5类数据</span></span><br><span class=\"line\">                       cluster_std = <span class=\"number\">0.6</span>, <span class=\"comment\">#方差一致</span></span><br><span class=\"line\">                       random_state = <span class=\"number\">8</span>) <span class=\"comment\">#随机数种子</span></span><br><span class=\"line\">x.shape <span class=\"comment\">#(300, 2)</span></span><br><span class=\"line\">plt.figure()</span><br><span class=\"line\">plt.scatter(x[:,<span class=\"number\">0</span>], x[:,<span class=\"number\">1</span>],c=y_true,s=<span class=\"number\">10</span>, alpha=<span class=\"number\">0.8</span>)</span><br><span class=\"line\">model = KMeans(n_clusters =<span class=\"number\">2</span>)</span><br><span class=\"line\">model.fit(x)</span><br><span class=\"line\">xmin,xmax=x[:,<span class=\"number\">0</span>].<span class=\"built_in\">min</span>()-<span class=\"number\">1</span>,x[:,<span class=\"number\">0</span>].<span class=\"built_in\">max</span>()+<span class=\"number\">1</span></span><br><span class=\"line\">ymin,ymax=x[:,<span class=\"number\">1</span>].<span class=\"built_in\">min</span>()-<span class=\"number\">1</span>,x[:,<span class=\"number\">1</span>].<span class=\"built_in\">max</span>()+<span class=\"number\">1</span></span><br><span class=\"line\">x1,y1=np.meshgrid(np.arange(xmin,xmax,<span class=\"number\">0.1</span>),np.arange(ymin,ymax,<span class=\"number\">0.02</span>))</span><br><span class=\"line\">z=model.predict(np.c_[x1.ravel(),y1.ravel()])</span><br><span class=\"line\">z=z.reshape(x1.shape)</span><br><span class=\"line\">y_kmeans = model.predict(x)</span><br><span class=\"line\">plt.figure()</span><br><span class=\"line\">plt.pcolormesh(x1,y1,z,cmap=plt.cm.Pastel1,shading=<span class=\"string\">&#x27;auto&#x27;</span>,)</span><br><span class=\"line\">plt.scatter(x[:,<span class=\"number\">0</span>], x[:,<span class=\"number\">1</span>], c = y_kmeans, cmap=<span class=\"string\">&#x27;Dark2&#x27;</span>, s=<span class=\"number\">50</span>, alpha=<span class=\"number\">0.5</span>, marker=<span class=\"string\">&#x27;x&#x27;</span>)</span><br><span class=\"line\">centroids = model.cluster_centers_</span><br><span class=\"line\">plt.scatter(centroids[:,<span class=\"number\">0</span>], centroids[:,<span class=\"number\">1</span>],c=[<span class=\"number\">0</span>,<span class=\"number\">1</span>],cmap=<span class=\"string\">&#x27;Dark2&#x27;</span>,s=<span class=\"number\">70</span>, marker=<span class=\"string\">&#x27;o&#x27;</span>)</span><br><span class=\"line\">plt.title(<span class=\"string\">&#x27;K-means 1000 points&#x27;</span>)</span><br><span class=\"line\">plt.xlabel(<span class=\"string\">&#x27;Value1&#x27;</span>)</span><br><span class=\"line\">plt.ylabel(<span class=\"string\">&#x27;Value2&#x27;</span>)</span><br><span class=\"line\">plt.show()</span><br><span class=\"line\">n=<span class=\"number\">10</span></span><br><span class=\"line\">dis=np.zeros([n,n])</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n):</span><br><span class=\"line\">    distances = np.sqrt(np.<span class=\"built_in\">sum</span>(np.asarray(centroids[i,:] - centroids)**<span class=\"number\">2</span>, axis=<span class=\"number\">1</span>))</span><br><span class=\"line\">    dis[i,:]=distances</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>​<br>\n<img \"\" class=\"lazyload placeholder\" data-original=\"output_2_0.png\" src=\"https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif\" alt=\"png\"><br>\n​</p>\n<p><img \"\" class=\"lazyload placeholder\" data-original=\"output_2_1.png\" src=\"https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif\" alt=\"png\"></p>\n<pre><code>---------------------------------------------------------------------------\n\nValueError                                Traceback (most recent call last)\n\n&lt;ipython-input-6-73969d6b1829&gt; in &lt;module&gt;\n     27 for i in range(n):\n     28     distances = np.sqrt(np.sum(np.asarray(centroids[i,:] - centroids)**2, axis=1))\n---&gt; 29     dis[i,:]=distances\n\n\nValueError: could not broadcast input array from shape (2) into shape (10)\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "机器学习"
            ]
        },
        {
            "id": "http://example.com/2021/11/08/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE%E7%A8%8B(%E9%AD%8F)/KNN/",
            "url": "http://example.com/2021/11/08/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE%E7%A8%8B(%E9%AD%8F)/KNN/",
            "title": "KNN",
            "date_published": "2021-11-08T07:02:54.000Z",
            "content_html": "<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> sklearn.datasets <span class=\"keyword\">import</span> make_blobs <span class=\"comment\">#调用生成数据函数</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.neighbors <span class=\"keyword\">import</span> KNeighborsClassifier <span class=\"comment\">#调用KNN分类器函数</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">from</span> scipy.io <span class=\"keyword\">import</span> loadmat</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data=make_blobs(n_samples=<span class=\"number\">1000</span>,n_features=<span class=\"number\">2</span>,centers=<span class=\"number\">5</span>,random_state=<span class=\"number\">1</span>)<span class=\"comment\">#生成数据</span></span><br><span class=\"line\">x,y=data  <span class=\"comment\">#x获取数据的横轴和纵轴坐标，y获取数据的类别(标签)</span></span><br><span class=\"line\">plt.figure()<span class=\"comment\">#产生一个画布</span></span><br><span class=\"line\">plt.scatter(x[:,<span class=\"number\">0</span>],x[:,<span class=\"number\">1</span>],c=y,cmap=plt.cm.spring,edgecolor=<span class=\"string\">&#x27;k&#x27;</span>)<span class=\"comment\">#x[:,0]数据的横轴、x[:,1]数据的纵轴</span></span><br><span class=\"line\">                    <span class=\"comment\">#c:颜色；cm.spring数据点的可视化风格；edgecolor数据点的边界颜色。</span></span><br><span class=\"line\">model=KNeighborsClassifier()<span class=\"comment\">#生成一个初始化的knn分类器模型</span></span><br><span class=\"line\">model.fit(x,y)<span class=\"comment\">#对初始化的knn分类器进行训练（用现有的训练样本进行训练）</span></span><br><span class=\"line\"></span><br><span class=\"line\">xmin,xmax=x[:,<span class=\"number\">0</span>].<span class=\"built_in\">min</span>()-<span class=\"number\">1</span>,x[:,<span class=\"number\">0</span>].<span class=\"built_in\">max</span>()+<span class=\"number\">1</span><span class=\"comment\">#获取训练样本横轴坐标的最小值和最大值</span></span><br><span class=\"line\">ymin,ymax=x[:,<span class=\"number\">1</span>].<span class=\"built_in\">min</span>()-<span class=\"number\">1</span>,x[:,<span class=\"number\">1</span>].<span class=\"built_in\">max</span>()+<span class=\"number\">1</span><span class=\"comment\">#获取训练样本纵轴坐标的最小值和最大值</span></span><br><span class=\"line\">x1,y1=np.meshgrid(np.arange(xmin,xmax,<span class=\"number\">0.02</span>),np.arange(ymin,ymax,<span class=\"number\">0.02</span>))</span><br><span class=\"line\"><span class=\"comment\">#对整个训练样本数据的分布空间进行网格化</span></span><br><span class=\"line\">z=model.predict(np.c_[x1.ravel(),y1.ravel()])<span class=\"comment\">#对空间数据进行分类</span></span><br><span class=\"line\">z=z.reshape(x1.shape)<span class=\"comment\">#对分类后的数据进行变形（从一维变到二维）</span></span><br><span class=\"line\">plt.figure()<span class=\"comment\">#产生一个画布</span></span><br><span class=\"line\">plt.pcolormesh(x1,y1,z,cmap=plt.cm.Pastel1)</span><br><span class=\"line\">plt.scatter(x[:,<span class=\"number\">0</span>],x[:,<span class=\"number\">1</span>],c=y,cmap=plt.cm.spring,edgecolor=<span class=\"string\">&#x27;k&#x27;</span>)</span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n<pre><code>c:\\users\\administrator\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\ipykernel_launcher.py:16: MatplotlibDeprecationWarning: shading='flat' when X and Y have the same dimensions as C is deprecated since 3.3.  Either specify the corners of the quadrilaterals with X and Y, or pass shading='auto', 'nearest' or 'gouraud', or set rcParams['pcolor.shading'].  This will become an error two minor releases later.\n  app.launch_new_instance()\n</code></pre>\n<p><img \"\" class=\"lazyload placeholder\" data-original=\"output_1_1.png\" src=\"https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif\" alt=\"png\"></p>\n<p><img \"\" class=\"lazyload placeholder\" data-original=\"output_1_2.png\" src=\"https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif\" alt=\"png\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mnist=loadmat(<span class=\"string\">&#x27;mnist-original.mat&#x27;</span>)</span><br><span class=\"line\">x,y=mnist[<span class=\"string\">&quot;data&quot;</span>],mnist[<span class=\"string\">&quot;label&quot;</span>]</span><br><span class=\"line\">x=x.T</span><br><span class=\"line\">y=y[<span class=\"number\">0</span>]</span><br><span class=\"line\">some_digit=x[<span class=\"number\">69000</span>]</span><br><span class=\"line\">x_train=x[:<span class=\"number\">60000</span>]</span><br><span class=\"line\">y_train=y[:<span class=\"number\">60000</span>]</span><br><span class=\"line\">model=KNeighborsClassifier()</span><br><span class=\"line\">model.fit(x_train,y_train)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(model.predict([some_digit]))</span><br></pre></td></tr></table></figure>\n<pre><code>[9.]\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "机器学习"
            ]
        },
        {
            "id": "http://example.com/2021/11/08/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE%E7%A8%8B(%E9%AD%8F)/SVM/",
            "url": "http://example.com/2021/11/08/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE%E7%A8%8B(%E9%AD%8F)/SVM/",
            "title": "SVM",
            "date_published": "2021-11-08T07:02:54.000Z",
            "content_html": "<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"><span class=\"keyword\">from</span> mpl_toolkits.mplot3d <span class=\"keyword\">import</span> Axes3D</span><br><span class=\"line\"> </span><br><span class=\"line\">xs=np.arange(-<span class=\"number\">5</span>,<span class=\"number\">5</span>,<span class=\"number\">0.2</span>)</span><br><span class=\"line\">ys1=np.sqrt(<span class=\"number\">25</span>-xs*xs)+np.random.uniform(-<span class=\"number\">0.5</span>,<span class=\"number\">0.5</span>,(xs.shape[<span class=\"number\">0</span>]))</span><br><span class=\"line\">ys2=-<span class=\"number\">1</span>*np.sqrt(<span class=\"number\">25</span>-xs*xs)+np.random.uniform(-<span class=\"number\">0.5</span>,<span class=\"number\">0.5</span>,(xs.shape[<span class=\"number\">0</span>]))</span><br><span class=\"line\"></span><br><span class=\"line\">xys1=np.c_[xs,ys1]</span><br><span class=\"line\"></span><br><span class=\"line\">xys2=np.c_[xs,ys2]</span><br><span class=\"line\"></span><br><span class=\"line\">xy1=np.r_[xys1,xys2]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">xh=np.arange(-<span class=\"number\">8</span>,<span class=\"number\">8</span>,<span class=\"number\">0.2</span>)</span><br><span class=\"line\">yh1=np.sqrt(<span class=\"number\">64</span>-xh*xh)+np.random.uniform(-<span class=\"number\">0.5</span>,<span class=\"number\">0.5</span>,(xh.shape[<span class=\"number\">0</span>]))</span><br><span class=\"line\">yh2=-<span class=\"number\">1</span>*np.sqrt(<span class=\"number\">64</span>-xh*xh)+np.random.uniform(-<span class=\"number\">0.5</span>,<span class=\"number\">0.5</span>,(xh.shape[<span class=\"number\">0</span>]))</span><br><span class=\"line\"></span><br><span class=\"line\">xyh1=np.c_[xh,yh1]</span><br><span class=\"line\"></span><br><span class=\"line\">xyh2=np.c_[xh,yh2]</span><br><span class=\"line\"></span><br><span class=\"line\">xy2=np.r_[xyh1,xyh2]</span><br><span class=\"line\"></span><br><span class=\"line\">xy3=np.r_[xy1,xy2]</span><br><span class=\"line\">plt.figure()</span><br><span class=\"line\"></span><br><span class=\"line\">plt.scatter(xy3[<span class=\"number\">0</span>:<span class=\"number\">100</span>,<span class=\"number\">0</span>],xy3[<span class=\"number\">0</span>:<span class=\"number\">100</span>,<span class=\"number\">1</span>],c=<span class=\"string\">&#x27;k&#x27;</span>,marker=<span class=\"string\">&#x27;*&#x27;</span>)</span><br><span class=\"line\">plt.scatter(xy3[<span class=\"number\">100</span>:,<span class=\"number\">0</span>],xy3[<span class=\"number\">100</span>:,<span class=\"number\">1</span>],c=<span class=\"string\">&#x27;r&#x27;</span>,marker=<span class=\"string\">&#x27;o&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">fig=plt.figure()</span><br><span class=\"line\">ax=Axes3D(fig)</span><br><span class=\"line\"></span><br><span class=\"line\">z1=xy3[:,<span class=\"number\">0</span>]**<span class=\"number\">2</span></span><br><span class=\"line\">z2=xy3[:,<span class=\"number\">1</span>]**<span class=\"number\">2</span></span><br><span class=\"line\">z3=xy3[:,<span class=\"number\">1</span>]</span><br><span class=\"line\">ax.scatter(z1[<span class=\"number\">0</span>:<span class=\"number\">100</span>],z2[<span class=\"number\">0</span>:<span class=\"number\">100</span>],z3[<span class=\"number\">0</span>:<span class=\"number\">100</span>],c=<span class=\"string\">&#x27;k&#x27;</span>,marker=<span class=\"string\">&#x27;*&#x27;</span>)</span><br><span class=\"line\">ax.scatter(z1[<span class=\"number\">100</span>:],z2[<span class=\"number\">100</span>:],z3[<span class=\"number\">100</span>:],c=<span class=\"string\">&#x27;r&#x27;</span>,marker=<span class=\"string\">&#x27;o&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">plt.show()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<pre><code>c:\\users\\administrator\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\ipykernel_launcher.py:34: MatplotlibDeprecationWarning: Axes3D(fig) adding itself to the figure is deprecated since 3.4. Pass the keyword argument auto_add_to_figure=False and use fig.add_axes(ax) to suppress this warning. The default value of auto_add_to_figure will change to False in mpl3.5 and True values will no longer work in 3.6.  This is consistent with other Axes classes.\n</code></pre>\n<p><img \"\" class=\"lazyload placeholder\" data-original=\"output_0_1.png\" src=\"https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif\" alt=\"png\"></p>\n<p><img \"\" class=\"lazyload placeholder\" data-original=\"output_0_2.png\" src=\"https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif\" alt=\"png\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.datasets <span class=\"keyword\">import</span> make_moons</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn <span class=\"keyword\">import</span> svm</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.model_selection <span class=\"keyword\">import</span> cross_val_score <span class=\"keyword\">as</span> cr<span class=\"comment\">#调用交叉检验函数</span></span><br><span class=\"line\">n_samples = <span class=\"number\">600</span></span><br><span class=\"line\">x,y=make_moons(n_samples=n_samples, noise=<span class=\"number\">0.1</span>,random_state=<span class=\"number\">3</span>)</span><br><span class=\"line\">clf=svm.SVC(kernel=<span class=\"string\">&#x27;rbf&#x27;</span>,gamma=<span class=\"number\">0.5</span>,C=<span class=\"number\">100</span>)<span class=\"comment\">#poly代表分类线是曲线，degree是曲线的最高次幂</span></span><br><span class=\"line\">clf.fit(x,y)</span><br><span class=\"line\"><span class=\"comment\">#clf.predict([x])</span></span><br><span class=\"line\">xmin,xmax=x[:,<span class=\"number\">0</span>].<span class=\"built_in\">min</span>()-<span class=\"number\">1</span>,x[:,<span class=\"number\">0</span>].<span class=\"built_in\">max</span>()+<span class=\"number\">1</span></span><br><span class=\"line\">ymin,ymax=x[:,<span class=\"number\">1</span>].<span class=\"built_in\">min</span>()-<span class=\"number\">1</span>,x[:,<span class=\"number\">1</span>].<span class=\"built_in\">max</span>()+<span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">xx,yy=np.meshgrid(np.arange(xmin,xmax,<span class=\"number\">0.02</span>),np.arange(ymin,ymax,<span class=\"number\">0.02</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">xf=np.c_[xx.ravel(),yy.ravel()];</span><br><span class=\"line\">z=clf.predict(xf)</span><br><span class=\"line\">z=z.reshape(xx.shape)</span><br><span class=\"line\">plt.pcolormesh(xx,yy,z,cmap=plt.cm.Pastel1)</span><br><span class=\"line\">plt.scatter(x[:,<span class=\"number\">0</span>],x[:,<span class=\"number\">1</span>],c=y)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(cr(clf,x,y,cv=<span class=\"number\">5</span>,scoring=<span class=\"string\">&quot;accuracy&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">plt.show()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<pre><code>[1.         0.99166667 1.         1.         1.        ]\n\n\nc:\\users\\administrator\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\ipykernel_launcher.py:20: MatplotlibDeprecationWarning: shading='flat' when X and Y have the same dimensions as C is deprecated since 3.3.  Either specify the corners of the quadrilaterals with X and Y, or pass shading='auto', 'nearest' or 'gouraud', or set rcParams['pcolor.shading'].  This will become an error two minor releases later.\n</code></pre>\n<p><img \"\" class=\"lazyload placeholder\" data-original=\"output_1_2.png\" src=\"https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif\" alt=\"png\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "机器学习"
            ]
        },
        {
            "id": "http://example.com/2021/11/08/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE%E7%A8%8B(%E9%AD%8F)/%E4%B8%BB%E6%88%90%E5%88%86%E5%88%86%E6%9E%90/",
            "url": "http://example.com/2021/11/08/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE%E7%A8%8B(%E9%AD%8F)/%E4%B8%BB%E6%88%90%E5%88%86%E5%88%86%E6%9E%90/",
            "title": "主成分分析",
            "date_published": "2021-11-08T07:02:54.000Z",
            "content_html": "<h3 id=\"对数据降维后使用knn算法进行分类的案例\"><a class=\"markdownIt-Anchor\" href=\"#对数据降维后使用knn算法进行分类的案例\">#</a> 对数据降维后使用 KNN 算法进行分类的案例</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> scipy.io <span class=\"keyword\">import</span> loadmat</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.neighbors <span class=\"keyword\">import</span> KNeighborsClassifier</span><br><span class=\"line\"><span class=\"keyword\">import</span> pickle</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.decomposition <span class=\"keyword\">import</span> PCA</span><br><span class=\"line\">mnist=loadmat(<span class=\"string\">&#x27;mnist-original.mat&#x27;</span>)<span class=\"comment\">#获取原始数据</span></span><br><span class=\"line\">x,y=mnist[<span class=\"string\">&quot;data&quot;</span>],mnist[<span class=\"string\">&quot;label&quot;</span>]<span class=\"comment\">#分别获取原始数据的数据描述和数据标签</span></span><br><span class=\"line\">x=x.T<span class=\"comment\">#对原始数据描述进行转转置</span></span><br><span class=\"line\">y=y[<span class=\"number\">0</span>]</span><br><span class=\"line\">pca=PCA()<span class=\"comment\">#建立PCA模型</span></span><br><span class=\"line\">pca.fit(x)<span class=\"comment\">#通过PCA（主成分分析）对原始数据进行主成分分析,得到特征值和特征向量</span></span><br><span class=\"line\">cumsum=np.cumsum(pca.explained_variance_ratio_)<span class=\"comment\">#对特征值进行排序（从大到小进行排序），计算特征值的累计贡献率</span></span><br><span class=\"line\">d=np.argmax(cumsum&gt;=<span class=\"number\">0.95</span>)+<span class=\"number\">1</span> <span class=\"comment\">#设定一个累计贡献率的阈值，阈值为0.95，d是累计贡献率达到0.95的特征值的数量，d=154</span></span><br><span class=\"line\">pca=PCA(n_components=d)<span class=\"comment\">#对原始数据进行降维，从784维降到154维</span></span><br><span class=\"line\">x1=pca.fit_transform(x)<span class=\"comment\">#x1是降维之后的数据</span></span><br><span class=\"line\">x_train=x1[:<span class=\"number\">60000</span>]<span class=\"comment\">#选择训练数据，原始数据有70000条，我们选择前60000作为训练样本，x_train代表前60000个样本的数据描述</span></span><br><span class=\"line\">y_train=y[:<span class=\"number\">60000</span>]<span class=\"comment\">#前60000个样本的标签</span></span><br><span class=\"line\">shuffle_index=np.random.permutation(<span class=\"number\">60000</span>)<span class=\"comment\">#对前60000个数据打乱顺序</span></span><br><span class=\"line\">x_train=x_train[shuffle_index]</span><br><span class=\"line\">y_train=y_train[shuffle_index]</span><br><span class=\"line\">sgd_clf=KNeighborsClassifier()<span class=\"comment\">#调用KNN分类器</span></span><br><span class=\"line\">sgd_clf.fit(x_train,y_train)<span class=\"comment\">#建立KNN分类器模型</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(d)</span><br><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;clf.pickle&#x27;</span>, <span class=\"string\">&#x27;wb&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    pickle.dump(sgd_clf, f)</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<pre><code>154\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> scipy.io <span class=\"keyword\">import</span> loadmat</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> pickle</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.decomposition <span class=\"keyword\">import</span> PCA</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.metrics <span class=\"keyword\">import</span> accuracy_score</span><br><span class=\"line\"></span><br><span class=\"line\">mnist=loadmat(<span class=\"string\">&#x27;mnist-original.mat&#x27;</span>)</span><br><span class=\"line\">x,y=mnist[<span class=\"string\">&quot;data&quot;</span>],mnist[<span class=\"string\">&quot;label&quot;</span>]</span><br><span class=\"line\">x=x.T</span><br><span class=\"line\">y=y[<span class=\"number\">0</span>]</span><br><span class=\"line\">pca=PCA(n_components=<span class=\"number\">154</span>)</span><br><span class=\"line\">x1=pca.fit_transform(x)</span><br><span class=\"line\">some_digit=x1[<span class=\"number\">66000</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">x_test=x[<span class=\"number\">60000</span>:]</span><br><span class=\"line\">y_test=y[<span class=\"number\">60000</span>:]</span><br><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;clf.pickle&#x27;</span>, <span class=\"string\">&#x27;rb&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    clf2 = pickle.load(f)</span><br><span class=\"line\">y_pred = clf2.predict(x1[<span class=\"number\">60000</span>:])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(accuracy_score(y[<span class=\"number\">60000</span>:], y_pred))</span><br></pre></td></tr></table></figure>\n<pre><code>0.9719\n</code></pre>\n<h3 id=\"lle\"><a class=\"markdownIt-Anchor\" href=\"#lle\">#</a> LLE</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"><span class=\"keyword\">from</span> mpl_toolkits.mplot3d <span class=\"keyword\">import</span> Axes3D</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.manifold <span class=\"keyword\">import</span> LocallyLinearEmbedding</span><br><span class=\"line\"></span><br><span class=\"line\">N=<span class=\"number\">2000</span></span><br><span class=\"line\">angle=np.pi*(<span class=\"number\">1.5</span>*np.random.random(<span class=\"built_in\">int</span>(N/<span class=\"number\">2</span>))-<span class=\"number\">1</span>)</span><br><span class=\"line\">height=<span class=\"number\">5</span>*np.random.random(N)</span><br><span class=\"line\">x=np.array([np.append(np.cos(angle),-<span class=\"number\">1</span>*np.cos(angle)),height,np.append(np.sin(angle),<span class=\"number\">2</span>-np.sin(angle))])</span><br><span class=\"line\">x=x.T</span><br><span class=\"line\">fig=plt.figure()</span><br><span class=\"line\">ax=Axes3D(fig)</span><br><span class=\"line\">ax.scatter(x[:,<span class=\"number\">0</span>],x[:,<span class=\"number\">1</span>],x[:,<span class=\"number\">2</span>])</span><br><span class=\"line\">lle=LocallyLinearEmbedding(n_components=<span class=\"number\">2</span>,n_neighbors=<span class=\"number\">12</span>)<span class=\"comment\">#n_neighbors不能太小，也不能太大</span></span><br><span class=\"line\"><span class=\"comment\">#如果太小结果不理想，如果太大，则效果接近于PCA（主成分分析），原论文推荐是12</span></span><br><span class=\"line\">x2d=lle.fit_transform(x)</span><br><span class=\"line\">plt.figure()</span><br><span class=\"line\">plt.plot(x2d[:,<span class=\"number\">0</span>],x2d[:,<span class=\"number\">1</span>],<span class=\"string\">&#x27;k.&#x27;</span>)</span><br><span class=\"line\">plt.show()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<pre><code>c:\\users\\administrator\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\ipykernel_launcher.py:12: MatplotlibDeprecationWarning: Axes3D(fig) adding itself to the figure is deprecated since 3.4. Pass the keyword argument auto_add_to_figure=False and use fig.add_axes(ax) to suppress this warning. The default value of auto_add_to_figure will change to False in mpl3.5 and True values will no longer work in 3.6.  This is consistent with other Axes classes.\n  if sys.path[0] == '':\n</code></pre>\n<p><img \"\" class=\"lazyload placeholder\" data-original=\"output_4_1.png\" src=\"https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif\" alt=\"png\"></p>\n<p><img \"\" class=\"lazyload placeholder\" data-original=\"output_4_2.png\" src=\"https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif\" alt=\"png\"></p>\n",
            "tags": [
                "机器学习"
            ]
        },
        {
            "id": "http://example.com/2021/11/08/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE%E7%A8%8B(%E9%AD%8F)/%E5%86%B3%E7%AD%96%E6%A0%91/",
            "url": "http://example.com/2021/11/08/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE%E7%A8%8B(%E9%AD%8F)/%E5%86%B3%E7%AD%96%E6%A0%91/",
            "title": "决策树",
            "date_published": "2021-11-08T07:02:54.000Z",
            "content_html": "<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">from</span> scipy.io <span class=\"keyword\">import</span> loadmat</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.tree <span class=\"keyword\">import</span> DecisionTreeClassifier</span><br><span class=\"line\"></span><br><span class=\"line\">mnist=loadmat(<span class=\"string\">&#x27;mnist-original.mat&#x27;</span>)</span><br><span class=\"line\">x,y=mnist[<span class=\"string\">&quot;data&quot;</span>],mnist[<span class=\"string\">&quot;label&quot;</span>]</span><br><span class=\"line\">x=x.T</span><br><span class=\"line\">y=y[<span class=\"number\">0</span>]</span><br><span class=\"line\">some_digit=x[<span class=\"number\">68888</span>]</span><br><span class=\"line\">x_train=x[:<span class=\"number\">60000</span>]</span><br><span class=\"line\">y_train=y[:<span class=\"number\">60000</span>]</span><br><span class=\"line\">model=DecisionTreeClassifier(max_depth=<span class=\"number\">10</span>)</span><br><span class=\"line\">model.fit(x_train,y_train)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(model.predict([some_digit]))</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<pre><code>[8.]\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.datasets <span class=\"keyword\">import</span> make_moons</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.model_selection <span class=\"keyword\">import</span> cross_val_score <span class=\"keyword\">as</span> cr<span class=\"comment\">#调用交叉检验函数</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.tree <span class=\"keyword\">import</span> DecisionTreeClassifier</span><br><span class=\"line\">n_samples = <span class=\"number\">600</span></span><br><span class=\"line\">x,y=make_moons(n_samples=n_samples, noise=<span class=\"number\">.1</span>,random_state=<span class=\"number\">8</span>)</span><br><span class=\"line\">model=DecisionTreeClassifier(criterion=<span class=\"string\">&#x27;gini&#x27;</span>,max_depth=<span class=\"number\">15</span>)</span><br><span class=\"line\">model.fit(x,y)</span><br><span class=\"line\"><span class=\"comment\">#clf.predict([x])</span></span><br><span class=\"line\">xmin,xmax=x[:,<span class=\"number\">0</span>].<span class=\"built_in\">min</span>()-<span class=\"number\">1</span>,x[:,<span class=\"number\">0</span>].<span class=\"built_in\">max</span>()+<span class=\"number\">1</span></span><br><span class=\"line\">ymin,ymax=x[:,<span class=\"number\">1</span>].<span class=\"built_in\">min</span>()-<span class=\"number\">1</span>,x[:,<span class=\"number\">1</span>].<span class=\"built_in\">max</span>()+<span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">xx,yy=np.meshgrid(np.arange(xmin,xmax,<span class=\"number\">0.02</span>),np.arange(ymin,ymax,<span class=\"number\">0.02</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">xf=np.c_[xx.ravel(),yy.ravel()];</span><br><span class=\"line\">z=model.predict(xf)</span><br><span class=\"line\">z=z.reshape(xx.shape)</span><br><span class=\"line\">plt.pcolormesh(xx,yy,z,cmap=plt.cm.Pastel1)</span><br><span class=\"line\">plt.scatter(x[:,<span class=\"number\">0</span>],x[:,<span class=\"number\">1</span>],c=y)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(cr(model,x,y,cv=<span class=\"number\">5</span>,scoring=<span class=\"string\">&quot;accuracy&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">plt.show()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<pre><code>[0.99166667 1.         0.98333333 0.98333333 0.98333333]\n\n\nc:\\users\\administrator\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\ipykernel_launcher.py:19: MatplotlibDeprecationWarning: shading='flat' when X and Y have the same dimensions as C is deprecated since 3.3.  Either specify the corners of the quadrilaterals with X and Y, or pass shading='auto', 'nearest' or 'gouraud', or set rcParams['pcolor.shading'].  This will become an error two minor releases later.\n</code></pre>\n<p><img \"\" class=\"lazyload placeholder\" data-original=\"output_1_2.png\" src=\"https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif\" alt=\"png\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> sklearn.datasets <span class=\"keyword\">import</span> load_iris</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.tree <span class=\"keyword\">import</span> DecisionTreeClassifier</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.tree <span class=\"keyword\">import</span> export_graphviz</span><br><span class=\"line\"></span><br><span class=\"line\">iris = load_iris()</span><br><span class=\"line\">X = iris.data[:, <span class=\"number\">2</span>:] <span class=\"comment\"># petal length and width</span></span><br><span class=\"line\">y = iris.target</span><br><span class=\"line\">tree_clf = DecisionTreeClassifier(max_depth=<span class=\"number\">3</span>)</span><br><span class=\"line\">tree_clf.fit(X, y)</span><br><span class=\"line\"></span><br><span class=\"line\">export_graphviz(</span><br><span class=\"line\">  tree_clf,</span><br><span class=\"line\">  out_file=<span class=\"string\">&quot;tree.dot&quot;</span>,</span><br><span class=\"line\">  feature_names=iris.feature_names[<span class=\"number\">2</span>:],</span><br><span class=\"line\">  class_names=iris.target_names,</span><br><span class=\"line\">  rounded=<span class=\"literal\">True</span>,</span><br><span class=\"line\">  filled=<span class=\"literal\">True</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "机器学习"
            ]
        },
        {
            "id": "http://example.com/2021/11/08/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE%E7%A8%8B(%E9%AD%8F)/%E6%8B%9F%E5%90%88/",
            "url": "http://example.com/2021/11/08/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE%E7%A8%8B(%E9%AD%8F)/%E6%8B%9F%E5%90%88/",
            "title": "拟合",
            "date_published": "2021-11-08T07:02:54.000Z",
            "content_html": "<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy.linalg <span class=\"keyword\">as</span> lg</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.linear_model <span class=\"keyword\">import</span> LinearRegression</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.preprocessing <span class=\"keyword\">import</span> PolynomialFeatures <span class=\"keyword\">as</span> pl</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x=np.linspace(-<span class=\"number\">20</span>,<span class=\"number\">20</span>,<span class=\"number\">50</span>)</span><br><span class=\"line\">y=<span class=\"number\">2</span>*x+<span class=\"number\">0.2</span>*x**<span class=\"number\">2</span>+<span class=\"number\">1</span>+np.random.uniform(-<span class=\"number\">5</span>,<span class=\"number\">5</span>,x.shape)</span><br><span class=\"line\">plt.figure</span><br><span class=\"line\">plt.plot(x,y,<span class=\"string\">&#x27;k*&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">A=np.c_[x**<span class=\"number\">2</span>,x,np.ones(x.shape)]</span><br><span class=\"line\">B=y.reshape(y.shape[<span class=\"number\">0</span>],<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">eta=<span class=\"number\">0.00001</span></span><br><span class=\"line\">n=<span class=\"number\">10000</span></span><br><span class=\"line\">m=x.shape[<span class=\"number\">0</span>]</span><br><span class=\"line\">arf=np.random.randn(<span class=\"number\">3</span>,<span class=\"number\">1</span>)*<span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n):</span><br><span class=\"line\">    gradients=<span class=\"number\">2</span>/m*A.T.dot(A.dot(arf)-B)</span><br><span class=\"line\">    arf=arf-eta*gradients</span><br><span class=\"line\"></span><br><span class=\"line\">w=lg.inv(A.T.dot(A)).dot(A.T).dot(y)</span><br><span class=\"line\"></span><br><span class=\"line\">plt.plot(x,x**<span class=\"number\">2</span>*arf[<span class=\"number\">0</span>]+x*arf[<span class=\"number\">1</span>]+arf[<span class=\"number\">2</span>])</span><br><span class=\"line\">plt.show()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>​<br>\n<img \"\" class=\"lazyload placeholder\" data-original=\"output_1_0.png\" src=\"https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif\" alt=\"png\"><br>\n​</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">t=np.arange(<span class=\"number\">1</span>,<span class=\"number\">17</span>,<span class=\"number\">1</span>)</span><br><span class=\"line\">y=np.array([<span class=\"number\">4</span>,<span class=\"number\">6.4</span>,<span class=\"number\">8</span>,<span class=\"number\">8.8</span>,<span class=\"number\">9.22</span>,<span class=\"number\">9.5</span>,<span class=\"number\">9.7</span>,<span class=\"number\">9.86</span>,<span class=\"number\">10</span>,<span class=\"number\">10.20</span>,<span class=\"number\">10.32</span>,<span class=\"number\">10.42</span>,<span class=\"number\">10.5</span>,<span class=\"number\">10.55</span>,<span class=\"number\">10.58</span>,<span class=\"number\">10.6</span></span><br><span class=\"line\">])</span><br><span class=\"line\">plt.figure()</span><br><span class=\"line\">plt.plot(t,y,<span class=\"string\">&#x27;k*&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># y=at^2+bt+c</span></span><br><span class=\"line\"></span><br><span class=\"line\">A=np.c_[t**<span class=\"number\">2</span>,t,np.ones(t.shape)]</span><br><span class=\"line\"></span><br><span class=\"line\">w=lg.inv(A.T.dot(A)).dot(A.T).dot(y)</span><br><span class=\"line\"></span><br><span class=\"line\">plt.plot(t,w[<span class=\"number\">0</span>]*t**<span class=\"number\">2</span>+w[<span class=\"number\">1</span>]*t+w[<span class=\"number\">2</span>])</span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n<p>​<br>\n<img \"\" class=\"lazyload placeholder\" data-original=\"output_2_0.png\" src=\"https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif\" alt=\"png\"><br>\n​</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">t=np.arange(<span class=\"number\">1</span>,<span class=\"number\">17</span>,<span class=\"number\">1</span>)</span><br><span class=\"line\">t=t.reshape(-<span class=\"number\">1</span>,<span class=\"number\">1</span>)</span><br><span class=\"line\">y=np.array([<span class=\"number\">4</span>,<span class=\"number\">6.4</span>,<span class=\"number\">8</span>,<span class=\"number\">8.8</span>,<span class=\"number\">9.22</span>,<span class=\"number\">9.5</span>,<span class=\"number\">9.7</span>,<span class=\"number\">9.86</span>,<span class=\"number\">10</span>,<span class=\"number\">10.20</span>,<span class=\"number\">10.32</span>,<span class=\"number\">10.42</span>,<span class=\"number\">10.5</span>,<span class=\"number\">10.55</span>,<span class=\"number\">10.58</span>,<span class=\"number\">10.6</span></span><br><span class=\"line\">])</span><br><span class=\"line\">plt.figure()</span><br><span class=\"line\">plt.plot(t,y,<span class=\"string\">&#x27;k*&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\"># y=at^2+bt+c</span></span><br><span class=\"line\"></span><br><span class=\"line\">lin_reg=LinearRegression()</span><br><span class=\"line\">lin_reg.fit(t,y)</span><br><span class=\"line\">plt.plot(t,lin_reg.predict(t).reshape(-<span class=\"number\">1</span>,<span class=\"number\">1</span>))</span><br><span class=\"line\">plt.show()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>​<br>\n<img \"\" class=\"lazyload placeholder\" data-original=\"output_3_0.png\" src=\"https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif\" alt=\"png\"><br>\n​</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">t=np.arange(<span class=\"number\">1</span>,<span class=\"number\">17</span>,<span class=\"number\">1</span>)</span><br><span class=\"line\">t=t.reshape(-<span class=\"number\">1</span>,<span class=\"number\">1</span>)</span><br><span class=\"line\">y=np.array([<span class=\"number\">4</span>,<span class=\"number\">6.4</span>,<span class=\"number\">8</span>,<span class=\"number\">8.8</span>,<span class=\"number\">9.22</span>,<span class=\"number\">9.5</span>,<span class=\"number\">9.7</span>,<span class=\"number\">9.86</span>,<span class=\"number\">10</span>,<span class=\"number\">10.20</span>,<span class=\"number\">10.32</span>,<span class=\"number\">10.42</span>,<span class=\"number\">10.5</span>,<span class=\"number\">10.55</span>,<span class=\"number\">10.58</span>,<span class=\"number\">10.6</span>])</span><br><span class=\"line\">plt.figure()</span><br><span class=\"line\">plt.plot(t,y,<span class=\"string\">&#x27;k*&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># y=at^2+bt+c</span></span><br><span class=\"line\"></span><br><span class=\"line\">poly_features=pl(degree=<span class=\"number\">2</span>,include_bias=<span class=\"literal\">False</span>)</span><br><span class=\"line\">x_poly=poly_features.fit_transform(t)</span><br><span class=\"line\">lin_reg=LinearRegression()</span><br><span class=\"line\">lin_reg.fit(x_poly,y)</span><br><span class=\"line\">plt.plot(t,lin_reg.coef_[<span class=\"number\">1</span>]*t**<span class=\"number\">2</span>+lin_reg.coef_[<span class=\"number\">0</span>]*t+lin_reg.intercept_)</span><br><span class=\"line\">plt.show()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>​<br>\n<img \"\" class=\"lazyload placeholder\" data-original=\"output_4_0.png\" src=\"https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif\" alt=\"png\"><br>\n​</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "机器学习"
            ]
        },
        {
            "id": "http://example.com/2021/11/08/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE%E7%A8%8B(%E9%AD%8F)/%E6%9C%B4%E7%B4%A0%E8%B4%9D%E5%8F%B6%E6%96%AF/",
            "url": "http://example.com/2021/11/08/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE%E7%A8%8B(%E9%AD%8F)/%E6%9C%B4%E7%B4%A0%E8%B4%9D%E5%8F%B6%E6%96%AF/",
            "title": "朴素贝叶斯",
            "date_published": "2021-11-08T07:02:54.000Z",
            "content_html": "<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> scipy.io <span class=\"keyword\">import</span> loadmat</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.naive_bayes <span class=\"keyword\">import</span> BernoulliNB <span class=\"comment\">#伯努利分布,适用于离散型数据</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.naive_bayes <span class=\"keyword\">import</span> GaussianNB <span class=\"comment\">#高斯分布，适用于连续型数据</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.naive_bayes <span class=\"keyword\">import</span> MultinomialNB <span class=\"comment\">#多项式分布</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.model_selection <span class=\"keyword\">import</span> train_test_split</span><br><span class=\"line\"></span><br><span class=\"line\">mnist=loadmat(<span class=\"string\">&#x27;mnist-original.mat&#x27;</span>)</span><br><span class=\"line\">x,y=mnist[<span class=\"string\">&quot;data&quot;</span>],mnist[<span class=\"string\">&quot;label&quot;</span>]</span><br><span class=\"line\">x=x.T</span><br><span class=\"line\">y=y[<span class=\"number\">0</span>]</span><br><span class=\"line\">x_train,x_test,y_train,y_test=train_test_split(x,y,random_state=<span class=\"number\">5</span>)</span><br><span class=\"line\">nb=BernoulliNB()</span><br><span class=\"line\">nb.fit(x_train,y_train)</span><br><span class=\"line\">a=nb.score(x_test,y_test)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(a)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<pre><code>0.828\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.naive_bayes <span class=\"keyword\">import</span> BernoulliNB <span class=\"comment\">#伯努利分布,适用于离散型数据</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.naive_bayes <span class=\"keyword\">import</span> GaussianNB <span class=\"comment\">#高斯分布，适用于连续型数据</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.naive_bayes <span class=\"keyword\">import</span> MultinomialNB <span class=\"comment\">#多项式分布，</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.model_selection <span class=\"keyword\">import</span> train_test_split</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.datasets <span class=\"keyword\">import</span> make_blobs</span><br><span class=\"line\"></span><br><span class=\"line\">x, y= make_blobs(n_samples = <span class=\"number\">1000</span>, <span class=\"comment\">#生成300条数据</span></span><br><span class=\"line\">                       centers =<span class=\"number\">5</span>, <span class=\"comment\">#5类数据</span></span><br><span class=\"line\">                       cluster_std = <span class=\"number\">0.7</span>, <span class=\"comment\">#方差一致</span></span><br><span class=\"line\">                       random_state = <span class=\"number\">8</span>) <span class=\"comment\">#随机数种子</span></span><br><span class=\"line\">nb=GaussianNB()</span><br><span class=\"line\">nb.fit(x,y)</span><br><span class=\"line\">z=nb.predict(x)</span><br><span class=\"line\">a=nb.score(x,y)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(a)</span><br><span class=\"line\"></span><br><span class=\"line\">plt.figure()</span><br><span class=\"line\">plt.scatter(x[:,<span class=\"number\">0</span>], x[:,<span class=\"number\">1</span>],c=y)</span><br><span class=\"line\">plt.figure()</span><br><span class=\"line\">plt.scatter(x[:,<span class=\"number\">0</span>], x[:,<span class=\"number\">1</span>],c=z)</span><br><span class=\"line\">plt.show()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<pre><code>0.982\n</code></pre>\n<p><img \"\" class=\"lazyload placeholder\" data-original=\"output_1_1.png\" src=\"https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif\" alt=\"png\"></p>\n<p><img \"\" class=\"lazyload placeholder\" data-original=\"output_1_2.png\" src=\"https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif\" alt=\"png\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.datasets <span class=\"keyword\">import</span> make_moons</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.naive_bayes <span class=\"keyword\">import</span> BernoulliNB <span class=\"comment\">#伯努利分布,适用于离散型数据</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.naive_bayes <span class=\"keyword\">import</span> GaussianNB <span class=\"comment\">#高斯分布，适用于连续型数据</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.naive_bayes <span class=\"keyword\">import</span> MultinomialNB <span class=\"comment\">#多项式分布</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.model_selection <span class=\"keyword\">import</span> cross_val_score <span class=\"keyword\">as</span> cr<span class=\"comment\">#调用交叉检验函数</span></span><br><span class=\"line\">n_samples = <span class=\"number\">600</span></span><br><span class=\"line\">x,y=make_moons(n_samples=n_samples, noise=<span class=\"number\">0.1</span>,random_state=<span class=\"number\">8</span>)</span><br><span class=\"line\">x=x+<span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"comment\">#clf= MultinomialNB()</span></span><br><span class=\"line\">clf= GaussianNB()</span><br><span class=\"line\">clf.fit(x,y)</span><br><span class=\"line\"><span class=\"comment\">#clf.predict([x])</span></span><br><span class=\"line\">xmin,xmax=x[:,<span class=\"number\">0</span>].<span class=\"built_in\">min</span>()-<span class=\"number\">1</span>,x[:,<span class=\"number\">0</span>].<span class=\"built_in\">max</span>()+<span class=\"number\">1</span></span><br><span class=\"line\">ymin,ymax=x[:,<span class=\"number\">1</span>].<span class=\"built_in\">min</span>()-<span class=\"number\">1</span>,x[:,<span class=\"number\">1</span>].<span class=\"built_in\">max</span>()+<span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">xx,yy=np.meshgrid(np.arange(xmin,xmax,<span class=\"number\">0.02</span>),np.arange(ymin,ymax,<span class=\"number\">0.02</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">xf=np.c_[xx.ravel(),yy.ravel()];</span><br><span class=\"line\">z=clf.predict(xf)</span><br><span class=\"line\">z=z.reshape(xx.shape)</span><br><span class=\"line\">plt.pcolormesh(xx,yy,z,cmap=plt.cm.Pastel1)</span><br><span class=\"line\">plt.scatter(x[:,<span class=\"number\">0</span>],x[:,<span class=\"number\">1</span>],c=y)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(cr(clf,x,y,cv=<span class=\"number\">5</span>,scoring=<span class=\"string\">&quot;accuracy&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">plt.show()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<pre><code>[0.9        0.88333333 0.9        0.85833333 0.86666667]\n\n\nc:\\users\\administrator\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\ipykernel_launcher.py:25: MatplotlibDeprecationWarning: shading='flat' when X and Y have the same dimensions as C is deprecated since 3.3.  Either specify the corners of the quadrilaterals with X and Y, or pass shading='auto', 'nearest' or 'gouraud', or set rcParams['pcolor.shading'].  This will become an error two minor releases later.\n</code></pre>\n<p><img \"\" class=\"lazyload placeholder\" data-original=\"output_2_2.png\" src=\"https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif\" alt=\"png\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "机器学习"
            ]
        },
        {
            "id": "http://example.com/2021/11/08/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE%E7%A8%8B(%E9%AD%8F)/%E7%BA%BF%E6%80%A7%E8%A7%84%E5%88%92/",
            "url": "http://example.com/2021/11/08/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE%E7%A8%8B(%E9%AD%8F)/%E7%BA%BF%E6%80%A7%E8%A7%84%E5%88%92/",
            "title": "线性规划",
            "date_published": "2021-11-08T07:02:54.000Z",
            "content_html": "<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> scipy <span class=\"keyword\">import</span> optimize <span class=\"keyword\">as</span> op</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><img \"\" class=\"lazyload placeholder\" data-original=\"image-20211208163638086.png\" src=\"https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif\" alt=\"image-20211208163638086\"></p>\n<p>scipy.optimize.linprog(c, A_ub=None, b_ub=None, A_eq=None, b_eq=None, bounds=None, method=‘simplex’, callback=None, options=None)</p>\n<p>很容易发现，c 指的应该是要求最大值的函数的系数数组，A_ub 是应该是不等式未知量的系数矩阵，仔细观察的人应该发现，为什么第一行里面写的是 [-2,5,-1] 而不是 [2,5,-1] 呢，应该要与图里对应才对啊，原来这不等式指的是 &lt;= 的不等式，那如果是 &gt;= 呢，乘个负号就行了。A_eq 就是其中等式的未知量系数矩阵了。B_ub 就是不等式的右边了，B_eq 就是等式右边了。bounds 的话，指的就是每个未知量的范围了</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#目标函数，求最大值</span></span><br><span class=\"line\">c=np.array([<span class=\"number\">2</span>,<span class=\"number\">3</span>,-<span class=\"number\">5</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#unbalence不等式，默认&lt;=，&gt;=乘-1</span></span><br><span class=\"line\"><span class=\"comment\">#不等式左系数矩阵</span></span><br><span class=\"line\">A_ub=np.array([[-<span class=\"number\">2</span>,<span class=\"number\">5</span>,-<span class=\"number\">1</span>],[<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">1</span>]])</span><br><span class=\"line\"><span class=\"comment\">#不等式右系数矩阵</span></span><br><span class=\"line\">B_ub=np.array([-<span class=\"number\">10</span>,<span class=\"number\">12</span>])</span><br><span class=\"line\"><span class=\"comment\">#equation等式，A_eq为左系数矩阵，B_eq为右系数矩阵</span></span><br><span class=\"line\">A_eq=np.array([[<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>]])<span class=\"comment\">#注意双括号</span></span><br><span class=\"line\">B_eq=np.array([<span class=\"number\">7</span>])</span><br><span class=\"line\"><span class=\"comment\">#x1,x2,x3大于等于0</span></span><br><span class=\"line\">x1=(<span class=\"number\">0</span>,<span class=\"literal\">None</span>)</span><br><span class=\"line\">x2=(<span class=\"number\">0</span>,<span class=\"literal\">None</span>)</span><br><span class=\"line\">x3=(<span class=\"number\">0</span>,<span class=\"literal\">None</span>)</span><br><span class=\"line\"><span class=\"comment\">#函数默认求最小值，-c，结果为负号</span></span><br><span class=\"line\">res=op.linprog(-c,A_ub,B_ub,A_eq,B_eq,bounds=(x1,x2,x3))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(res)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<pre><code>     con: array([1.80713489e-09])\n     fun: -14.571428565645059\n message: 'Optimization terminated successfully.'\n     nit: 5\n   slack: array([-2.24614993e-10,  3.85714286e+00])\n  status: 0\n success: True\n       x: array([6.42857143e+00, 5.71428571e-01, 2.35900788e-10])\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = [<span class=\"number\">6.42857143e+00</span>, <span class=\"number\">5.71428571e-01</span>, <span class=\"number\">2.35900788e-10</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">2</span>*x[<span class=\"number\">0</span>] + <span class=\"number\">3</span>*x[<span class=\"number\">1</span>] -<span class=\"number\">5</span>*x[<span class=\"number\">2</span>])</span><br></pre></td></tr></table></figure>\n<pre><code>14.571428571820496\n</code></pre>\n",
            "tags": [
                "机器学习"
            ]
        },
        {
            "id": "http://example.com/2021/11/08/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE%E7%A8%8B(%E9%AD%8F)/%E9%9A%8F%E6%9C%BA%E6%A3%AE%E6%9E%97/",
            "url": "http://example.com/2021/11/08/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE%E7%A8%8B(%E9%AD%8F)/%E9%9A%8F%E6%9C%BA%E6%A3%AE%E6%9E%97/",
            "title": "随机森林",
            "date_published": "2021-11-08T07:02:54.000Z",
            "content_html": "<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#begging</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.datasets <span class=\"keyword\">import</span> make_moons</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.metrics <span class=\"keyword\">import</span> accuracy_score</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.ensemble <span class=\"keyword\">import</span> BaggingClassifier</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.tree <span class=\"keyword\">import</span> DecisionTreeClassifier</span><br><span class=\"line\"></span><br><span class=\"line\">n_samples = <span class=\"number\">2000</span></span><br><span class=\"line\">X_train, y_train=make_moons(n_samples=n_samples, noise=<span class=\"number\">.3</span>,random_state=<span class=\"number\">8</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">bag_clf = BaggingClassifier(DecisionTreeClassifier(), n_estimators=<span class=\"number\">500</span>,max_samples=<span class=\"number\">100</span>, bootstrap=<span class=\"literal\">True</span>, n_jobs=-<span class=\"number\">1</span>)</span><br><span class=\"line\">bag_clf.fit(X_train[<span class=\"number\">0</span>:<span class=\"number\">1500</span>], y_train[<span class=\"number\">0</span>:<span class=\"number\">1500</span>])</span><br><span class=\"line\">y_pred = bag_clf.predict(X_train[<span class=\"number\">1500</span>:])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(accuracy_score(y_train[<span class=\"number\">1500</span>:], y_pred))</span><br><span class=\"line\"></span><br><span class=\"line\">plt.figure();</span><br><span class=\"line\">plt.scatter(X_train[:,<span class=\"number\">0</span>],X_train[:,<span class=\"number\">1</span>],c=y_train)</span><br><span class=\"line\">plt.show()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<pre><code>0.9\n</code></pre>\n<p><img \"\" class=\"lazyload placeholder\" data-original=\"output_0_1.png\" src=\"https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif\" alt=\"png\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#RandomForest</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.datasets <span class=\"keyword\">import</span> make_moons</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.metrics <span class=\"keyword\">import</span> accuracy_score</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.ensemble <span class=\"keyword\">import</span> RandomForestClassifier</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.tree <span class=\"keyword\">import</span> DecisionTreeClassifier</span><br><span class=\"line\"></span><br><span class=\"line\">n_samples = <span class=\"number\">2000</span></span><br><span class=\"line\">X_train, y_train=make_moons(n_samples=n_samples, noise=<span class=\"number\">.3</span>,random_state=<span class=\"number\">8</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">ada_clf = RandomForestClassifier(n_estimators=<span class=\"number\">500</span>,max_leaf_nodes=<span class=\"number\">16</span>,n_jobs=-<span class=\"number\">1</span>)</span><br><span class=\"line\">ada_clf.fit(X_train[<span class=\"number\">0</span>:<span class=\"number\">1500</span>], y_train[<span class=\"number\">0</span>:<span class=\"number\">1500</span>])</span><br><span class=\"line\">y_pred = ada_clf.predict(X_train[<span class=\"number\">1500</span>:])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(accuracy_score(y_train[<span class=\"number\">1500</span>:], y_pred))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">plt.figure();</span><br><span class=\"line\">plt.scatter(X_train[:,<span class=\"number\">0</span>],X_train[:,<span class=\"number\">1</span>],c=y_train)</span><br><span class=\"line\">plt.show()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<pre><code>0.904\n</code></pre>\n<p><img \"\" class=\"lazyload placeholder\" data-original=\"output_1_1.png\" src=\"https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif\" alt=\"png\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#Boost</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.datasets <span class=\"keyword\">import</span> make_moons</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.metrics <span class=\"keyword\">import</span> accuracy_score</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.ensemble <span class=\"keyword\">import</span> AdaBoostClassifier</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.tree <span class=\"keyword\">import</span> DecisionTreeClassifier</span><br><span class=\"line\"></span><br><span class=\"line\">n_samples = <span class=\"number\">2000</span></span><br><span class=\"line\">X_train, y_train=make_moons(n_samples=n_samples, noise=<span class=\"number\">.3</span>,random_state=<span class=\"number\">8</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">ada_clf = AdaBoostClassifier(</span><br><span class=\"line\">DecisionTreeClassifier(max_depth=<span class=\"number\">1</span>), n_estimators=<span class=\"number\">500</span>,</span><br><span class=\"line\">algorithm=<span class=\"string\">&quot;SAMME.R&quot;</span>, learning_rate=<span class=\"number\">0.5</span></span><br><span class=\"line\">)</span><br><span class=\"line\">ada_clf.fit(X_train[<span class=\"number\">0</span>:<span class=\"number\">1500</span>], y_train[<span class=\"number\">0</span>:<span class=\"number\">1500</span>])</span><br><span class=\"line\">y_pred = ada_clf.predict(X_train[<span class=\"number\">1500</span>:])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(accuracy_score(y_train[<span class=\"number\">1500</span>:], y_pred))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">plt.figure();</span><br><span class=\"line\">plt.scatter(X_train[:,<span class=\"number\">0</span>],X_train[:,<span class=\"number\">1</span>],c=y_train)</span><br><span class=\"line\">plt.show()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<pre><code>0.892\n</code></pre>\n<p><img \"\" class=\"lazyload placeholder\" data-original=\"output_2_1.png\" src=\"https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif\" alt=\"png\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#Stacking</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn <span class=\"keyword\">import</span> datasets</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn <span class=\"keyword\">import</span> model_selection</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.linear_model <span class=\"keyword\">import</span> LogisticRegression</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.neighbors <span class=\"keyword\">import</span> KNeighborsClassifier</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.naive_bayes <span class=\"keyword\">import</span> GaussianNB</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.ensemble <span class=\"keyword\">import</span> RandomForestClassifier</span><br><span class=\"line\"><span class=\"keyword\">from</span> mlxtend.classifier <span class=\"keyword\">import</span> StackingClassifier</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">iris = datasets.load_iris()</span><br><span class=\"line\">X, y = iris.data[:, <span class=\"number\">1</span>:<span class=\"number\">3</span>], iris.target</span><br><span class=\"line\"></span><br><span class=\"line\">clf1 = KNeighborsClassifier(n_neighbors=<span class=\"number\">1</span>)</span><br><span class=\"line\">clf2 = RandomForestClassifier(random_state=<span class=\"number\">1</span>)</span><br><span class=\"line\">clf3 = GaussianNB()</span><br><span class=\"line\">lr = LogisticRegression()</span><br><span class=\"line\">sclf = StackingClassifier(classifiers=[clf1, clf2, clf3], meta_classifier=lr)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;3-fold cross validation:\\n&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> clf, label <span class=\"keyword\">in</span> <span class=\"built_in\">zip</span>(</span><br><span class=\"line\">    [clf1, clf2, clf3, sclf],</span><br><span class=\"line\">    [<span class=\"string\">&#x27;KNN&#x27;</span>, <span class=\"string\">&#x27;Random Forest&#x27;</span>, <span class=\"string\">&#x27;Naive Bayes&#x27;</span>, <span class=\"string\">&#x27;StackingClassifier&#x27;</span>]):</span><br><span class=\"line\"></span><br><span class=\"line\">    scores = model_selection.cross_val_score(clf, X, y, cv=<span class=\"number\">3</span>, scoring=<span class=\"string\">&#x27;accuracy&#x27;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Accuracy: %0.2f (+/- %0.2f) [%s]&quot;</span> % (scores.mean(), scores.std(), label))</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<pre><code>---------------------------------------------------------------------------\n\nModuleNotFoundError                       Traceback (most recent call last)\n\n&lt;ipython-input-4-483486e68139&gt; in &lt;module&gt;\n      6 from sklearn.naive_bayes import GaussianNB\n      7 from sklearn.ensemble import RandomForestClassifier\n----&gt; 8 from mlxtend.classifier import StackingClassifier\n      9 import numpy as np\n     10 \n\n\nModuleNotFoundError: No module named 'mlxtend'\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">!pip install mlxtend</span><br></pre></td></tr></table></figure>\n<pre><code>Looking in indexes: http://mirrors.aliyun.com/pypi/simple/\n\n\nERROR: Could not find a version that satisfies the requirement mlxtend (from versions: none)\nERROR: No matching distribution found for mlxtend\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#Voting</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.datasets <span class=\"keyword\">import</span> make_moons<span class=\"comment\">#生成月牙形数据</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.metrics <span class=\"keyword\">import</span> accuracy_score<span class=\"comment\">#分类器的准确率</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt<span class=\"comment\">#画图</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.ensemble <span class=\"keyword\">import</span> VotingClassifier<span class=\"comment\">#调用集成学习的投票分类器</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.linear_model <span class=\"keyword\">import</span> LogisticRegression<span class=\"comment\">#调用逻辑回归分类器</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.svm <span class=\"keyword\">import</span> SVC<span class=\"comment\">#调用支持向量机分类器</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.neighbors <span class=\"keyword\">import</span> KNeighborsClassifier<span class=\"comment\">#调用KNN分类器</span></span><br><span class=\"line\"></span><br><span class=\"line\">n_samples = <span class=\"number\">2000</span></span><br><span class=\"line\">X_train, y_train=make_moons(n_samples=n_samples, noise=<span class=\"number\">.3</span>,random_state=<span class=\"number\">8</span>)</span><br><span class=\"line\"><span class=\"comment\">#shuffle_index=np.random.permutation(2000)</span></span><br><span class=\"line\"></span><br><span class=\"line\">log_clf = LogisticRegression()</span><br><span class=\"line\">svm_clf = SVC()</span><br><span class=\"line\">knn_clf=KNeighborsClassifier()</span><br><span class=\"line\"></span><br><span class=\"line\">voting_clf = VotingClassifier(</span><br><span class=\"line\">estimators=[(<span class=\"string\">&#x27;lr&#x27;</span>, log_clf),(<span class=\"string\">&#x27;svc&#x27;</span>, svm_clf),(<span class=\"string\">&#x27;knn&#x27;</span>,knn_clf)],</span><br><span class=\"line\">voting=<span class=\"string\">&#x27;hard&#x27;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"comment\">#voting_clf.fit(X_train[0:1500], y_train[0:1500])</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> clf <span class=\"keyword\">in</span> (log_clf,svm_clf,knn_clf,voting_clf):</span><br><span class=\"line\">    clf.fit(X_train[<span class=\"number\">0</span>:<span class=\"number\">1500</span>], y_train[<span class=\"number\">0</span>:<span class=\"number\">1500</span>])</span><br><span class=\"line\">    y_pred = clf.predict(X_train[<span class=\"number\">1500</span>:])</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(clf.__class__.__name__, accuracy_score(y_train[<span class=\"number\">1500</span>:], y_pred))</span><br><span class=\"line\"></span><br><span class=\"line\">plt.figure();</span><br><span class=\"line\">plt.scatter(X_train[:,<span class=\"number\">0</span>],X_train[:,<span class=\"number\">1</span>],c=y_train)</span><br><span class=\"line\">plt.show()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<pre><code>LogisticRegression 0.862\nSVC 0.906\nKNeighborsClassifier 0.902\nVotingClassifier 0.91\n</code></pre>\n<p><img \"\" class=\"lazyload placeholder\" data-original=\"output_5_1.png\" src=\"https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif\" alt=\"png\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "机器学习"
            ]
        },
        {
            "id": "http://example.com/2021/11/08/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE%E7%A8%8B(%E9%AD%8F)/%E9%9D%9E%E7%BA%BF%E6%80%A7%E8%A7%84%E5%88%92/",
            "url": "http://example.com/2021/11/08/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE%E7%A8%8B(%E9%AD%8F)/%E9%9D%9E%E7%BA%BF%E6%80%A7%E8%A7%84%E5%88%92/",
            "title": "非线性规划",
            "date_published": "2021-11-08T07:02:54.000Z",
            "content_html": "<p><img \"\" class=\"lazyload placeholder\" data-original=\"image-20211208163755018.png\" src=\"https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif\" alt=\"image-20211208163755018\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">minimize</span>(<span class=\"params\">fun: <span class=\"type\">Callable</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">             x0: ndarray,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">             args: <span class=\"type\">Union</span>[Iterable, <span class=\"built_in\">tuple</span>, <span class=\"literal\">None</span>] = (<span class=\"params\"></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">             method: <span class=\"type\">Union</span>[<span class=\"built_in\">str</span>, <span class=\"type\">Callable</span>, <span class=\"literal\">None</span>] = <span class=\"literal\">None</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">             jac: <span class=\"type\">Union</span>[<span class=\"type\">Callable</span>, <span class=\"built_in\">str</span>, <span class=\"built_in\">bool</span>, <span class=\"literal\">None</span>] = <span class=\"literal\">None</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">             hess: <span class=\"built_in\">str</span> = <span class=\"literal\">None</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">             hessp: <span class=\"type\">Optional</span>[<span class=\"type\">Callable</span>] = <span class=\"literal\">None</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">             bounds: <span class=\"type\">Union</span>[Iterable, Bounds, <span class=\"literal\">None</span>] = <span class=\"literal\">None</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">             constraints: <span class=\"type\">Optional</span>[<span class=\"built_in\">dict</span>] = (<span class=\"params\"></span>),</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">             tol: <span class=\"type\">Optional</span>[<span class=\"built_in\">float</span>] = <span class=\"literal\">None</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">             callback: <span class=\"type\">Optional</span>[<span class=\"type\">Callable</span>] = <span class=\"literal\">None</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">             options: <span class=\"type\">Optional</span>[<span class=\"built_in\">dict</span>] = <span class=\"literal\">None</span></span>) -&gt; <span class=\"type\">Any</span></span></span><br><span class=\"line\"><span class=\"function\">#Minimization of scalar function of one <span class=\"keyword\">or</span> more variables.</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> scipy <span class=\"keyword\">import</span>  optimize <span class=\"keyword\">as</span> opt</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">from</span> scipy.optimize <span class=\"keyword\">import</span> minimize</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 目标函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">objective</span>(<span class=\"params\">x</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> x[<span class=\"number\">0</span>] ** <span class=\"number\">2</span> + x[<span class=\"number\">1</span>]**<span class=\"number\">2</span> + x[<span class=\"number\">2</span>]**<span class=\"number\">2</span> +<span class=\"number\">8</span></span><br><span class=\"line\"><span class=\"comment\"># 约束条件，&gt;=以及=</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">constraint1</span>(<span class=\"params\">x</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> x[<span class=\"number\">0</span>] ** <span class=\"number\">2</span> - x[<span class=\"number\">1</span>] + x[<span class=\"number\">2</span>]**<span class=\"number\">2</span>  <span class=\"comment\"># 不等约束</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">constraint2</span>(<span class=\"params\">x</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> -(x[<span class=\"number\">0</span>] + x[<span class=\"number\">1</span>]**<span class=\"number\">2</span> + x[<span class=\"number\">2</span>]**<span class=\"number\">2</span>-<span class=\"number\">20</span>)  <span class=\"comment\"># 不等约束，默认&gt;=，这里是&lt;=,加上负号</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">constraint3</span>(<span class=\"params\">x</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> -x[<span class=\"number\">0</span>] - x[<span class=\"number\">1</span>]**<span class=\"number\">2</span> + <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">constraint4</span>(<span class=\"params\">x</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> x[<span class=\"number\">1</span>] + <span class=\"number\">2</span>*x[<span class=\"number\">2</span>]**<span class=\"number\">2</span> -<span class=\"number\">3</span>           <span class=\"comment\"># 不等约束</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 边界约束，都大于零</span></span><br><span class=\"line\">b = (<span class=\"number\">0.0</span>, <span class=\"literal\">None</span>)</span><br><span class=\"line\">bnds = (b, b ,b) </span><br><span class=\"line\"></span><br><span class=\"line\">con1 = &#123;<span class=\"string\">&#x27;type&#x27;</span>: <span class=\"string\">&#x27;ineq&#x27;</span>, <span class=\"string\">&#x27;fun&#x27;</span>: constraint1&#125;<span class=\"comment\">#不等约束&gt;=</span></span><br><span class=\"line\">con2 = &#123;<span class=\"string\">&#x27;type&#x27;</span>: <span class=\"string\">&#x27;ineq&#x27;</span>, <span class=\"string\">&#x27;fun&#x27;</span>: constraint2&#125;<span class=\"comment\">#不等约束&gt;=</span></span><br><span class=\"line\">con3 = &#123;<span class=\"string\">&#x27;type&#x27;</span>: <span class=\"string\">&#x27;eq&#x27;</span>, <span class=\"string\">&#x27;fun&#x27;</span>: constraint3&#125;<span class=\"comment\">#相等约束</span></span><br><span class=\"line\">con4 = &#123;<span class=\"string\">&#x27;type&#x27;</span>: <span class=\"string\">&#x27;eq&#x27;</span>, <span class=\"string\">&#x27;fun&#x27;</span>: constraint4&#125;<span class=\"comment\">#相等约束</span></span><br><span class=\"line\"></span><br><span class=\"line\">cons = ([con1, con2, con3,con4])  <span class=\"comment\"># 4个约束条件</span></span><br><span class=\"line\"><span class=\"comment\"># 计算</span></span><br><span class=\"line\"><span class=\"comment\">#定义初始值</span></span><br><span class=\"line\"><span class=\"comment\">#x0 = ([0, 0, 0])</span></span><br><span class=\"line\"><span class=\"comment\">#使用函数minimize求解最小值，传入参数：objective目标函数，x0初始值，method使用QP问题解决方法，bounds取值范围，constraints约束套件</span></span><br><span class=\"line\">solution = minimize(objective, x0, method=<span class=\"string\">&#x27;SLSQP&#x27;</span>, bounds=bnds, constraints=cons)</span><br><span class=\"line\">x = solution.x</span><br><span class=\"line\"><span class=\"built_in\">print</span>(solution)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;目标值: &#x27;</span> + <span class=\"built_in\">str</span>(objective(x)))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;答案为&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;x1 = &#x27;</span> + <span class=\"built_in\">str</span>(x[<span class=\"number\">0</span>]))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;x2 = &#x27;</span> + <span class=\"built_in\">str</span>(x[<span class=\"number\">1</span>]))</span><br></pre></td></tr></table></figure>\n<pre><code>     fun: 10.651091840572583\n     jac: array([1.10433471, 2.40651834, 1.89564812])\n message: 'Optimization terminated successfully'\n    nfev: 71\n     nit: 15\n    njev: 15\n  status: 0\n success: True\n       x: array([0.55216734, 1.20325918, 0.94782404])\n目标值: 10.651091840572583\n答案为\nx1 = 0.5521673412903173\nx2 = 1.203259181851855\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "机器学习"
            ]
        },
        {
            "id": "http://example.com/2021/11/08/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE%E7%A8%8B(%E9%AD%8F)/BP/",
            "url": "http://example.com/2021/11/08/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE%E7%A8%8B(%E9%AD%8F)/BP/",
            "title": "BP神经网络",
            "date_published": "2021-11-08T07:02:54.000Z",
            "content_html": "<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> tensorflow <span class=\"keyword\">as</span> tf</span><br><span class=\"line\"><span class=\"keyword\">from</span> tensorflow <span class=\"keyword\">import</span> keras</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"><span class=\"keyword\">import</span> scipy.io <span class=\"keyword\">as</span> sio</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fashion_mnist=sio.loadmat(<span class=\"string\">&#x27;fashion_mnist.mat&#x27;</span>)</span><br><span class=\"line\">train_img=fashion_mnist[<span class=\"string\">&#x27;train&#x27;</span>]</span><br><span class=\"line\">train_imglabels=fashion_mnist[<span class=\"string\">&#x27;trainlabels&#x27;</span>]</span><br><span class=\"line\">test_img=fashion_mnist[<span class=\"string\">&#x27;test&#x27;</span>]</span><br><span class=\"line\">test_imglabels=fashion_mnist[<span class=\"string\">&#x27;testlabels&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">input1=keras.layers.Input(shape=train_img.shape[<span class=\"number\">1</span>:])</span><br><span class=\"line\">hidden1=keras.layers.Dense(<span class=\"number\">100</span>,activation=<span class=\"string\">&quot;tanh&quot;</span>)(input1)</span><br><span class=\"line\">hidden2=keras.layers.Dense(<span class=\"number\">120</span>,activation=<span class=\"string\">&quot;tanh&quot;</span>)(hidden1)</span><br><span class=\"line\">concat=keras.layers.Concatenate()([input1,hidden2])</span><br><span class=\"line\">output=keras.layers.Dense(<span class=\"number\">10</span>,activation=<span class=\"string\">&quot;softmax&quot;</span>)(concat)</span><br><span class=\"line\">model=keras.Model(inputs=[input1],outputs=[output])</span><br><span class=\"line\"></span><br><span class=\"line\">model.<span class=\"built_in\">compile</span>(loss=<span class=\"string\">&quot;sparse_categorical_crossentropy&quot;</span>,optimizer=keras.optimizers.SGD(lr=<span class=\"number\">0.005</span>),metrics=[<span class=\"string\">&#x27;accuracy&#x27;</span>])</span><br><span class=\"line\">x_valid,x_train=train_img[:<span class=\"number\">5000</span>]/<span class=\"number\">255</span>,train_img[<span class=\"number\">5000</span>:]/<span class=\"number\">255</span></span><br><span class=\"line\">y_valid,y_train=train_imglabels[:<span class=\"number\">5000</span>],train_imglabels[<span class=\"number\">5000</span>:]</span><br><span class=\"line\"></span><br><span class=\"line\">model.fit(x_train,y_train,batch_size=<span class=\"number\">2500</span>,epochs=<span class=\"number\">100</span>,validation_data=(x_valid,y_valid),verbose=<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<pre><code>WARNING:tensorflow:From c:\\users\\administrator\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\tensorflow_core\\python\\ops\\resource_variable_ops.py:1630: calling BaseResourceVariable.__init__ (from tensorflow.python.ops.resource_variable_ops) with constraint is deprecated and will be removed in a future version.\nInstructions for updating:\nIf using Keras pass *_constraint arguments to layers.\nTrain on 55000 samples, validate on 5000 samples\nEpoch 1/100\n55000/55000 [==============================] - 3s 46us/sample - loss: 2.2687 - acc: 0.1840 - val_loss: 2.0692 - val_acc: 0.2996\nEpoch 2/100\n55000/55000 [==============================] - 2s 44us/sample - loss: 1.9678 - acc: 0.3960 - val_loss: 1.8557 - val_acc: 0.4844\nEpoch 3/100\n55000/55000 [==============================] - 2s 44us/sample - loss: 1.7842 - acc: 0.5295 - val_loss: 1.6939 - val_acc: 0.5776\nEpoch 4/100\n55000/55000 [==============================] - 2s 44us/sample - loss: 1.6412 - acc: 0.5905 - val_loss: 1.5654 - val_acc: 0.6198\nEpoch 5/100\n55000/55000 [==============================] - 2s 44us/sample - loss: 1.5266 - acc: 0.6213 - val_loss: 1.4618 - val_acc: 0.6430\nEpoch 6/100\n55000/55000 [==============================] - 2s 44us/sample - loss: 1.4337 - acc: 0.6395 - val_loss: 1.3775 - val_acc: 0.6570\nEpoch 7/100\n55000/55000 [==============================] - 2s 44us/sample - loss: 1.3572 - acc: 0.6528 - val_loss: 1.3078 - val_acc: 0.6666\nEpoch 8/100\n55000/55000 [==============================] - 2s 44us/sample - loss: 1.2934 - acc: 0.6628 - val_loss: 1.2492 - val_acc: 0.6752\nEpoch 9/100\n55000/55000 [==============================] - 2s 44us/sample - loss: 1.2395 - acc: 0.6706 - val_loss: 1.1996 - val_acc: 0.6824\nEpoch 10/100\n55000/55000 [==============================] - 2s 44us/sample - loss: 1.1935 - acc: 0.6769 - val_loss: 1.1571 - val_acc: 0.6874\nEpoch 11/100\n55000/55000 [==============================] - 2s 44us/sample - loss: 1.1537 - acc: 0.6833 - val_loss: 1.1201 - val_acc: 0.6924\nEpoch 12/100\n55000/55000 [==============================] - 2s 44us/sample - loss: 1.1190 - acc: 0.6876 - val_loss: 1.0877 - val_acc: 0.6988\nEpoch 13/100\n55000/55000 [==============================] - 2s 44us/sample - loss: 1.0885 - acc: 0.6928 - val_loss: 1.0591 - val_acc: 0.7032\nEpoch 14/100\n55000/55000 [==============================] - 2s 44us/sample - loss: 1.0614 - acc: 0.6970 - val_loss: 1.0337 - val_acc: 0.7074\nEpoch 15/100\n55000/55000 [==============================] - 2s 44us/sample - loss: 1.0372 - acc: 0.7007 - val_loss: 1.0109 - val_acc: 0.7110\nEpoch 16/100\n55000/55000 [==============================] - 2s 44us/sample - loss: 1.0154 - acc: 0.7045 - val_loss: 0.9903 - val_acc: 0.7146\nEpoch 17/100\n55000/55000 [==============================] - 2s 44us/sample - loss: 0.9957 - acc: 0.7075 - val_loss: 0.9716 - val_acc: 0.7184\nEpoch 18/100\n55000/55000 [==============================] - 2s 44us/sample - loss: 0.9777 - acc: 0.7114 - val_loss: 0.9546 - val_acc: 0.7220\nEpoch 19/100\n55000/55000 [==============================] - 2s 44us/sample - loss: 0.9613 - acc: 0.7147 - val_loss: 0.9390 - val_acc: 0.7248\nEpoch 20/100\n55000/55000 [==============================] - 2s 44us/sample - loss: 0.9462 - acc: 0.7171 - val_loss: 0.9246 - val_acc: 0.7268\nEpoch 21/100\n55000/55000 [==============================] - 2s 44us/sample - loss: 0.9323 - acc: 0.7196 - val_loss: 0.9113 - val_acc: 0.7296\nEpoch 22/100\n55000/55000 [==============================] - 2s 44us/sample - loss: 0.9194 - acc: 0.7229 - val_loss: 0.8990 - val_acc: 0.7320\nEpoch 23/100\n55000/55000 [==============================] - 2s 44us/sample - loss: 0.9073 - acc: 0.7255 - val_loss: 0.8875 - val_acc: 0.7338\nEpoch 24/100\n55000/55000 [==============================] - 2s 44us/sample - loss: 0.8961 - acc: 0.7285 - val_loss: 0.8767 - val_acc: 0.7366\nEpoch 25/100\n55000/55000 [==============================] - 2s 44us/sample - loss: 0.8856 - acc: 0.7301 - val_loss: 0.8665 - val_acc: 0.7400\nEpoch 26/100\n55000/55000 [==============================] - 2s 44us/sample - loss: 0.8757 - acc: 0.7328 - val_loss: 0.8570 - val_acc: 0.7432\nEpoch 27/100\n55000/55000 [==============================] - 2s 44us/sample - loss: 0.8664 - acc: 0.7349 - val_loss: 0.8480 - val_acc: 0.7456\nEpoch 28/100\n55000/55000 [==============================] - 2s 44us/sample - loss: 0.8576 - acc: 0.7374 - val_loss: 0.8396 - val_acc: 0.7476\nEpoch 29/100\n55000/55000 [==============================] - 2s 44us/sample - loss: 0.8493 - acc: 0.7391 - val_loss: 0.8315 - val_acc: 0.7498\nEpoch 30/100\n55000/55000 [==============================] - 2s 44us/sample - loss: 0.8413 - acc: 0.7415 - val_loss: 0.8239 - val_acc: 0.7516\nEpoch 31/100\n55000/55000 [==============================] - 2s 44us/sample - loss: 0.8338 - acc: 0.7430 - val_loss: 0.8166 - val_acc: 0.7524\nEpoch 32/100\n55000/55000 [==============================] - 2s 44us/sample - loss: 0.8266 - acc: 0.7444 - val_loss: 0.8097 - val_acc: 0.7544\nEpoch 33/100\n55000/55000 [==============================] - 2s 44us/sample - loss: 0.8198 - acc: 0.7457 - val_loss: 0.8030 - val_acc: 0.7562\nEpoch 34/100\n55000/55000 [==============================] - 2s 44us/sample - loss: 0.8132 - acc: 0.7475 - val_loss: 0.7966 - val_acc: 0.7580\nEpoch 35/100\n55000/55000 [==============================] - 2s 44us/sample - loss: 0.8069 - acc: 0.7493 - val_loss: 0.7906 - val_acc: 0.7582\nEpoch 36/100\n55000/55000 [==============================] - 2s 44us/sample - loss: 0.8009 - acc: 0.7509 - val_loss: 0.7847 - val_acc: 0.7604\nEpoch 37/100\n55000/55000 [==============================] - 2s 44us/sample - loss: 0.7951 - acc: 0.7519 - val_loss: 0.7791 - val_acc: 0.7608\nEpoch 38/100\n55000/55000 [==============================] - 2s 44us/sample - loss: 0.7896 - acc: 0.7535 - val_loss: 0.7737 - val_acc: 0.7638\nEpoch 39/100\n55000/55000 [==============================] - 2s 44us/sample - loss: 0.7842 - acc: 0.7550 - val_loss: 0.7684 - val_acc: 0.7650\nEpoch 40/100\n55000/55000 [==============================] - 2s 44us/sample - loss: 0.7790 - acc: 0.7564 - val_loss: 0.7634 - val_acc: 0.7660\nEpoch 41/100\n55000/55000 [==============================] - 2s 44us/sample - loss: 0.7740 - acc: 0.7574 - val_loss: 0.7585 - val_acc: 0.7676\nEpoch 42/100\n55000/55000 [==============================] - 2s 44us/sample - loss: 0.7692 - acc: 0.7592 - val_loss: 0.7538 - val_acc: 0.7684\nEpoch 43/100\n55000/55000 [==============================] - 2s 44us/sample - loss: 0.7645 - acc: 0.7607 - val_loss: 0.7493 - val_acc: 0.7696\nEpoch 44/100\n55000/55000 [==============================] - 2s 44us/sample - loss: 0.7600 - acc: 0.7619 - val_loss: 0.7449 - val_acc: 0.7714\nEpoch 45/100\n55000/55000 [==============================] - 2s 44us/sample - loss: 0.7556 - acc: 0.7634 - val_loss: 0.7406 - val_acc: 0.7738\nEpoch 46/100\n55000/55000 [==============================] - 2s 44us/sample - loss: 0.7514 - acc: 0.7646 - val_loss: 0.7365 - val_acc: 0.7750\nEpoch 47/100\n55000/55000 [==============================] - 2s 44us/sample - loss: 0.7472 - acc: 0.7656 - val_loss: 0.7324 - val_acc: 0.7758\nEpoch 48/100\n55000/55000 [==============================] - 2s 44us/sample - loss: 0.7432 - acc: 0.7671 - val_loss: 0.7286 - val_acc: 0.7770\nEpoch 49/100\n55000/55000 [==============================] - 2s 44us/sample - loss: 0.7393 - acc: 0.7678 - val_loss: 0.7247 - val_acc: 0.7784\nEpoch 50/100\n55000/55000 [==============================] - 2s 44us/sample - loss: 0.7355 - acc: 0.7697 - val_loss: 0.7210 - val_acc: 0.7792\nEpoch 51/100\n55000/55000 [==============================] - 2s 44us/sample - loss: 0.7319 - acc: 0.7702 - val_loss: 0.7174 - val_acc: 0.7802\nEpoch 52/100\n55000/55000 [==============================] - 2s 44us/sample - loss: 0.7283 - acc: 0.7711 - val_loss: 0.7139 - val_acc: 0.7812\nEpoch 53/100\n55000/55000 [==============================] - 2s 44us/sample - loss: 0.7248 - acc: 0.7726 - val_loss: 0.7105 - val_acc: 0.7816\nEpoch 54/100\n55000/55000 [==============================] - 2s 44us/sample - loss: 0.7213 - acc: 0.7733 - val_loss: 0.7072 - val_acc: 0.7820\nEpoch 55/100\n55000/55000 [==============================] - 2s 44us/sample - loss: 0.7180 - acc: 0.7739 - val_loss: 0.7039 - val_acc: 0.7828\nEpoch 56/100\n55000/55000 [==============================] - 2s 44us/sample - loss: 0.7148 - acc: 0.7749 - val_loss: 0.7007 - val_acc: 0.7830\nEpoch 57/100\n55000/55000 [==============================] - 2s 44us/sample - loss: 0.7116 - acc: 0.7755 - val_loss: 0.6976 - val_acc: 0.7840\nEpoch 58/100\n55000/55000 [==============================] - 2s 44us/sample - loss: 0.7085 - acc: 0.7766 - val_loss: 0.6946 - val_acc: 0.7840\nEpoch 59/100\n55000/55000 [==============================] - 2s 44us/sample - loss: 0.7054 - acc: 0.7775 - val_loss: 0.6917 - val_acc: 0.7846\nEpoch 60/100\n55000/55000 [==============================] - 2s 44us/sample - loss: 0.7025 - acc: 0.7783 - val_loss: 0.6888 - val_acc: 0.7858\nEpoch 61/100\n55000/55000 [==============================] - 2s 44us/sample - loss: 0.6996 - acc: 0.7792 - val_loss: 0.6860 - val_acc: 0.7860\nEpoch 62/100\n55000/55000 [==============================] - 2s 44us/sample - loss: 0.6967 - acc: 0.7801 - val_loss: 0.6831 - val_acc: 0.7874\nEpoch 63/100\n55000/55000 [==============================] - 2s 44us/sample - loss: 0.6940 - acc: 0.7806 - val_loss: 0.6804 - val_acc: 0.7874\nEpoch 64/100\n55000/55000 [==============================] - 2s 44us/sample - loss: 0.6913 - acc: 0.7816 - val_loss: 0.6778 - val_acc: 0.7896\nEpoch 65/100\n55000/55000 [==============================] - 2s 44us/sample - loss: 0.6886 - acc: 0.7821 - val_loss: 0.6752 - val_acc: 0.7900\nEpoch 66/100\n55000/55000 [==============================] - 2s 44us/sample - loss: 0.6860 - acc: 0.7827 - val_loss: 0.6726 - val_acc: 0.7908\nEpoch 67/100\n55000/55000 [==============================] - 2s 44us/sample - loss: 0.6834 - acc: 0.7835 - val_loss: 0.6701 - val_acc: 0.7916\nEpoch 68/100\n55000/55000 [==============================] - 2s 44us/sample - loss: 0.6809 - acc: 0.7839 - val_loss: 0.6676 - val_acc: 0.7918\nEpoch 69/100\n55000/55000 [==============================] - 2s 44us/sample - loss: 0.6785 - acc: 0.7844 - val_loss: 0.6652 - val_acc: 0.7934\nEpoch 70/100\n55000/55000 [==============================] - 2s 44us/sample - loss: 0.6760 - acc: 0.7853 - val_loss: 0.6629 - val_acc: 0.7932\nEpoch 71/100\n55000/55000 [==============================] - 2s 44us/sample - loss: 0.6737 - acc: 0.7859 - val_loss: 0.6606 - val_acc: 0.7942\nEpoch 72/100\n55000/55000 [==============================] - 2s 44us/sample - loss: 0.6713 - acc: 0.7860 - val_loss: 0.6583 - val_acc: 0.7942\nEpoch 73/100\n55000/55000 [==============================] - 2s 44us/sample - loss: 0.6691 - acc: 0.7869 - val_loss: 0.6560 - val_acc: 0.7950\nEpoch 74/100\n55000/55000 [==============================] - 2s 44us/sample - loss: 0.6668 - acc: 0.7873 - val_loss: 0.6539 - val_acc: 0.7956\nEpoch 75/100\n55000/55000 [==============================] - 2s 44us/sample - loss: 0.6646 - acc: 0.7878 - val_loss: 0.6517 - val_acc: 0.7958\nEpoch 76/100\n55000/55000 [==============================] - 2s 44us/sample - loss: 0.6625 - acc: 0.7886 - val_loss: 0.6495 - val_acc: 0.7960\nEpoch 77/100\n55000/55000 [==============================] - 2s 44us/sample - loss: 0.6603 - acc: 0.7890 - val_loss: 0.6475 - val_acc: 0.7970\nEpoch 78/100\n55000/55000 [==============================] - 2s 44us/sample - loss: 0.6582 - acc: 0.7898 - val_loss: 0.6454 - val_acc: 0.7974\nEpoch 79/100\n55000/55000 [==============================] - 2s 44us/sample - loss: 0.6562 - acc: 0.7902 - val_loss: 0.6434 - val_acc: 0.7980\nEpoch 80/100\n55000/55000 [==============================] - 2s 44us/sample - loss: 0.6542 - acc: 0.7908 - val_loss: 0.6414 - val_acc: 0.7982\nEpoch 81/100\n55000/55000 [==============================] - 2s 44us/sample - loss: 0.6522 - acc: 0.7912 - val_loss: 0.6395 - val_acc: 0.7998\nEpoch 82/100\n55000/55000 [==============================] - 2s 44us/sample - loss: 0.6502 - acc: 0.7916 - val_loss: 0.6376 - val_acc: 0.7996\nEpoch 83/100\n55000/55000 [==============================] - 2s 44us/sample - loss: 0.6483 - acc: 0.7920 - val_loss: 0.6357 - val_acc: 0.8002\nEpoch 84/100\n55000/55000 [==============================] - 2s 44us/sample - loss: 0.6464 - acc: 0.7925 - val_loss: 0.6339 - val_acc: 0.8010\nEpoch 85/100\n55000/55000 [==============================] - 2s 44us/sample - loss: 0.6445 - acc: 0.7929 - val_loss: 0.6320 - val_acc: 0.8010\nEpoch 86/100\n55000/55000 [==============================] - 2s 44us/sample - loss: 0.6427 - acc: 0.7935 - val_loss: 0.6302 - val_acc: 0.8016\nEpoch 87/100\n55000/55000 [==============================] - 2s 44us/sample - loss: 0.6409 - acc: 0.7937 - val_loss: 0.6284 - val_acc: 0.8014\nEpoch 88/100\n55000/55000 [==============================] - 2s 44us/sample - loss: 0.6391 - acc: 0.7940 - val_loss: 0.6267 - val_acc: 0.8020\nEpoch 89/100\n55000/55000 [==============================] - 2s 44us/sample - loss: 0.6374 - acc: 0.7945 - val_loss: 0.6250 - val_acc: 0.8022\nEpoch 90/100\n55000/55000 [==============================] - 2s 44us/sample - loss: 0.6356 - acc: 0.7946 - val_loss: 0.6233 - val_acc: 0.8032\nEpoch 91/100\n55000/55000 [==============================] - 2s 44us/sample - loss: 0.6340 - acc: 0.7953 - val_loss: 0.6217 - val_acc: 0.8040\nEpoch 92/100\n55000/55000 [==============================] - 2s 44us/sample - loss: 0.6323 - acc: 0.7957 - val_loss: 0.6199 - val_acc: 0.8050\nEpoch 93/100\n55000/55000 [==============================] - 2s 44us/sample - loss: 0.6306 - acc: 0.7962 - val_loss: 0.6183 - val_acc: 0.8056\nEpoch 94/100\n55000/55000 [==============================] - 2s 44us/sample - loss: 0.6290 - acc: 0.7963 - val_loss: 0.6168 - val_acc: 0.8056\nEpoch 95/100\n55000/55000 [==============================] - 2s 44us/sample - loss: 0.6274 - acc: 0.7969 - val_loss: 0.6152 - val_acc: 0.8056\nEpoch 96/100\n55000/55000 [==============================] - 2s 44us/sample - loss: 0.6258 - acc: 0.7974 - val_loss: 0.6137 - val_acc: 0.8064\nEpoch 97/100\n55000/55000 [==============================] - 2s 44us/sample - loss: 0.6242 - acc: 0.7978 - val_loss: 0.6121 - val_acc: 0.8066\nEpoch 98/100\n55000/55000 [==============================] - 2s 44us/sample - loss: 0.6227 - acc: 0.7986 - val_loss: 0.6106 - val_acc: 0.8068\nEpoch 99/100\n55000/55000 [==============================] - 2s 44us/sample - loss: 0.6212 - acc: 0.7985 - val_loss: 0.6091 - val_acc: 0.8080\nEpoch 100/100\n55000/55000 [==============================] - 2s 44us/sample - loss: 0.6197 - acc: 0.7992 - val_loss: 0.6077 - val_acc: 0.8074\n\n\n\n\n\n&lt;tensorflow.python.keras.callbacks.History at 0x16f1a0a3a20&gt;\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "机器学习"
            ]
        }
    ]
}